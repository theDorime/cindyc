{"ast":null,"code":"import { Color } from '@pixi/color';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nclass BackgroundSystem {\n  constructor() {\n    this.clearBeforeRender = true;\n    this._backgroundColor = new Color(0);\n    this.alpha = 1;\n  }\n  init(options) {\n    this.clearBeforeRender = options.clearBeforeRender;\n    const {\n      backgroundColor,\n      background,\n      backgroundAlpha\n    } = options;\n    const color = background ?? backgroundColor;\n    if (color !== void 0) {\n      this.color = color;\n    }\n    this.alpha = backgroundAlpha;\n  }\n  get color() {\n    return this._backgroundColor.value;\n  }\n  set color(value) {\n    this._backgroundColor.setValue(value);\n  }\n  get alpha() {\n    return this._backgroundColor.alpha;\n  }\n  set alpha(value) {\n    this._backgroundColor.setAlpha(value);\n  }\n  get backgroundColor() {\n    return this._backgroundColor;\n  }\n  destroy() {}\n}\nBackgroundSystem.defaultOptions = {\n  backgroundAlpha: 1,\n  backgroundColor: 0,\n  clearBeforeRender: true\n};\nBackgroundSystem.extension = {\n  type: [ExtensionType.RendererSystem, ExtensionType.CanvasRendererSystem],\n  name: \"background\"\n};\nextensions.add(BackgroundSystem);\nexport { BackgroundSystem };","map":{"version":3,"names":["BackgroundSystem","constructor","clearBeforeRender","_backgroundColor","Color","alpha","init","options","backgroundColor","background","backgroundAlpha","color","value","setValue","setAlpha","destroy","defaultOptions","extension","type","ExtensionType","RendererSystem","CanvasRendererSystem","name","extensions","add"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\background\\BackgroundSystem.ts"],"sourcesContent":["import { Color } from '@pixi/color';\nimport { extensions, ExtensionType } from '@pixi/extensions';\n\nimport type { ColorSource } from '@pixi/color';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { ISystem } from '../system/ISystem';\n\n/**\n * Options for the background system.\n * @memberof PIXI\n * @deprecated since 7.2.3\n * @see PIXI.BackgroundSystemOptions\n */\nexport type BackgroundSytemOptions = BackgroundSystemOptions;\n\n/**\n * Options for the background system.\n * @memberof PIXI\n */\nexport interface BackgroundSystemOptions\n{\n    /**\n     * The background color used to clear the canvas. See {@link PIXI.ColorSource} for accepted color values.\n     * @memberof PIXI.IRendererOptions\n     */\n    backgroundColor: ColorSource;\n    /**\n     * Alias for {@link PIXI.IRendererOptions.backgroundColor}\n     * @memberof PIXI.IRendererOptions\n     */\n    background?: ColorSource;\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @memberof PIXI.IRendererOptions\n     */\n    backgroundAlpha: number;\n    /**\n     * Whether to clear the canvas before new render passes.\n     * @memberof PIXI.IRendererOptions\n     */\n    clearBeforeRender: boolean;\n}\n\n/**\n * The background system manages the background color and alpha of the main view.\n * @memberof PIXI\n */\nexport class BackgroundSystem implements ISystem<BackgroundSystemOptions>\n{\n    static defaultOptions: BackgroundSystemOptions = {\n        /**\n         * {@link PIXI.IRendererOptions.backgroundAlpha}\n         * @default 1\n         * @memberof PIXI.settings.RENDER_OPTIONS\n         */\n        backgroundAlpha: 1,\n        /**\n         * {@link PIXI.IRendererOptions.backgroundColor}\n         * @default 0x000000\n         * @memberof PIXI.settings.RENDER_OPTIONS\n         */\n        backgroundColor: 0x0,\n        /**\n         * {@link PIXI.IRendererOptions.clearBeforeRender}\n         * @default true\n         * @memberof PIXI.settings.RENDER_OPTIONS\n         */\n        clearBeforeRender: true,\n    };\n\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n        name: 'background',\n    };\n\n    /**\n     * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n     * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n     * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n     * to clear the canvas every frame. Disable this by setting this to false. For example, if\n     * your game has a canvas filling background image you often don't need this set.\n     * @member {boolean}\n     * @default\n     */\n    public clearBeforeRender: boolean;\n\n    /** Reference to the internal color */\n    private _backgroundColor: Color;\n\n    constructor()\n    {\n        this.clearBeforeRender = true;\n        this._backgroundColor = new Color(0x0);\n        this.alpha = 1;\n    }\n\n    /**\n     * initiates the background system\n     * @param {PIXI.IRendererOptions} options - the options for the background colors\n     */\n    init(options: BackgroundSystemOptions): void\n    {\n        this.clearBeforeRender = options.clearBeforeRender;\n        const { backgroundColor, background, backgroundAlpha } = options;\n        const color = background ?? backgroundColor;\n\n        if (color !== undefined)\n        {\n            this.color = color;\n        }\n\n        this.alpha = backgroundAlpha;\n    }\n\n    /**\n     * The background color to fill if not transparent.\n     * @member {PIXI.ColorSource}\n     */\n    get color(): ColorSource\n    {\n        return this._backgroundColor.value;\n    }\n\n    set color(value: ColorSource)\n    {\n        this._backgroundColor.setValue(value);\n    }\n\n    /**\n     * The background color alpha. Setting this to 0 will make the canvas transparent.\n     * @member {number}\n     */\n    get alpha(): number\n    {\n        return this._backgroundColor.alpha;\n    }\n\n    set alpha(value: number)\n    {\n        this._backgroundColor.setAlpha(value);\n    }\n\n    /** The background color object. */\n    get backgroundColor(): Color\n    {\n        return this._backgroundColor;\n    }\n\n    destroy(): void\n    {\n        // ka boom!\n    }\n}\n\nextensions.add(BackgroundSystem);\n"],"mappings":";;AA+CO,MAAMA,gBACb;EA6CIC,WACAA,CAAA;IACI,KAAKC,iBAAoB;IACpB,KAAAC,gBAAA,GAAmB,IAAIC,KAAA,CAAM,CAAG;IACrC,KAAKC,KAAQ;EAAA;EAOjBC,KAAKC,OACL;IACI,KAAKL,iBAAA,GAAoBK,OAAQ,CAAAL,iBAAA;IAC3B;MAAEM,eAAiB;MAAAC,UAAA;MAAYC;IAAoB,IAAAH,OAAA;IACzD,MAAMI,KAAA,GAAQF,UAAc,IAAAD,eAAA;IAE5B,IAAIG,KAAA,KAAU,KACd;MACI,KAAKA,KAAQ,GAAAA,KAAA;IAAA;IAGjB,KAAKN,KAAQ,GAAAK,eAAA;EAAA;EAOjB,IAAIC,KACJA,CAAA;IACI,OAAO,KAAKR,gBAAiB,CAAAS,KAAA;EAAA;EAGjC,IAAID,MAAMC,KACV;IACS,KAAAT,gBAAA,CAAiBU,QAAA,CAASD,KAAK;EAAA;EAOxC,IAAIP,KACJA,CAAA;IACI,OAAO,KAAKF,gBAAiB,CAAAE,KAAA;EAAA;EAGjC,IAAIA,MAAMO,KACV;IACS,KAAAT,gBAAA,CAAiBW,QAAA,CAASF,KAAK;EAAA;EAIxC,IAAIJ,eACJA,CAAA;IACI,OAAO,IAAK,CAAAL,gBAAA;EAAA;EAGhBY,OACAA,CAAA;AAGJ;AA7Gaf,gBAAA,CAEFgB,cAA0C;EAM7CN,eAAiB;EAMjBF,eAAiB;EAMjBN,iBAAmB;AACvB;AArBSF,gBAAA,CAwBFiB,SAA+B;EAClCC,IAAM,GACFC,aAAc,CAAAC,cAAA,EACdD,aAAc,CAAAE,oBAAA,CAClB;EACAC,IAAM;AACV;AAiFJC,UAAA,CAAWC,GAAA,CAAIxB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}