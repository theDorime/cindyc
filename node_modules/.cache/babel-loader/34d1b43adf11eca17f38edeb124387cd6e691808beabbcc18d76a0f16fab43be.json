{"ast":null,"code":"import { Point, SHAPES } from '@pixi/core';\nimport { LINE_CAP, LINE_JOIN, curves } from '../const.mjs';\nfunction square(x, y, nx, ny, innerWeight, outerWeight, clockwise, verts) {\n  const ix = x - nx * innerWeight;\n  const iy = y - ny * innerWeight;\n  const ox = x + nx * outerWeight;\n  const oy = y + ny * outerWeight;\n  let exx;\n  let eyy;\n  if (clockwise) {\n    exx = ny;\n    eyy = -nx;\n  } else {\n    exx = -ny;\n    eyy = nx;\n  }\n  const eix = ix + exx;\n  const eiy = iy + eyy;\n  const eox = ox + exx;\n  const eoy = oy + eyy;\n  verts.push(eix, eiy, eox, eoy);\n  return 2;\n}\nfunction round(cx, cy, sx, sy, ex, ey, verts, clockwise) {\n  const cx2p0x = sx - cx;\n  const cy2p0y = sy - cy;\n  let angle0 = Math.atan2(cx2p0x, cy2p0y);\n  let angle1 = Math.atan2(ex - cx, ey - cy);\n  if (clockwise && angle0 < angle1) {\n    angle0 += Math.PI * 2;\n  } else if (!clockwise && angle0 > angle1) {\n    angle1 += Math.PI * 2;\n  }\n  let startAngle = angle0;\n  const angleDiff = angle1 - angle0;\n  const absAngleDiff = Math.abs(angleDiff);\n  const radius = Math.sqrt(cx2p0x * cx2p0x + cy2p0y * cy2p0y);\n  const segCount = (15 * absAngleDiff * Math.sqrt(radius) / Math.PI >> 0) + 1;\n  const angleInc = angleDiff / segCount;\n  startAngle += angleInc;\n  if (clockwise) {\n    verts.push(cx, cy, sx, sy);\n    for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc) {\n      verts.push(cx, cy, cx + Math.sin(angle) * radius, cy + Math.cos(angle) * radius);\n    }\n    verts.push(cx, cy, ex, ey);\n  } else {\n    verts.push(sx, sy, cx, cy);\n    for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc) {\n      verts.push(cx + Math.sin(angle) * radius, cy + Math.cos(angle) * radius, cx, cy);\n    }\n    verts.push(ex, ey, cx, cy);\n  }\n  return segCount * 2;\n}\nfunction buildNonNativeLine(graphicsData, graphicsGeometry) {\n  const shape = graphicsData.shape;\n  let points = graphicsData.points || shape.points.slice();\n  const eps = graphicsGeometry.closePointEps;\n  if (points.length === 0) {\n    return;\n  }\n  const style = graphicsData.lineStyle;\n  const firstPoint = new Point(points[0], points[1]);\n  const lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n  const closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;\n  const closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps && Math.abs(firstPoint.y - lastPoint.y) < eps;\n  if (closedShape) {\n    points = points.slice();\n    if (closedPath) {\n      points.pop();\n      points.pop();\n      lastPoint.set(points[points.length - 2], points[points.length - 1]);\n    }\n    const midPointX = (firstPoint.x + lastPoint.x) * 0.5;\n    const midPointY = (lastPoint.y + firstPoint.y) * 0.5;\n    points.unshift(midPointX, midPointY);\n    points.push(midPointX, midPointY);\n  }\n  const verts = graphicsGeometry.points;\n  const length = points.length / 2;\n  let indexCount = points.length;\n  const indexStart = verts.length / 2;\n  const width = style.width / 2;\n  const widthSquared = width * width;\n  const miterLimitSquared = style.miterLimit * style.miterLimit;\n  let x0 = points[0];\n  let y0 = points[1];\n  let x1 = points[2];\n  let y1 = points[3];\n  let x2 = 0;\n  let y2 = 0;\n  let perpx = -(y0 - y1);\n  let perpy = x0 - x1;\n  let perp1x = 0;\n  let perp1y = 0;\n  let dist = Math.sqrt(perpx * perpx + perpy * perpy);\n  perpx /= dist;\n  perpy /= dist;\n  perpx *= width;\n  perpy *= width;\n  const ratio = style.alignment;\n  const innerWeight = (1 - ratio) * 2;\n  const outerWeight = ratio * 2;\n  if (!closedShape) {\n    if (style.cap === LINE_CAP.ROUND) {\n      indexCount += round(x0 - perpx * (innerWeight - outerWeight) * 0.5, y0 - perpy * (innerWeight - outerWeight) * 0.5, x0 - perpx * innerWeight, y0 - perpy * innerWeight, x0 + perpx * outerWeight, y0 + perpy * outerWeight, verts, true) + 2;\n    } else if (style.cap === LINE_CAP.SQUARE) {\n      indexCount += square(x0, y0, perpx, perpy, innerWeight, outerWeight, true, verts);\n    }\n  }\n  verts.push(x0 - perpx * innerWeight, y0 - perpy * innerWeight, x0 + perpx * outerWeight, y0 + perpy * outerWeight);\n  for (let i = 1; i < length - 1; ++i) {\n    x0 = points[(i - 1) * 2];\n    y0 = points[(i - 1) * 2 + 1];\n    x1 = points[i * 2];\n    y1 = points[i * 2 + 1];\n    x2 = points[(i + 1) * 2];\n    y2 = points[(i + 1) * 2 + 1];\n    perpx = -(y0 - y1);\n    perpy = x0 - x1;\n    dist = Math.sqrt(perpx * perpx + perpy * perpy);\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n    perp1x = -(y1 - y2);\n    perp1y = x1 - x2;\n    dist = Math.sqrt(perp1x * perp1x + perp1y * perp1y);\n    perp1x /= dist;\n    perp1y /= dist;\n    perp1x *= width;\n    perp1y *= width;\n    const dx0 = x1 - x0;\n    const dy0 = y0 - y1;\n    const dx1 = x1 - x2;\n    const dy1 = y2 - y1;\n    const dot = dx0 * dx1 + dy0 * dy1;\n    const cross = dy0 * dx1 - dy1 * dx0;\n    const clockwise = cross < 0;\n    if (Math.abs(cross) < 1e-3 * Math.abs(dot)) {\n      verts.push(x1 - perpx * innerWeight, y1 - perpy * innerWeight, x1 + perpx * outerWeight, y1 + perpy * outerWeight);\n      if (dot >= 0) {\n        if (style.join === LINE_JOIN.ROUND) {\n          indexCount += round(x1, y1, x1 - perpx * innerWeight, y1 - perpy * innerWeight, x1 - perp1x * innerWeight, y1 - perp1y * innerWeight, verts, false) + 4;\n        } else {\n          indexCount += 2;\n        }\n        verts.push(x1 - perp1x * outerWeight, y1 - perp1y * outerWeight, x1 + perp1x * innerWeight, y1 + perp1y * innerWeight);\n      }\n      continue;\n    }\n    const c1 = (-perpx + x0) * (-perpy + y1) - (-perpx + x1) * (-perpy + y0);\n    const c2 = (-perp1x + x2) * (-perp1y + y1) - (-perp1x + x1) * (-perp1y + y2);\n    const px = (dx0 * c2 - dx1 * c1) / cross;\n    const py = (dy1 * c1 - dy0 * c2) / cross;\n    const pdist = (px - x1) * (px - x1) + (py - y1) * (py - y1);\n    const imx = x1 + (px - x1) * innerWeight;\n    const imy = y1 + (py - y1) * innerWeight;\n    const omx = x1 - (px - x1) * outerWeight;\n    const omy = y1 - (py - y1) * outerWeight;\n    const smallerInsideSegmentSq = Math.min(dx0 * dx0 + dy0 * dy0, dx1 * dx1 + dy1 * dy1);\n    const insideWeight = clockwise ? innerWeight : outerWeight;\n    const smallerInsideDiagonalSq = smallerInsideSegmentSq + insideWeight * insideWeight * widthSquared;\n    const insideMiterOk = pdist <= smallerInsideDiagonalSq;\n    let join = style.join;\n    if (join === LINE_JOIN.MITER && pdist / widthSquared > miterLimitSquared) {\n      join = LINE_JOIN.BEVEL;\n    }\n    if (insideMiterOk) {\n      switch (join) {\n        case LINE_JOIN.MITER:\n          {\n            verts.push(imx, imy, omx, omy);\n            break;\n          }\n        case LINE_JOIN.BEVEL:\n          {\n            if (clockwise) {\n              verts.push(imx, imy, x1 + perpx * outerWeight, y1 + perpy * outerWeight, imx, imy, x1 + perp1x * outerWeight, y1 + perp1y * outerWeight);\n            } else {\n              verts.push(x1 - perpx * innerWeight, y1 - perpy * innerWeight, omx, omy, x1 - perp1x * innerWeight, y1 - perp1y * innerWeight, omx, omy);\n            }\n            indexCount += 2;\n            break;\n          }\n        case LINE_JOIN.ROUND:\n          {\n            if (clockwise) {\n              verts.push(imx, imy, x1 + perpx * outerWeight, y1 + perpy * outerWeight);\n              indexCount += round(x1, y1, x1 + perpx * outerWeight, y1 + perpy * outerWeight, x1 + perp1x * outerWeight, y1 + perp1y * outerWeight, verts, true) + 4;\n              verts.push(imx, imy, x1 + perp1x * outerWeight, y1 + perp1y * outerWeight);\n            } else {\n              verts.push(x1 - perpx * innerWeight, y1 - perpy * innerWeight, omx, omy);\n              indexCount += round(x1, y1, x1 - perpx * innerWeight, y1 - perpy * innerWeight, x1 - perp1x * innerWeight, y1 - perp1y * innerWeight, verts, false) + 4;\n              verts.push(x1 - perp1x * innerWeight, y1 - perp1y * innerWeight, omx, omy);\n            }\n            break;\n          }\n      }\n    } else {\n      verts.push(x1 - perpx * innerWeight, y1 - perpy * innerWeight, x1 + perpx * outerWeight, y1 + perpy * outerWeight);\n      switch (join) {\n        case LINE_JOIN.MITER:\n          {\n            if (clockwise) {\n              verts.push(omx, omy, omx, omy);\n            } else {\n              verts.push(imx, imy, imx, imy);\n            }\n            indexCount += 2;\n            break;\n          }\n        case LINE_JOIN.ROUND:\n          {\n            if (clockwise) {\n              indexCount += round(x1, y1, x1 + perpx * outerWeight, y1 + perpy * outerWeight, x1 + perp1x * outerWeight, y1 + perp1y * outerWeight, verts, true) + 2;\n            } else {\n              indexCount += round(x1, y1, x1 - perpx * innerWeight, y1 - perpy * innerWeight, x1 - perp1x * innerWeight, y1 - perp1y * innerWeight, verts, false) + 2;\n            }\n            break;\n          }\n      }\n      verts.push(x1 - perp1x * innerWeight, y1 - perp1y * innerWeight, x1 + perp1x * outerWeight, y1 + perp1y * outerWeight);\n      indexCount += 2;\n    }\n  }\n  x0 = points[(length - 2) * 2];\n  y0 = points[(length - 2) * 2 + 1];\n  x1 = points[(length - 1) * 2];\n  y1 = points[(length - 1) * 2 + 1];\n  perpx = -(y0 - y1);\n  perpy = x0 - x1;\n  dist = Math.sqrt(perpx * perpx + perpy * perpy);\n  perpx /= dist;\n  perpy /= dist;\n  perpx *= width;\n  perpy *= width;\n  verts.push(x1 - perpx * innerWeight, y1 - perpy * innerWeight, x1 + perpx * outerWeight, y1 + perpy * outerWeight);\n  if (!closedShape) {\n    if (style.cap === LINE_CAP.ROUND) {\n      indexCount += round(x1 - perpx * (innerWeight - outerWeight) * 0.5, y1 - perpy * (innerWeight - outerWeight) * 0.5, x1 - perpx * innerWeight, y1 - perpy * innerWeight, x1 + perpx * outerWeight, y1 + perpy * outerWeight, verts, false) + 2;\n    } else if (style.cap === LINE_CAP.SQUARE) {\n      indexCount += square(x1, y1, perpx, perpy, innerWeight, outerWeight, false, verts);\n    }\n  }\n  const indices = graphicsGeometry.indices;\n  const eps2 = curves.epsilon * curves.epsilon;\n  for (let i = indexStart; i < indexCount + indexStart - 2; ++i) {\n    x0 = verts[i * 2];\n    y0 = verts[i * 2 + 1];\n    x1 = verts[(i + 1) * 2];\n    y1 = verts[(i + 1) * 2 + 1];\n    x2 = verts[(i + 2) * 2];\n    y2 = verts[(i + 2) * 2 + 1];\n    if (Math.abs(x0 * (y1 - y2) + x1 * (y2 - y0) + x2 * (y0 - y1)) < eps2) {\n      continue;\n    }\n    indices.push(i, i + 1, i + 2);\n  }\n}\nfunction buildNativeLine(graphicsData, graphicsGeometry) {\n  let i = 0;\n  const shape = graphicsData.shape;\n  const points = graphicsData.points || shape.points;\n  const closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;\n  if (points.length === 0) return;\n  const verts = graphicsGeometry.points;\n  const indices = graphicsGeometry.indices;\n  const length = points.length / 2;\n  const startIndex = verts.length / 2;\n  let currentIndex = startIndex;\n  verts.push(points[0], points[1]);\n  for (i = 1; i < length; i++) {\n    verts.push(points[i * 2], points[i * 2 + 1]);\n    indices.push(currentIndex, currentIndex + 1);\n    currentIndex++;\n  }\n  if (closedShape) {\n    indices.push(currentIndex, startIndex);\n  }\n}\nfunction buildLine(graphicsData, graphicsGeometry) {\n  if (graphicsData.lineStyle.native) {\n    buildNativeLine(graphicsData, graphicsGeometry);\n  } else {\n    buildNonNativeLine(graphicsData, graphicsGeometry);\n  }\n}\nexport { buildLine };","map":{"version":3,"names":["square","x","y","nx","ny","innerWeight","outerWeight","clockwise","verts","ix","iy","ox","oy","exx","eyy","eix","eiy","eox","eoy","push","round","cx","cy","sx","sy","ex","ey","cx2p0x","cy2p0y","angle0","Math","atan2","angle1","PI","startAngle","angleDiff","absAngleDiff","abs","radius","sqrt","segCount","angleInc","i","angle","sin","cos","buildNonNativeLine","graphicsData","graphicsGeometry","shape","points","slice","eps","closePointEps","length","style","lineStyle","firstPoint","Point","lastPoint","closedShape","type","SHAPES","POLY","closeStroke","closedPath","pop","set","midPointX","midPointY","unshift","indexCount","indexStart","width","widthSquared","miterLimitSquared","miterLimit","x0","y0","x1","y1","x2","y2","perpx","perpy","perp1x","perp1y","dist","ratio","alignment","cap","LINE_CAP","ROUND","SQUARE","dx0","dy0","dx1","dy1","dot","cross","join","LINE_JOIN","c1","c2","px","py","pdist","imx","imy","omx","omy","smallerInsideSegmentSq","min","insideWeight","smallerInsideDiagonalSq","insideMiterOk","MITER","BEVEL","indices","eps2","curves","epsilon","buildNativeLine","startIndex","currentIndex","buildLine","native"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\graphics\\src\\utils\\buildLine.ts"],"sourcesContent":["import { Point, SHAPES } from '@pixi/core';\nimport { curves, LINE_CAP, LINE_JOIN } from '../const';\n\nimport type { Polygon } from '@pixi/core';\nimport type { GraphicsData } from '../GraphicsData';\nimport type { GraphicsGeometry } from '../GraphicsGeometry';\n\n/**\n * Buffers vertices to draw a square cap.\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {number} x - X-coord of end point\n * @param {number} y - Y-coord of end point\n * @param {number} nx - X-coord of line normal pointing inside\n * @param {number} ny - Y-coord of line normal pointing inside\n * @param {number} innerWeight - Weight of inner points\n * @param {number} outerWeight - Weight of outer points\n * @param {boolean} clockwise - Whether the cap is drawn clockwise\n * @param {Array<number>} verts - vertex buffer\n * @returns {number} - no. of vertices pushed\n */\nfunction square(\n    x: number,\n    y: number,\n    nx: number,\n    ny: number,\n    innerWeight: number,\n    outerWeight: number,\n    clockwise: boolean, /* rotation for square (true at left end, false at right end) */\n    verts: Array<number>\n): number\n{\n    const ix = x - (nx * innerWeight);\n    const iy = y - (ny * innerWeight);\n    const ox = x + (nx * outerWeight);\n    const oy = y + (ny * outerWeight);\n\n    /* Rotate nx,ny for extension vector */\n    let exx; let\n        eyy;\n\n    if (clockwise)\n    {\n        exx = ny;\n        eyy = -nx;\n    }\n    else\n    {\n        exx = -ny;\n        eyy = nx;\n    }\n\n    /* [i|0]x,y extended at cap */\n    const eix = ix + exx;\n    const eiy = iy + eyy;\n    const eox = ox + exx;\n    const eoy = oy + eyy;\n\n    /* Square itself must be inserted clockwise*/\n    verts.push(\n        eix, eiy,\n        eox, eoy);\n\n    return 2;\n}\n\n/**\n * Buffers vertices to draw an arc at the line joint or cap.\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {number} cx - X-coord of center\n * @param {number} cy - Y-coord of center\n * @param {number} sx - X-coord of arc start\n * @param {number} sy - Y-coord of arc start\n * @param {number} ex - X-coord of arc end\n * @param {number} ey - Y-coord of arc end\n * @param {Array<number>} verts - buffer of vertices\n * @param {boolean} clockwise - orientation of vertices\n * @returns {number} - no. of vertices pushed\n */\nfunction round(\n    cx: number,\n    cy: number,\n    sx: number,\n    sy: number,\n    ex: number,\n    ey: number,\n    verts: Array<number>,\n    clockwise: boolean, /* if not cap, then clockwise is turn of joint, otherwise rotation from angle0 to angle1 */\n): number\n{\n    const cx2p0x = sx - cx;\n    const cy2p0y = sy - cy;\n\n    let angle0 = Math.atan2(cx2p0x, cy2p0y);\n    let angle1 = Math.atan2(ex - cx, ey - cy);\n\n    if (clockwise && angle0 < angle1)\n    {\n        angle0 += Math.PI * 2;\n    }\n    else if (!clockwise && angle0 > angle1)\n    {\n        angle1 += Math.PI * 2;\n    }\n\n    let startAngle = angle0;\n    const angleDiff = angle1 - angle0;\n    const absAngleDiff = Math.abs(angleDiff);\n\n    /* if (absAngleDiff >= PI_LBOUND && absAngleDiff <= PI_UBOUND)\n    {\n        const r1x = cx - nxtPx;\n        const r1y = cy - nxtPy;\n\n        if (r1x === 0)\n        {\n            if (r1y > 0)\n            {\n                angleDiff = -angleDiff;\n            }\n        }\n        else if (r1x >= -curves.epsilon)\n        {\n            angleDiff = -angleDiff;\n        }\n    }*/\n\n    const radius = Math.sqrt((cx2p0x * cx2p0x) + (cy2p0y * cy2p0y));\n    const segCount = ((15 * absAngleDiff * Math.sqrt(radius) / Math.PI) >> 0) + 1;\n    const angleInc = angleDiff / segCount;\n\n    startAngle += angleInc;\n\n    if (clockwise)\n    {\n        verts.push(\n            cx, cy,\n            sx, sy);\n\n        for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n        {\n            verts.push(\n                cx, cy,\n                cx + ((Math.sin(angle) * radius)), cy + ((Math.cos(angle) * radius)));\n        }\n\n        verts.push(\n            cx, cy,\n            ex, ey);\n    }\n    else\n    {\n        verts.push(\n            sx, sy,\n            cx, cy);\n\n        for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n        {\n            verts.push(\n                cx + ((Math.sin(angle) * radius)), cy + ((Math.cos(angle) * radius)),\n                cx, cy);\n        }\n\n        verts.push(\n            ex, ey,\n            cx, cy);\n    }\n\n    return segCount * 2;\n}\n\n/**\n * Builds a line to draw using the polygon method.\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nfunction buildNonNativeLine(graphicsData: GraphicsData, graphicsGeometry: GraphicsGeometry): void\n{\n    const shape = graphicsData.shape as Polygon;\n    let points = graphicsData.points || shape.points.slice();\n    const eps = graphicsGeometry.closePointEps;\n\n    if (points.length === 0)\n    {\n        return;\n    }\n    // if the line width is an odd number add 0.5 to align to a whole pixel\n    // commenting this out fixes #711 and #1620\n    // if (graphicsData.lineWidth%2)\n    // {\n    //     for (i = 0; i < points.length; i++)\n    //     {\n    //         points[i] += 0.5;\n    //     }\n    // }\n\n    const style = graphicsData.lineStyle;\n\n    // get first and last point.. figure out the middle!\n    const firstPoint = new Point(points[0], points[1]);\n    const lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n    const closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;\n    const closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps\n        && Math.abs(firstPoint.y - lastPoint.y) < eps;\n\n    // if the first point is the last point - gonna have issues :)\n    if (closedShape)\n    {\n        // need to clone as we are going to slightly modify the shape..\n        points = points.slice();\n\n        if (closedPath)\n        {\n            points.pop();\n            points.pop();\n            lastPoint.set(points[points.length - 2], points[points.length - 1]);\n        }\n\n        const midPointX = (firstPoint.x + lastPoint.x) * 0.5;\n        const midPointY = (lastPoint.y + firstPoint.y) * 0.5;\n\n        points.unshift(midPointX, midPointY);\n        points.push(midPointX, midPointY);\n    }\n\n    const verts = graphicsGeometry.points;\n    const length = points.length / 2;\n    let indexCount = points.length;\n    const indexStart = verts.length / 2;\n\n    // Max. inner and outer width\n    const width = style.width / 2;\n    const widthSquared = width * width;\n    const miterLimitSquared = style.miterLimit * style.miterLimit;\n\n    /* Line segments of interest where (x1,y1) forms the corner. */\n    let x0 = points[0];\n    let y0 = points[1];\n    let x1 = points[2];\n    let y1 = points[3];\n    let x2 = 0;\n    let y2 = 0;\n\n    /* perp[?](x|y) = the line normal with magnitude lineWidth. */\n    let perpx = -(y0 - y1);\n    let perpy = x0 - x1;\n    let perp1x = 0;\n    let perp1y = 0;\n\n    let dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    const ratio = style.alignment;// 0.5;\n    const innerWeight = (1 - ratio) * 2;\n    const outerWeight = ratio * 2;\n\n    if (!closedShape)\n    {\n        if (style.cap === LINE_CAP.ROUND)\n        {\n            indexCount += round(\n                x0 - (perpx * (innerWeight - outerWeight) * 0.5),\n                y0 - (perpy * (innerWeight - outerWeight) * 0.5),\n                x0 - (perpx * innerWeight),\n                y0 - (perpy * innerWeight),\n                x0 + (perpx * outerWeight),\n                y0 + (perpy * outerWeight),\n                verts,\n                true,\n            ) + 2;\n        }\n        else if (style.cap === LINE_CAP.SQUARE)\n        {\n            indexCount += square(x0, y0, perpx, perpy, innerWeight, outerWeight, true, verts);\n        }\n    }\n\n    // Push first point (below & above vertices)\n    verts.push(\n        x0 - (perpx * innerWeight), y0 - (perpy * innerWeight),\n        x0 + (perpx * outerWeight), y0 + (perpy * outerWeight));\n\n    for (let i = 1; i < length - 1; ++i)\n    {\n        x0 = points[(i - 1) * 2];\n        y0 = points[((i - 1) * 2) + 1];\n\n        x1 = points[i * 2];\n        y1 = points[(i * 2) + 1];\n\n        x2 = points[(i + 1) * 2];\n        y2 = points[((i + 1) * 2) + 1];\n\n        perpx = -(y0 - y1);\n        perpy = x0 - x1;\n\n        dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n        perpx /= dist;\n        perpy /= dist;\n        perpx *= width;\n        perpy *= width;\n\n        perp1x = -(y1 - y2);\n        perp1y = x1 - x2;\n\n        dist = Math.sqrt((perp1x * perp1x) + (perp1y * perp1y));\n        perp1x /= dist;\n        perp1y /= dist;\n        perp1x *= width;\n        perp1y *= width;\n\n        /* d[x|y](0|1) = the component displacement between points p(0,1|1,2) */\n        const dx0 = x1 - x0;\n        const dy0 = y0 - y1;\n        const dx1 = x1 - x2;\n        const dy1 = y2 - y1;\n\n        /* +ve if internal angle < 90 degree, -ve if internal angle > 90 degree. */\n        const dot = (dx0 * dx1) + (dy0 * dy1);\n        /* +ve if internal angle counterclockwise, -ve if internal angle clockwise. */\n        const cross = (dy0 * dx1) - (dy1 * dx0);\n        const clockwise = (cross < 0);\n\n        /* Going nearly parallel? */\n        /* atan(0.001) ~= 0.001 rad ~= 0.057 degree */\n        if (Math.abs(cross) < 0.001 * Math.abs(dot))\n        {\n            verts.push(\n                x1 - (perpx * innerWeight), y1 - (perpy * innerWeight),\n                x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));\n\n            /* 180 degree corner? */\n            if (dot >= 0)\n            {\n                if (style.join === LINE_JOIN.ROUND)\n                {\n                    indexCount += round(\n                        x1, y1,\n                        x1 - (perpx * innerWeight), y1 - (perpy * innerWeight),\n                        x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                        verts, false) + 4;\n                }\n                else\n                {\n                    indexCount += 2;\n                }\n\n                verts.push(\n                    x1 - (perp1x * outerWeight), y1 - (perp1y * outerWeight),\n                    x1 + (perp1x * innerWeight), y1 + (perp1y * innerWeight));\n            }\n\n            continue;\n        }\n\n        /* p[x|y] is the miter point. pdist is the distance between miter point and p1. */\n        const c1 = ((-perpx + x0) * (-perpy + y1)) - ((-perpx + x1) * (-perpy + y0));\n        const c2 = ((-perp1x + x2) * (-perp1y + y1)) - ((-perp1x + x1) * (-perp1y + y2));\n        const px = ((dx0 * c2) - (dx1 * c1)) / cross;\n        const py = ((dy1 * c1) - (dy0 * c2)) / cross;\n        const pdist = ((px - x1) * (px - x1)) + ((py - y1) * (py - y1));\n\n        /* Inner miter point */\n        const imx = x1 + ((px - x1) * innerWeight);\n        const imy = y1 + ((py - y1) * innerWeight);\n        /* Outer miter point */\n        const omx = x1 - ((px - x1) * outerWeight);\n        const omy = y1 - ((py - y1) * outerWeight);\n\n        /* Is the inside miter point too far away, creating a spike? */\n        const smallerInsideSegmentSq = Math.min((dx0 * dx0) + (dy0 * dy0), (dx1 * dx1) + (dy1 * dy1));\n        const insideWeight = clockwise ? innerWeight : outerWeight;\n        const smallerInsideDiagonalSq = smallerInsideSegmentSq + (insideWeight * insideWeight * widthSquared);\n        const insideMiterOk = pdist <= smallerInsideDiagonalSq;\n\n        let join = style.join;\n\n        if (join === LINE_JOIN.MITER && pdist / widthSquared > miterLimitSquared)\n        {\n            join = LINE_JOIN.BEVEL;\n        }\n\n        if (insideMiterOk)\n        {\n            switch (join)\n            {\n                case LINE_JOIN.MITER:\n                {\n                    verts.push(\n                        imx, imy,\n                        omx, omy);\n                    break;\n                }\n                case LINE_JOIN.BEVEL:\n                {\n                    if (clockwise) /* rotating at inner angle */\n                    {\n                        verts.push(\n                            imx, imy, // inner miter point\n                            x1 + (perpx * outerWeight), y1 + (perpy * outerWeight), // first segment's outer vertex\n                            imx, imy, // inner miter point\n                            x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight)); // second segment's outer vertex\n                    }\n                    else /* rotating at outer angle */\n                    {\n                        verts.push(\n                            x1 - (perpx * innerWeight), y1 - (perpy * innerWeight), // first segment's inner vertex\n                            omx, omy, // outer miter point\n                            x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight), // second segment's outer vertex\n                            omx, omy); // outer miter point\n                    }\n\n                    indexCount += 2;\n                    break;\n                }\n                case LINE_JOIN.ROUND:\n                {\n                    if (clockwise) /* arc is outside */\n                    {\n                        verts.push(\n                            imx, imy,\n                            x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));\n\n                        indexCount += round(\n                            x1, y1,\n                            x1 + (perpx * outerWeight), y1 + (perpy * outerWeight),\n                            x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight),\n                            verts, true\n                        ) + 4;\n\n                        verts.push(\n                            imx, imy,\n                            x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight));\n                    }\n                    else /* arc is inside */\n                    {\n                        verts.push(\n                            x1 - (perpx * innerWeight), y1 - (perpy * innerWeight),\n                            omx, omy);\n\n                        indexCount += round(\n                            x1, y1,\n                            x1 - (perpx * innerWeight), y1 - (perpy * innerWeight),\n                            x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                            verts, false\n                        ) + 4;\n\n                        verts.push(\n                            x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                            omx, omy);\n                    }\n                    break;\n                }\n            }\n        }\n        else // inside miter is NOT ok\n        {\n            verts.push(\n                x1 - (perpx * innerWeight), y1 - (perpy * innerWeight), // first segment's inner vertex\n                x1 + (perpx * outerWeight), y1 + (perpy * outerWeight)); // first segment's outer vertex\n            switch (join)\n            {\n                case LINE_JOIN.MITER:\n                {\n                    if (clockwise)\n                    {\n                        verts.push(\n                            omx, omy, // inner miter point\n                            omx, omy); // inner miter point\n                    }\n                    else\n                    {\n                        verts.push(\n                            imx, imy, // outer miter point\n                            imx, imy); // outer miter point\n                    }\n                    indexCount += 2;\n                    break;\n                }\n                case LINE_JOIN.ROUND:\n                {\n                    if (clockwise) /* arc is outside */\n                    {\n                        indexCount += round(\n                            x1, y1,\n                            x1 + (perpx * outerWeight), y1 + (perpy * outerWeight),\n                            x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight),\n                            verts, true\n                        ) + 2;\n                    }\n                    else /* arc is inside */\n                    {\n                        indexCount += round(\n                            x1, y1,\n                            x1 - (perpx * innerWeight), y1 - (perpy * innerWeight),\n                            x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                            verts, false\n                        ) + 2;\n                    }\n                    break;\n                }\n            }\n            verts.push(\n                x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight), // second segment's inner vertex\n                x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight)); // second segment's outer vertex\n            indexCount += 2;\n        }\n    }\n\n    x0 = points[(length - 2) * 2];\n    y0 = points[((length - 2) * 2) + 1];\n\n    x1 = points[(length - 1) * 2];\n    y1 = points[((length - 1) * 2) + 1];\n\n    perpx = -(y0 - y1);\n    perpy = x0 - x1;\n\n    dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    verts.push(\n        x1 - (perpx * innerWeight), y1 - (perpy * innerWeight),\n        x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));\n\n    if (!closedShape)\n    {\n        if (style.cap === LINE_CAP.ROUND)\n        {\n            indexCount += round(\n                x1 - (perpx * (innerWeight - outerWeight) * 0.5),\n                y1 - (perpy * (innerWeight - outerWeight) * 0.5),\n                x1 - (perpx * innerWeight),\n                y1 - (perpy * innerWeight),\n                x1 + (perpx * outerWeight),\n                y1 + (perpy * outerWeight),\n                verts,\n                false\n            ) + 2;\n        }\n        else if (style.cap === LINE_CAP.SQUARE)\n        {\n            indexCount += square(x1, y1, perpx, perpy, innerWeight, outerWeight, false, verts);\n        }\n    }\n\n    const indices = graphicsGeometry.indices;\n    const eps2 = curves.epsilon * curves.epsilon;\n\n    // indices.push(indexStart);\n    for (let i = indexStart; i < indexCount + indexStart - 2; ++i)\n    {\n        x0 = verts[(i * 2)];\n        y0 = verts[(i * 2) + 1];\n\n        x1 = verts[(i + 1) * 2];\n        y1 = verts[((i + 1) * 2) + 1];\n\n        x2 = verts[(i + 2) * 2];\n        y2 = verts[((i + 2) * 2) + 1];\n\n        /* Skip zero area triangles */\n        if (Math.abs((x0 * (y1 - y2)) + (x1 * (y2 - y0)) + (x2 * (y0 - y1))) < eps2)\n        {\n            continue;\n        }\n\n        indices.push(i, i + 1, i + 2);\n    }\n}\n\n/**\n * Builds a line to draw using the gl.drawArrays(gl.LINES) method\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nfunction buildNativeLine(graphicsData: GraphicsData, graphicsGeometry: GraphicsGeometry): void\n{\n    let i = 0;\n\n    const shape = graphicsData.shape as Polygon;\n    const points = graphicsData.points || shape.points;\n    const closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;\n\n    if (points.length === 0) return;\n\n    const verts = graphicsGeometry.points;\n    const indices = graphicsGeometry.indices;\n    const length = points.length / 2;\n\n    const startIndex = verts.length / 2;\n    let currentIndex = startIndex;\n\n    verts.push(points[0], points[1]);\n\n    for (i = 1; i < length; i++)\n    {\n        verts.push(points[i * 2], points[(i * 2) + 1]);\n        indices.push(currentIndex, currentIndex + 1);\n\n        currentIndex++;\n    }\n\n    if (closedShape)\n    {\n        indices.push(currentIndex, startIndex);\n    }\n}\n\n/**\n * Builds a line to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nexport function buildLine(graphicsData: GraphicsData, graphicsGeometry: GraphicsGeometry): void\n{\n    if (graphicsData.lineStyle.native)\n    {\n        buildNativeLine(graphicsData, graphicsGeometry);\n    }\n    else\n    {\n        buildNonNativeLine(graphicsData, graphicsGeometry);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}