{"ast":null,"code":"import { LoaderParserPriority, checkExtension, createTexture } from '@pixi/assets';\nimport { ExtensionType, settings, BaseTexture, MIPMAP_MODES, ALPHA_MODES, utils, extensions } from '@pixi/core';\nimport '../parsers/index.mjs';\nimport { parseDDS } from '../parsers/parseDDS.mjs';\nconst loadDDS = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.High\n  },\n  name: \"loadDDS\",\n  test(url) {\n    return checkExtension(url, \".dds\");\n  },\n  async load(url, asset, loader) {\n    const response = await settings.ADAPTER.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    const resources = parseDDS(arrayBuffer);\n    const textures = resources.map(resource => {\n      const base = new BaseTexture(resource, {\n        mipmap: MIPMAP_MODES.OFF,\n        alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n        resolution: utils.getResolutionOfUrl(url),\n        ...asset.data\n      });\n      return createTexture(base, loader, url);\n    });\n    return textures.length === 1 ? textures[0] : textures;\n  },\n  unload(texture) {\n    if (Array.isArray(texture)) {\n      texture.forEach(t => t.destroy(true));\n    } else {\n      texture.destroy(true);\n    }\n  }\n};\nextensions.add(loadDDS);\nexport { loadDDS };","map":{"version":3,"names":["loadDDS","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","High","name","test","url","checkExtension","load","asset","loader","response","settings","ADAPTER","fetch","arrayBuffer","resources","parseDDS","textures","map","resource","base","BaseTexture","mipmap","MIPMAP_MODES","OFF","alphaMode","ALPHA_MODES","NO_PREMULTIPLIED_ALPHA","resolution","utils","getResolutionOfUrl","data","createTexture","length","unload","texture","Array","isArray","forEach","t","destroy","extensions","add"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\compressed-textures\\src\\loaders\\loadDDS.ts"],"sourcesContent":["import { checkExtension, createTexture, LoaderParserPriority } from '@pixi/assets';\nimport { ALPHA_MODES, BaseTexture, extensions, ExtensionType, MIPMAP_MODES, settings, utils } from '@pixi/core';\nimport { parseDDS } from '../parsers';\n\nimport type { LoadAsset, Loader, LoaderParser } from '@pixi/assets';\nimport type { IBaseTextureOptions, Texture } from '@pixi/core';\n\n/** Load our DDS textures! */\nexport const loadDDS: LoaderParser = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    name: 'loadDDS',\n\n    test(url: string): boolean\n    {\n        return checkExtension(url, '.dds');\n    },\n\n    async load(url: string, asset: LoadAsset, loader: Loader): Promise<Texture | Texture[]>\n    {\n        // get an array buffer...\n        const response = await settings.ADAPTER.fetch(url);\n\n        const arrayBuffer = await response.arrayBuffer();\n\n        const resources = parseDDS(arrayBuffer);\n\n        const textures = resources.map((resource) =>\n        {\n            const base = new BaseTexture(resource, {\n                mipmap: MIPMAP_MODES.OFF,\n                alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n                resolution: utils.getResolutionOfUrl(url),\n                ...asset.data,\n            });\n\n            return createTexture(base, loader, url);\n        });\n\n        return textures.length === 1 ? textures[0] : textures;\n    },\n\n    unload(texture: Texture | Texture[]): void\n    {\n        if (Array.isArray(texture))\n        {\n            texture.forEach((t) => t.destroy(true));\n        }\n        else\n        {\n            texture.destroy(true);\n        }\n    }\n\n} as LoaderParser<Texture | Texture[], IBaseTextureOptions>;\n\nextensions.add(loadDDS);\n"],"mappings":";;;;AAQO,MAAMA,OAAwB;EACjCC,SAAW;IACPC,IAAA,EAAMC,aAAc,CAAAC,UAAA;IACpBC,QAAA,EAAUC,oBAAqB,CAAAC;EAAA,CACnC;EAEAC,IAAM;EAENC,KAAKC,GACL;IACW,OAAAC,cAAA,CAAeD,GAAA,EAAK,MAAM;EAAA,CACrC;EAEA,MAAME,KAAKF,GAAa,EAAAG,KAAA,EAAkBC,MAC1C;IAEI,MAAMC,QAAW,SAAMC,QAAS,CAAAC,OAAA,CAAQC,KAAA,CAAMR,GAAG;IAE3C,MAAAS,WAAA,GAAc,MAAMJ,QAAA,CAASI,WAAY;IAEzC,MAAAC,SAAA,GAAYC,QAAA,CAASF,WAAW;IAEtC,MAAMG,QAAW,GAAAF,SAAA,CAAUG,GAAI,CAACC,QAChC;MACU,MAAAC,IAAA,GAAO,IAAIC,WAAA,CAAYF,QAAU;QACnCG,MAAA,EAAQC,YAAa,CAAAC,GAAA;QACrBC,SAAA,EAAWC,WAAY,CAAAC,sBAAA;QACvBC,UAAA,EAAYC,KAAM,CAAAC,kBAAA,CAAmBzB,GAAG;QACxC,GAAGG,KAAM,CAAAuB;MAAA,CACZ;MAEM,OAAAC,aAAA,CAAcZ,IAAM,EAAAX,MAAA,EAAQJ,GAAG;IAAA,CACzC;IAED,OAAOY,QAAS,CAAAgB,MAAA,KAAW,CAAI,GAAAhB,QAAA,CAAS,CAAK,IAAAA,QAAA;EAAA,CACjD;EAEAiB,OAAOC,OACP;IACQ,IAAAC,KAAA,CAAMC,OAAQ,CAAAF,OAAO,CACzB;MACIA,OAAA,CAAQG,OAAA,CAASC,CAAA,IAAMA,CAAE,CAAAC,OAAA,CAAQ,IAAI,CAAC;IAAA,CAG1C;MACIL,OAAA,CAAQK,OAAA,CAAQ,IAAI;IAAA;EACxB;AAGR;AAEAC,UAAA,CAAWC,GAAA,CAAI/C,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}