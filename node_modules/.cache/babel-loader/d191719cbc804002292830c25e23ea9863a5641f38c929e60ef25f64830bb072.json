{"ast":null,"code":"import { CLEAR_MODES, DRAW_MODES, MSAA_QUALITY } from '@pixi/constants';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nimport { Point, Matrix, Rectangle } from '@pixi/math';\nimport { RenderTexturePool } from '../renderTexture/RenderTexturePool.mjs';\nimport { UniformGroup } from '../shader/UniformGroup.mjs';\nimport { Quad } from '../utils/Quad.mjs';\nimport { QuadUv } from '../utils/QuadUv.mjs';\nimport { FilterState } from './FilterState.mjs';\nconst tempPoints = [new Point(), new Point(), new Point(), new Point()];\nconst tempMatrix = new Matrix();\nclass FilterSystem {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.defaultFilterStack = [{}];\n    this.texturePool = new RenderTexturePool();\n    this.statePool = [];\n    this.quad = new Quad();\n    this.quadUv = new QuadUv();\n    this.tempRect = new Rectangle();\n    this.activeState = {};\n    this.globalUniforms = new UniformGroup({\n      outputFrame: new Rectangle(),\n      inputSize: new Float32Array(4),\n      inputPixel: new Float32Array(4),\n      inputClamp: new Float32Array(4),\n      resolution: 1,\n      filterArea: new Float32Array(4),\n      filterClamp: new Float32Array(4)\n    }, true);\n    this.forceClear = false;\n    this.useMaxPadding = false;\n  }\n  init() {\n    this.texturePool.setScreenSize(this.renderer.view);\n  }\n  push(target, filters) {\n    const renderer = this.renderer;\n    const filterStack = this.defaultFilterStack;\n    const state = this.statePool.pop() || new FilterState();\n    const renderTextureSystem = this.renderer.renderTexture;\n    let resolution = filters[0].resolution;\n    let multisample = filters[0].multisample;\n    let padding = filters[0].padding;\n    let autoFit = filters[0].autoFit;\n    let legacy = filters[0].legacy ?? true;\n    for (let i = 1; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution);\n      multisample = Math.min(multisample, filter.multisample);\n      padding = this.useMaxPadding ? Math.max(padding, filter.padding) : padding + filter.padding;\n      autoFit = autoFit && filter.autoFit;\n      legacy = legacy || (filter.legacy ?? true);\n    }\n    if (filterStack.length === 1) {\n      this.defaultFilterStack[0].renderTexture = renderTextureSystem.current;\n    }\n    filterStack.push(state);\n    state.resolution = resolution;\n    state.multisample = multisample;\n    state.legacy = legacy;\n    state.target = target;\n    state.sourceFrame.copyFrom(target.filterArea || target.getBounds(true));\n    state.sourceFrame.pad(padding);\n    const sourceFrameProjected = this.tempRect.copyFrom(renderTextureSystem.sourceFrame);\n    if (renderer.projection.transform) {\n      this.transformAABB(tempMatrix.copyFrom(renderer.projection.transform).invert(), sourceFrameProjected);\n    }\n    if (autoFit) {\n      state.sourceFrame.fit(sourceFrameProjected);\n      if (state.sourceFrame.width <= 0 || state.sourceFrame.height <= 0) {\n        state.sourceFrame.width = 0;\n        state.sourceFrame.height = 0;\n      }\n    } else if (!state.sourceFrame.intersects(sourceFrameProjected)) {\n      state.sourceFrame.width = 0;\n      state.sourceFrame.height = 0;\n    }\n    this.roundFrame(state.sourceFrame, renderTextureSystem.current ? renderTextureSystem.current.resolution : renderer.resolution, renderTextureSystem.sourceFrame, renderTextureSystem.destinationFrame, renderer.projection.transform);\n    state.renderTexture = this.getOptimalFilterTexture(state.sourceFrame.width, state.sourceFrame.height, resolution, multisample);\n    state.filters = filters;\n    state.destinationFrame.width = state.renderTexture.width;\n    state.destinationFrame.height = state.renderTexture.height;\n    const destinationFrame = this.tempRect;\n    destinationFrame.x = 0;\n    destinationFrame.y = 0;\n    destinationFrame.width = state.sourceFrame.width;\n    destinationFrame.height = state.sourceFrame.height;\n    state.renderTexture.filterFrame = state.sourceFrame;\n    state.bindingSourceFrame.copyFrom(renderTextureSystem.sourceFrame);\n    state.bindingDestinationFrame.copyFrom(renderTextureSystem.destinationFrame);\n    state.transform = renderer.projection.transform;\n    renderer.projection.transform = null;\n    renderTextureSystem.bind(state.renderTexture, state.sourceFrame, destinationFrame);\n    renderer.framebuffer.clear(0, 0, 0, 0);\n  }\n  pop() {\n    const filterStack = this.defaultFilterStack;\n    const state = filterStack.pop();\n    const filters = state.filters;\n    this.activeState = state;\n    const globalUniforms = this.globalUniforms.uniforms;\n    globalUniforms.outputFrame = state.sourceFrame;\n    globalUniforms.resolution = state.resolution;\n    const inputSize = globalUniforms.inputSize;\n    const inputPixel = globalUniforms.inputPixel;\n    const inputClamp = globalUniforms.inputClamp;\n    inputSize[0] = state.destinationFrame.width;\n    inputSize[1] = state.destinationFrame.height;\n    inputSize[2] = 1 / inputSize[0];\n    inputSize[3] = 1 / inputSize[1];\n    inputPixel[0] = Math.round(inputSize[0] * state.resolution);\n    inputPixel[1] = Math.round(inputSize[1] * state.resolution);\n    inputPixel[2] = 1 / inputPixel[0];\n    inputPixel[3] = 1 / inputPixel[1];\n    inputClamp[0] = 0.5 * inputPixel[2];\n    inputClamp[1] = 0.5 * inputPixel[3];\n    inputClamp[2] = state.sourceFrame.width * inputSize[2] - 0.5 * inputPixel[2];\n    inputClamp[3] = state.sourceFrame.height * inputSize[3] - 0.5 * inputPixel[3];\n    if (state.legacy) {\n      const filterArea = globalUniforms.filterArea;\n      filterArea[0] = state.destinationFrame.width;\n      filterArea[1] = state.destinationFrame.height;\n      filterArea[2] = state.sourceFrame.x;\n      filterArea[3] = state.sourceFrame.y;\n      globalUniforms.filterClamp = globalUniforms.inputClamp;\n    }\n    this.globalUniforms.update();\n    const lastState = filterStack[filterStack.length - 1];\n    this.renderer.framebuffer.blit();\n    if (filters.length === 1) {\n      filters[0].apply(this, state.renderTexture, lastState.renderTexture, CLEAR_MODES.BLEND, state);\n      this.returnFilterTexture(state.renderTexture);\n    } else {\n      let flip = state.renderTexture;\n      let flop = this.getOptimalFilterTexture(flip.width, flip.height, state.resolution);\n      flop.filterFrame = flip.filterFrame;\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        if (i === 1 && state.multisample > 1) {\n          flop = this.getOptimalFilterTexture(flip.width, flip.height, state.resolution);\n          flop.filterFrame = flip.filterFrame;\n        }\n        filters[i].apply(this, flip, flop, CLEAR_MODES.CLEAR, state);\n        const t = flip;\n        flip = flop;\n        flop = t;\n      }\n      filters[i].apply(this, flip, lastState.renderTexture, CLEAR_MODES.BLEND, state);\n      if (i > 1 && state.multisample > 1) {\n        this.returnFilterTexture(state.renderTexture);\n      }\n      this.returnFilterTexture(flip);\n      this.returnFilterTexture(flop);\n    }\n    state.clear();\n    this.statePool.push(state);\n  }\n  bindAndClear(filterTexture) {\n    let clearMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CLEAR_MODES.CLEAR;\n    const {\n      renderTexture: renderTextureSystem,\n      state: stateSystem\n    } = this.renderer;\n    if (filterTexture === this.defaultFilterStack[this.defaultFilterStack.length - 1].renderTexture) {\n      this.renderer.projection.transform = this.activeState.transform;\n    } else {\n      this.renderer.projection.transform = null;\n    }\n    if (filterTexture?.filterFrame) {\n      const destinationFrame = this.tempRect;\n      destinationFrame.x = 0;\n      destinationFrame.y = 0;\n      destinationFrame.width = filterTexture.filterFrame.width;\n      destinationFrame.height = filterTexture.filterFrame.height;\n      renderTextureSystem.bind(filterTexture, filterTexture.filterFrame, destinationFrame);\n    } else if (filterTexture !== this.defaultFilterStack[this.defaultFilterStack.length - 1].renderTexture) {\n      renderTextureSystem.bind(filterTexture);\n    } else {\n      this.renderer.renderTexture.bind(filterTexture, this.activeState.bindingSourceFrame, this.activeState.bindingDestinationFrame);\n    }\n    const autoClear = stateSystem.stateId & 1 || this.forceClear;\n    if (clearMode === CLEAR_MODES.CLEAR || clearMode === CLEAR_MODES.BLIT && autoClear) {\n      this.renderer.framebuffer.clear(0, 0, 0, 0);\n    }\n  }\n  applyFilter(filter, input, output, clearMode) {\n    const renderer = this.renderer;\n    renderer.state.set(filter.state);\n    this.bindAndClear(output, clearMode);\n    filter.uniforms.uSampler = input;\n    filter.uniforms.filterGlobals = this.globalUniforms;\n    renderer.shader.bind(filter);\n    filter.legacy = !!filter.program.attributeData.aTextureCoord;\n    if (filter.legacy) {\n      this.quadUv.map(input._frame, input.filterFrame);\n      renderer.geometry.bind(this.quadUv);\n      renderer.geometry.draw(DRAW_MODES.TRIANGLES);\n    } else {\n      renderer.geometry.bind(this.quad);\n      renderer.geometry.draw(DRAW_MODES.TRIANGLE_STRIP);\n    }\n  }\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const {\n      sourceFrame,\n      destinationFrame\n    } = this.activeState;\n    const {\n      orig\n    } = sprite._texture;\n    const mappedMatrix = outputMatrix.set(destinationFrame.width, 0, 0, destinationFrame.height, sourceFrame.x, sourceFrame.y);\n    const worldTransform = sprite.worldTransform.copyTo(Matrix.TEMP_MATRIX);\n    worldTransform.invert();\n    mappedMatrix.prepend(worldTransform);\n    mappedMatrix.scale(1 / orig.width, 1 / orig.height);\n    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n    return mappedMatrix;\n  }\n  destroy() {\n    this.renderer = null;\n    this.texturePool.clear(false);\n  }\n  getOptimalFilterTexture(minWidth, minHeight) {\n    let resolution = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let multisample = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : MSAA_QUALITY.NONE;\n    return this.texturePool.getOptimalTexture(minWidth, minHeight, resolution, multisample);\n  }\n  getFilterTexture(input, resolution, multisample) {\n    if (typeof input === \"number\") {\n      const swap = input;\n      input = resolution;\n      resolution = swap;\n    }\n    input = input || this.activeState.renderTexture;\n    const filterTexture = this.texturePool.getOptimalTexture(input.width, input.height, resolution || input.resolution, multisample || MSAA_QUALITY.NONE);\n    filterTexture.filterFrame = input.filterFrame;\n    return filterTexture;\n  }\n  returnFilterTexture(renderTexture) {\n    this.texturePool.returnTexture(renderTexture);\n  }\n  emptyPool() {\n    this.texturePool.clear(true);\n  }\n  resize() {\n    this.texturePool.setScreenSize(this.renderer.view);\n  }\n  transformAABB(matrix, rect) {\n    const lt = tempPoints[0];\n    const lb = tempPoints[1];\n    const rt = tempPoints[2];\n    const rb = tempPoints[3];\n    lt.set(rect.left, rect.top);\n    lb.set(rect.left, rect.bottom);\n    rt.set(rect.right, rect.top);\n    rb.set(rect.right, rect.bottom);\n    matrix.apply(lt, lt);\n    matrix.apply(lb, lb);\n    matrix.apply(rt, rt);\n    matrix.apply(rb, rb);\n    const x0 = Math.min(lt.x, lb.x, rt.x, rb.x);\n    const y0 = Math.min(lt.y, lb.y, rt.y, rb.y);\n    const x1 = Math.max(lt.x, lb.x, rt.x, rb.x);\n    const y1 = Math.max(lt.y, lb.y, rt.y, rb.y);\n    rect.x = x0;\n    rect.y = y0;\n    rect.width = x1 - x0;\n    rect.height = y1 - y0;\n  }\n  roundFrame(frame, resolution, bindingSourceFrame, bindingDestinationFrame, transform) {\n    if (frame.width <= 0 || frame.height <= 0 || bindingSourceFrame.width <= 0 || bindingSourceFrame.height <= 0) {\n      return;\n    }\n    if (transform) {\n      const {\n        a,\n        b,\n        c,\n        d\n      } = transform;\n      if ((Math.abs(b) > 1e-4 || Math.abs(c) > 1e-4) && (Math.abs(a) > 1e-4 || Math.abs(d) > 1e-4)) {\n        return;\n      }\n    }\n    transform = transform ? tempMatrix.copyFrom(transform) : tempMatrix.identity();\n    transform.translate(-bindingSourceFrame.x, -bindingSourceFrame.y).scale(bindingDestinationFrame.width / bindingSourceFrame.width, bindingDestinationFrame.height / bindingSourceFrame.height).translate(bindingDestinationFrame.x, bindingDestinationFrame.y);\n    this.transformAABB(transform, frame);\n    frame.ceil(resolution);\n    this.transformAABB(transform.invert(), frame);\n  }\n}\nFilterSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"filter\"\n};\nextensions.add(FilterSystem);\nexport { FilterSystem };","map":{"version":3,"names":["tempPoints","Point","tempMatrix","Matrix","FilterSystem","constructor","renderer","defaultFilterStack","texturePool","RenderTexturePool","statePool","quad","Quad","quadUv","QuadUv","tempRect","Rectangle","activeState","globalUniforms","UniformGroup","outputFrame","inputSize","Float32Array","inputPixel","inputClamp","resolution","filterArea","filterClamp","forceClear","useMaxPadding","init","setScreenSize","view","push","target","filters","filterStack","state","pop","FilterState","renderTextureSystem","renderTexture","multisample","padding","autoFit","legacy","i","length","filter","Math","min","max","current","sourceFrame","copyFrom","getBounds","pad","sourceFrameProjected","projection","transform","transformAABB","invert","fit","width","height","intersects","roundFrame","destinationFrame","getOptimalFilterTexture","x","y","filterFrame","bindingSourceFrame","bindingDestinationFrame","bind","framebuffer","clear","uniforms","round","update","lastState","blit","apply","CLEAR_MODES","BLEND","returnFilterTexture","flip","flop","CLEAR","t","bindAndClear","filterTexture","clearMode","arguments","undefined","stateSystem","autoClear","stateId","BLIT","applyFilter","input","output","set","uSampler","filterGlobals","shader","program","attributeData","aTextureCoord","map","_frame","geometry","draw","DRAW_MODES","TRIANGLES","TRIANGLE_STRIP","calculateSpriteMatrix","outputMatrix","sprite","orig","_texture","mappedMatrix","worldTransform","copyTo","TEMP_MATRIX","prepend","scale","translate","anchor","destroy","minWidth","minHeight","MSAA_QUALITY","NONE","getOptimalTexture","getFilterTexture","swap","returnTexture","emptyPool","resize","matrix","rect","lt","lb","rt","rb","left","top","bottom","right","x0","y0","x1","y1","frame","a","b","c","d","abs","identity","ceil","extension","type","ExtensionType","RendererSystem","name","extensions","add"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\filters\\FilterSystem.ts"],"sourcesContent":["import { CLEAR_MODES, DRAW_MODES, MSAA_QUALITY } from '@pixi/constants';\nimport { extensions, ExtensionType } from '@pixi/extensions';\nimport { Matrix, Point, Rectangle } from '@pixi/math';\nimport { RenderTexturePool } from '../renderTexture/RenderTexturePool';\nimport { UniformGroup } from '../shader/UniformGroup';\nimport { Quad } from '../utils/Quad';\nimport { QuadUv } from '../utils/QuadUv';\nimport { FilterState } from './FilterState';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { Renderer } from '../Renderer';\nimport type { RenderTexture } from '../renderTexture/RenderTexture';\nimport type { ISystem } from '../system/ISystem';\nimport type { Filter } from './Filter';\nimport type { IFilterTarget } from './IFilterTarget';\nimport type { ISpriteMaskTarget } from './spriteMask/SpriteMaskFilter';\n\nconst tempPoints = [new Point(), new Point(), new Point(), new Point()];\nconst tempMatrix = new Matrix();\n\n/**\n * System plugin to the renderer to manage filters.\n *\n * ## Pipeline\n *\n * The FilterSystem executes the filtering pipeline by rendering the display-object into a texture, applying its\n * [filters]{@link PIXI.Filter} in series, and the last filter outputs into the final render-target.\n *\n * The filter-frame is the rectangle in world space being filtered, and those contents are mapped into\n * `(0, 0, filterFrame.width, filterFrame.height)` into the filter render-texture. The filter-frame is also called\n * the source-frame, as it is used to bind the filter render-textures. The last filter outputs to the `filterFrame`\n * in the final render-target.\n *\n * ## Usage\n *\n * {@link PIXI.Container#renderAdvanced} is an example of how to use the filter system. It is a 3 step process:\n *\n * **push**: Use {@link PIXI.FilterSystem#push} to push the set of filters to be applied on a filter-target.\n * **render**: Render the contents to be filtered using the renderer. The filter-system will only capture the contents\n *      inside the bounds of the filter-target. NOTE: Using {@link PIXI.Renderer#render} is\n *      illegal during an existing render cycle, and it may reset the filter system.\n * **pop**: Use {@link PIXI.FilterSystem#pop} to pop & execute the filters you initially pushed. It will apply them\n *      serially and output to the bounds of the filter-target.\n * @memberof PIXI\n */\nexport class FilterSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'filter',\n    };\n\n    /**\n     * List of filters for the FilterSystem\n     * @member {object[]}\n     */\n    public readonly defaultFilterStack: Array<FilterState>;\n\n    /** A pool for storing filter states, save us creating new ones each tick. */\n    public statePool: Array<FilterState>;\n\n    /** Stores a bunch of POT textures used for filtering. */\n    public texturePool: RenderTexturePool;\n\n    /** Whether to clear output renderTexture in AUTO/BLIT mode. See {@link PIXI.CLEAR_MODES}. */\n    public forceClear: boolean;\n\n    /**\n     * Old padding behavior is to use the max amount instead of sum padding.\n     * Use this flag if you need the old behavior.\n     * @default false\n     */\n    public useMaxPadding: boolean;\n\n    /** A very simple geometry used when drawing a filter effect to the screen. */\n    protected quad: Quad;\n\n    /** Quad UVs */\n    protected quadUv: QuadUv;\n\n    /**\n     * Active state\n     * @member {object}\n     */\n    protected activeState: FilterState;\n\n    /**\n     * This uniform group is attached to filter uniforms when used.\n     * @property {PIXI.Rectangle} outputFrame -\n     * @property {Float32Array} inputSize -\n     * @property {Float32Array} inputPixel -\n     * @property {Float32Array} inputClamp -\n     * @property {number} resolution -\n     * @property {Float32Array} filterArea -\n     * @property {Float32Array} filterClamp -\n     */\n    protected globalUniforms: UniformGroup;\n\n    /** Temporary rect for math. */\n    private tempRect: Rectangle;\n    public renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.defaultFilterStack = [{}] as any;\n\n        this.texturePool = new RenderTexturePool();\n\n        this.statePool = [];\n\n        this.quad = new Quad();\n        this.quadUv = new QuadUv();\n        this.tempRect = new Rectangle();\n        this.activeState = {} as any;\n\n        this.globalUniforms = new UniformGroup({\n            outputFrame: new Rectangle(),\n            inputSize: new Float32Array(4),\n            inputPixel: new Float32Array(4),\n            inputClamp: new Float32Array(4),\n            resolution: 1,\n\n            // legacy variables\n            filterArea: new Float32Array(4),\n            filterClamp: new Float32Array(4),\n        }, true);\n\n        this.forceClear = false;\n        this.useMaxPadding = false;\n    }\n\n    init(): void\n    {\n        this.texturePool.setScreenSize(this.renderer.view);\n    }\n\n    /**\n     * Pushes a set of filters to be applied later to the system. This will redirect further rendering into an\n     * input render-texture for the rest of the filtering pipeline.\n     * @param {PIXI.DisplayObject} target - The target of the filter to render.\n     * @param filters - The filters to apply.\n     */\n    push(target: IFilterTarget, filters: Array<Filter>): void\n    {\n        const renderer = this.renderer;\n        const filterStack = this.defaultFilterStack;\n        const state = this.statePool.pop() || new FilterState();\n        const renderTextureSystem = this.renderer.renderTexture;\n\n        let resolution = filters[0].resolution;\n        let multisample = filters[0].multisample;\n        let padding = filters[0].padding;\n        let autoFit = filters[0].autoFit;\n        // We don't know whether it's a legacy filter until it was bound for the first time,\n        // therefore we have to assume that it is if legacy is undefined.\n        let legacy = filters[0].legacy ?? true;\n\n        for (let i = 1; i < filters.length; i++)\n        {\n            const filter = filters[i];\n\n            // let's use the lowest resolution\n            resolution = Math.min(resolution, filter.resolution);\n            // let's use the lowest number of samples\n            multisample = Math.min(multisample, filter.multisample);\n            // figure out the padding required for filters\n            padding = this.useMaxPadding\n                // old behavior: use largest amount of padding!\n                ? Math.max(padding, filter.padding)\n                // new behavior: sum the padding\n                : padding + filter.padding;\n            // only auto fit if all filters are autofit\n            autoFit = autoFit && filter.autoFit;\n\n            legacy = legacy || (filter.legacy ?? true);\n        }\n\n        if (filterStack.length === 1)\n        {\n            this.defaultFilterStack[0].renderTexture = renderTextureSystem.current;\n        }\n\n        filterStack.push(state);\n\n        state.resolution = resolution;\n        state.multisample = multisample;\n\n        state.legacy = legacy;\n\n        state.target = target;\n        state.sourceFrame.copyFrom(target.filterArea || target.getBounds(true));\n\n        state.sourceFrame.pad(padding);\n\n        const sourceFrameProjected = this.tempRect.copyFrom(renderTextureSystem.sourceFrame);\n\n        // Project source frame into world space (if projection is applied)\n        if (renderer.projection.transform)\n        {\n            this.transformAABB(\n                tempMatrix.copyFrom(renderer.projection.transform).invert(),\n                sourceFrameProjected\n            );\n        }\n\n        if (autoFit)\n        {\n            state.sourceFrame.fit(sourceFrameProjected);\n\n            if (state.sourceFrame.width <= 0 || state.sourceFrame.height <= 0)\n            {\n                state.sourceFrame.width = 0;\n                state.sourceFrame.height = 0;\n            }\n        }\n        else if (!state.sourceFrame.intersects(sourceFrameProjected))\n        {\n            state.sourceFrame.width = 0;\n            state.sourceFrame.height = 0;\n        }\n\n        // Round sourceFrame in screen space based on render-texture.\n        this.roundFrame(\n            state.sourceFrame,\n            renderTextureSystem.current ? renderTextureSystem.current.resolution : renderer.resolution,\n            renderTextureSystem.sourceFrame,\n            renderTextureSystem.destinationFrame,\n            renderer.projection.transform,\n        );\n\n        state.renderTexture = this.getOptimalFilterTexture(state.sourceFrame.width, state.sourceFrame.height,\n            resolution, multisample);\n        state.filters = filters;\n\n        state.destinationFrame.width = state.renderTexture.width;\n        state.destinationFrame.height = state.renderTexture.height;\n\n        const destinationFrame = this.tempRect;\n\n        destinationFrame.x = 0;\n        destinationFrame.y = 0;\n        destinationFrame.width = state.sourceFrame.width;\n        destinationFrame.height = state.sourceFrame.height;\n\n        state.renderTexture.filterFrame = state.sourceFrame;\n        state.bindingSourceFrame.copyFrom(renderTextureSystem.sourceFrame);\n        state.bindingDestinationFrame.copyFrom(renderTextureSystem.destinationFrame);\n\n        state.transform = renderer.projection.transform;\n        renderer.projection.transform = null;\n        renderTextureSystem.bind(state.renderTexture, state.sourceFrame, destinationFrame);\n        renderer.framebuffer.clear(0, 0, 0, 0);\n    }\n\n    /** Pops off the filter and applies it. */\n    pop(): void\n    {\n        const filterStack = this.defaultFilterStack;\n        const state = filterStack.pop();\n        const filters = state.filters;\n\n        this.activeState = state;\n\n        const globalUniforms = this.globalUniforms.uniforms;\n\n        globalUniforms.outputFrame = state.sourceFrame;\n        globalUniforms.resolution = state.resolution;\n\n        const inputSize = globalUniforms.inputSize;\n        const inputPixel = globalUniforms.inputPixel;\n        const inputClamp = globalUniforms.inputClamp;\n\n        inputSize[0] = state.destinationFrame.width;\n        inputSize[1] = state.destinationFrame.height;\n        inputSize[2] = 1.0 / inputSize[0];\n        inputSize[3] = 1.0 / inputSize[1];\n\n        inputPixel[0] = Math.round(inputSize[0] * state.resolution);\n        inputPixel[1] = Math.round(inputSize[1] * state.resolution);\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (state.sourceFrame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (state.sourceFrame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        // only update the rect if its legacy..\n        if (state.legacy)\n        {\n            const filterArea = globalUniforms.filterArea;\n\n            filterArea[0] = state.destinationFrame.width;\n            filterArea[1] = state.destinationFrame.height;\n            filterArea[2] = state.sourceFrame.x;\n            filterArea[3] = state.sourceFrame.y;\n\n            globalUniforms.filterClamp = globalUniforms.inputClamp;\n        }\n\n        this.globalUniforms.update();\n\n        const lastState = filterStack[filterStack.length - 1];\n\n        this.renderer.framebuffer.blit();\n\n        if (filters.length === 1)\n        {\n            filters[0].apply(this, state.renderTexture, lastState.renderTexture, CLEAR_MODES.BLEND, state);\n\n            this.returnFilterTexture(state.renderTexture);\n        }\n        else\n        {\n            let flip = state.renderTexture;\n            let flop = this.getOptimalFilterTexture(\n                flip.width,\n                flip.height,\n                state.resolution\n            );\n\n            flop.filterFrame = flip.filterFrame;\n\n            let i = 0;\n\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                if (i === 1 && state.multisample > 1)\n                {\n                    flop = this.getOptimalFilterTexture(\n                        flip.width,\n                        flip.height,\n                        state.resolution\n                    );\n\n                    flop.filterFrame = flip.filterFrame;\n                }\n\n                filters[i].apply(this, flip, flop, CLEAR_MODES.CLEAR, state);\n\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, lastState.renderTexture, CLEAR_MODES.BLEND, state);\n\n            if (i > 1 && state.multisample > 1)\n            {\n                this.returnFilterTexture(state.renderTexture);\n            }\n\n            this.returnFilterTexture(flip);\n            this.returnFilterTexture(flop);\n        }\n\n        // lastState.renderTexture is blitted when lastState is popped\n\n        state.clear();\n        this.statePool.push(state);\n    }\n\n    /**\n     * Binds a renderTexture with corresponding `filterFrame`, clears it if mode corresponds.\n     * @param filterTexture - renderTexture to bind, should belong to filter pool or filter stack\n     * @param clearMode - clearMode, by default its CLEAR/YES. See {@link PIXI.CLEAR_MODES}\n     */\n    bindAndClear(filterTexture: RenderTexture, clearMode: CLEAR_MODES = CLEAR_MODES.CLEAR): void\n    {\n        const {\n            renderTexture: renderTextureSystem,\n            state: stateSystem,\n        } = this.renderer;\n\n        if (filterTexture === this.defaultFilterStack[this.defaultFilterStack.length - 1].renderTexture)\n        {\n            // Restore projection transform if rendering into the output render-target.\n            this.renderer.projection.transform = this.activeState.transform;\n        }\n        else\n        {\n            // Prevent projection within filtering pipeline.\n            this.renderer.projection.transform = null;\n        }\n\n        if (filterTexture?.filterFrame)\n        {\n            const destinationFrame = this.tempRect;\n\n            destinationFrame.x = 0;\n            destinationFrame.y = 0;\n            destinationFrame.width = filterTexture.filterFrame.width;\n            destinationFrame.height = filterTexture.filterFrame.height;\n\n            renderTextureSystem.bind(filterTexture, filterTexture.filterFrame, destinationFrame);\n        }\n        else if (filterTexture !== this.defaultFilterStack[this.defaultFilterStack.length - 1].renderTexture)\n        {\n            renderTextureSystem.bind(filterTexture);\n        }\n        else\n        {\n            // Restore binding for output render-target.\n            this.renderer.renderTexture.bind(\n                filterTexture,\n                this.activeState.bindingSourceFrame,\n                this.activeState.bindingDestinationFrame\n            );\n        }\n\n        // Clear the texture in BLIT mode if blending is disabled or the forceClear flag is set. The blending\n        // is stored in the 0th bit of the state.\n        const autoClear = (stateSystem.stateId & 1) || this.forceClear;\n\n        if (clearMode === CLEAR_MODES.CLEAR\n            || (clearMode === CLEAR_MODES.BLIT && autoClear))\n        {\n            // Use framebuffer.clear because we want to clear the whole filter texture, not just the filtering\n            // area over which the shaders are run. This is because filters may sampling outside of it (e.g. blur)\n            // instead of clamping their arithmetic.\n            this.renderer.framebuffer.clear(0, 0, 0, 0);\n        }\n    }\n\n    /**\n     * Draws a filter using the default rendering process.\n     *\n     * This should be called only by {@link PIXI.Filter#apply}.\n     * @param filter - The filter to draw.\n     * @param input - The input render target.\n     * @param output - The target to output to.\n     * @param clearMode - Should the output be cleared before rendering to it\n     */\n    applyFilter(filter: Filter, input: RenderTexture, output: RenderTexture, clearMode?: CLEAR_MODES): void\n    {\n        const renderer = this.renderer;\n\n        // Set state before binding, so bindAndClear gets the blend mode.\n        renderer.state.set(filter.state);\n        this.bindAndClear(output, clearMode);\n\n        // set the uniforms..\n        filter.uniforms.uSampler = input;\n        filter.uniforms.filterGlobals = this.globalUniforms;\n\n        // TODO make it so that the order of this does not matter..\n        // because it does at the moment cos of global uniforms.\n        // they need to get resynced\n        renderer.shader.bind(filter);\n\n        // check to see if the filter is a legacy one..\n        filter.legacy = !!filter.program.attributeData.aTextureCoord;\n\n        if (filter.legacy)\n        {\n            this.quadUv.map(input._frame, input.filterFrame);\n\n            renderer.geometry.bind(this.quadUv);\n            renderer.geometry.draw(DRAW_MODES.TRIANGLES);\n        }\n        else\n        {\n            renderer.geometry.bind(this.quad);\n            renderer.geometry.draw(DRAW_MODES.TRIANGLE_STRIP);\n        }\n    }\n\n    /**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     * @param outputMatrix - The matrix to output to.\n     * @param {PIXI.Sprite} sprite - The sprite to map to.\n     * @returns The mapped matrix.\n     */\n    calculateSpriteMatrix(outputMatrix: Matrix, sprite: ISpriteMaskTarget): Matrix\n    {\n        const { sourceFrame, destinationFrame } = this.activeState;\n        const { orig } = sprite._texture;\n        const mappedMatrix = outputMatrix.set(destinationFrame.width, 0, 0,\n            destinationFrame.height, sourceFrame.x, sourceFrame.y);\n        const worldTransform = sprite.worldTransform.copyTo(Matrix.TEMP_MATRIX);\n\n        worldTransform.invert();\n        mappedMatrix.prepend(worldTransform);\n        mappedMatrix.scale(1.0 / orig.width, 1.0 / orig.height);\n        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n\n    /** Destroys this Filter System. */\n    destroy(): void\n    {\n        this.renderer = null;\n\n        // Those textures has to be destroyed by RenderTextureSystem or FramebufferSystem\n        this.texturePool.clear(false);\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param minWidth - The minimum width of the render texture in real pixels.\n     * @param minHeight - The minimum height of the render texture in real pixels.\n     * @param resolution - The resolution of the render texture.\n     * @param multisample - Number of samples of the render texture.\n     * @returns - The new render texture.\n     */\n    protected getOptimalFilterTexture(minWidth: number, minHeight: number, resolution = 1,\n        multisample: MSAA_QUALITY = MSAA_QUALITY.NONE): RenderTexture\n    {\n        return this.texturePool.getOptimalTexture(minWidth, minHeight, resolution, multisample);\n    }\n\n    /**\n     * Gets extra render texture to use inside current filter\n     * To be compliant with older filters, you can use params in any order\n     * @param input - renderTexture from which size and resolution will be copied\n     * @param resolution - override resolution of the renderTexture\n     * @param multisample - number of samples of the renderTexture\n     */\n    getFilterTexture(input?: RenderTexture, resolution?: number, multisample?: MSAA_QUALITY): RenderTexture\n    {\n        if (typeof input === 'number')\n        {\n            const swap = input;\n\n            input = resolution as any;\n            resolution = swap;\n        }\n\n        input = input || this.activeState.renderTexture;\n\n        const filterTexture = this.texturePool.getOptimalTexture(input.width, input.height, resolution || input.resolution,\n            multisample || MSAA_QUALITY.NONE);\n\n        filterTexture.filterFrame = input.filterFrame;\n\n        return filterTexture;\n    }\n\n    /**\n     * Frees a render texture back into the pool.\n     * @param renderTexture - The renderTarget to free\n     */\n    returnFilterTexture(renderTexture: RenderTexture): void\n    {\n        this.texturePool.returnTexture(renderTexture);\n    }\n\n    /** Empties the texture pool. */\n    emptyPool(): void\n    {\n        this.texturePool.clear(true);\n    }\n\n    /** Calls `texturePool.resize()`, affects fullScreen renderTextures. */\n    resize(): void\n    {\n        this.texturePool.setScreenSize(this.renderer.view);\n    }\n\n    /**\n     * @param matrix - first param\n     * @param rect - second param\n     */\n    private transformAABB(matrix: Matrix, rect: Rectangle): void\n    {\n        const lt = tempPoints[0];\n        const lb = tempPoints[1];\n        const rt = tempPoints[2];\n        const rb = tempPoints[3];\n\n        lt.set(rect.left, rect.top);\n        lb.set(rect.left, rect.bottom);\n        rt.set(rect.right, rect.top);\n        rb.set(rect.right, rect.bottom);\n\n        matrix.apply(lt, lt);\n        matrix.apply(lb, lb);\n        matrix.apply(rt, rt);\n        matrix.apply(rb, rb);\n\n        const x0 = Math.min(lt.x, lb.x, rt.x, rb.x);\n        const y0 = Math.min(lt.y, lb.y, rt.y, rb.y);\n        const x1 = Math.max(lt.x, lb.x, rt.x, rb.x);\n        const y1 = Math.max(lt.y, lb.y, rt.y, rb.y);\n\n        rect.x = x0;\n        rect.y = y0;\n        rect.width = x1 - x0;\n        rect.height = y1 - y0;\n    }\n\n    private roundFrame(\n        frame: Rectangle,\n        resolution: number,\n        bindingSourceFrame: Rectangle,\n        bindingDestinationFrame: Rectangle,\n        transform?: Matrix\n    )\n    {\n        if (frame.width <= 0 || frame.height <= 0 || bindingSourceFrame.width <= 0 || bindingSourceFrame.height <= 0)\n        {\n            return;\n        }\n\n        if (transform)\n        {\n            const { a, b, c, d } = transform;\n\n            // Skip if skew/rotation present in matrix, except for multiple of 90° rotation. If rotation\n            // is a multiple of 90°, then either pair of (b,c) or (a,d) will be (0,0).\n            if ((Math.abs(b) > 1e-4 || Math.abs(c) > 1e-4)\n                && (Math.abs(a) > 1e-4 || Math.abs(d) > 1e-4))\n            {\n                return;\n            }\n        }\n\n        transform = transform ? tempMatrix.copyFrom(transform) : tempMatrix.identity();\n\n        // Get forward transform from world space to screen space\n        transform\n            .translate(-bindingSourceFrame.x, -bindingSourceFrame.y)\n            .scale(\n                bindingDestinationFrame.width / bindingSourceFrame.width,\n                bindingDestinationFrame.height / bindingSourceFrame.height)\n            .translate(bindingDestinationFrame.x, bindingDestinationFrame.y);\n\n        // Convert frame to screen space\n        this.transformAABB(transform, frame);\n\n        // Round frame in screen space\n        frame.ceil(resolution);\n\n        // Project back into world space.\n        this.transformAABB(transform.invert(), frame);\n    }\n}\n\nextensions.add(FilterSystem);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}