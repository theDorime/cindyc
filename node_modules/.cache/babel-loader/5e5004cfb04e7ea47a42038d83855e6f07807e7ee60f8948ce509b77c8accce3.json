{"ast":null,"code":"import { LoaderParserPriority, copySearchParams } from '@pixi/assets';\nimport { ExtensionType, utils, settings, extensions } from '@pixi/core';\nimport { BitmapFont } from './BitmapFont.mjs';\nimport './formats/index.mjs';\nimport { TextFormat } from './formats/TextFormat.mjs';\nimport { XMLStringFormat } from './formats/XMLStringFormat.mjs';\nconst validExtensions = [\".xml\", \".fnt\"];\nconst loadBitmapFont = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.Normal\n  },\n  name: \"loadBitmapFont\",\n  test(url) {\n    return validExtensions.includes(utils.path.extname(url).toLowerCase());\n  },\n  async testParse(data) {\n    return TextFormat.test(data) || XMLStringFormat.test(data);\n  },\n  async parse(asset, data, loader) {\n    const fontData = TextFormat.test(asset) ? TextFormat.parse(asset) : XMLStringFormat.parse(asset);\n    const {\n      src\n    } = data;\n    const {\n      page: pages\n    } = fontData;\n    const textureUrls = [];\n    for (let i = 0; i < pages.length; ++i) {\n      const pageFile = pages[i].file;\n      let imagePath = utils.path.join(utils.path.dirname(src), pageFile);\n      imagePath = copySearchParams(imagePath, src);\n      textureUrls.push(imagePath);\n    }\n    const loadedTextures = await loader.load(textureUrls);\n    const textures = textureUrls.map(url => loadedTextures[url]);\n    return BitmapFont.install(fontData, textures, true);\n  },\n  async load(url, _options) {\n    const response = await settings.ADAPTER.fetch(url);\n    return response.text();\n  },\n  unload(bitmapFont) {\n    bitmapFont.destroy();\n  }\n};\nextensions.add(loadBitmapFont);\nexport { loadBitmapFont };","map":{"version":3,"names":["validExtensions","loadBitmapFont","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","Normal","name","test","url","includes","utils","path","extname","toLowerCase","testParse","data","TextFormat","XMLStringFormat","parse","asset","loader","fontData","src","page","pages","textureUrls","i","length","pageFile","file","imagePath","join","dirname","copySearchParams","push","loadedTextures","load","textures","map","BitmapFont","install","_options","response","settings","ADAPTER","fetch","text","unload","bitmapFont","destroy","extensions","add"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\text-bitmap\\src\\loadBitmapFont.ts"],"sourcesContent":["import { copySearchParams, LoaderParserPriority } from '@pixi/assets';\nimport { extensions, ExtensionType, settings, utils } from '@pixi/core';\nimport { BitmapFont } from './BitmapFont';\nimport { TextFormat, XMLStringFormat } from './formats';\n\nimport type { LoadAsset, Loader, LoaderParser } from '@pixi/assets';\nimport type { Texture } from '@pixi/core';\nimport type { BitmapFontData } from './BitmapFontData';\n\nconst validExtensions = ['.xml', '.fnt'];\n\n/** simple loader plugin for loading in bitmap fonts! */\nexport const loadBitmapFont = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.Normal,\n    },\n\n    name: 'loadBitmapFont',\n\n    test(url: string): boolean\n    {\n        return validExtensions.includes(utils.path.extname(url).toLowerCase());\n    },\n\n    async testParse(data: string): Promise<boolean>\n    {\n        return TextFormat.test(data) || XMLStringFormat.test(data);\n    },\n\n    async parse(asset: string, data: LoadAsset, loader: Loader): Promise<BitmapFont>\n    {\n        const fontData: BitmapFontData = TextFormat.test(asset)\n            ? TextFormat.parse(asset)\n            : XMLStringFormat.parse(asset);\n\n        const { src } = data;\n        const { page: pages } = fontData;\n        const textureUrls = [];\n\n        for (let i = 0; i < pages.length; ++i)\n        {\n            const pageFile = pages[i].file;\n            let imagePath = utils.path.join(utils.path.dirname(src), pageFile);\n\n            imagePath = copySearchParams(imagePath, src);\n\n            textureUrls.push(imagePath);\n        }\n\n        const loadedTextures = await loader.load<Texture>(textureUrls);\n        const textures = textureUrls.map((url) => loadedTextures[url]);\n\n        return BitmapFont.install(fontData, textures, true);\n    },\n\n    async load(url: string, _options: LoadAsset): Promise<string>\n    {\n        const response = await settings.ADAPTER.fetch(url);\n\n        return response.text();\n    },\n\n    unload(bitmapFont: BitmapFont): void\n    {\n        bitmapFont.destroy();\n    }\n} as LoaderParser<BitmapFont | string>;\n\nextensions.add(loadBitmapFont);\n"],"mappings":";;;;;;AASA,MAAMA,eAAA,GAAkB,CAAC,QAAQ,MAAM;AAGhC,MAAMC,cAAiB;EAC1BC,SAAW;IACPC,IAAA,EAAMC,aAAc,CAAAC,UAAA;IACpBC,QAAA,EAAUC,oBAAqB,CAAAC;EAAA,CACnC;EAEAC,IAAM;EAENC,KAAKC,GACL;IACW,OAAAX,eAAA,CAAgBY,QAAA,CAASC,KAAM,CAAAC,IAAA,CAAKC,OAAA,CAAQJ,GAAG,EAAEK,WAAA,EAAa;EAAA,CACzE;EAEA,MAAMC,UAAUC,IAChB;IACI,OAAOC,UAAA,CAAWT,IAAK,CAAAQ,IAAI,CAAK,IAAAE,eAAA,CAAgBV,IAAA,CAAKQ,IAAI;EAAA,CAC7D;EAEA,MAAMG,MAAMC,KAAe,EAAAJ,IAAA,EAAiBK,MAC5C;IACU,MAAAC,QAAA,GAA2BL,UAAW,CAAAT,IAAA,CAAKY,KAAK,IAChDH,UAAW,CAAAE,KAAA,CAAMC,KAAK,IACtBF,eAAgB,CAAAC,KAAA,CAAMC,KAAK;IAEjC,MAAM;MAAEG;IAAQ,IAAAP,IAAA;IACV;MAAEQ,IAAA,EAAMC;IAAU,IAAAH,QAAA;IACxB,MAAMI,WAAA,GAAc,EAAC;IAErB,SAASC,CAAA,GAAI,CAAG,EAAAA,CAAA,GAAIF,KAAM,CAAAG,MAAA,EAAQ,EAAED,CACpC;MACU,MAAAE,QAAA,GAAWJ,KAAA,CAAME,CAAG,EAAAG,IAAA;MACtB,IAAAC,SAAA,GAAYpB,KAAA,CAAMC,IAAK,CAAAoB,IAAA,CAAKrB,KAAA,CAAMC,IAAK,CAAAqB,OAAA,CAAQV,GAAG,GAAGM,QAAQ;MAErDE,SAAA,GAAAG,gBAAA,CAAiBH,SAAA,EAAWR,GAAG;MAE3CG,WAAA,CAAYS,IAAA,CAAKJ,SAAS;IAAA;IAG9B,MAAMK,cAAiB,SAAMf,MAAO,CAAAgB,IAAA,CAAcX,WAAW;IAC7D,MAAMY,QAAA,GAAWZ,WAAY,CAAAa,GAAA,CAAK9B,GAAA,IAAQ2B,cAAA,CAAe3B,GAAI;IAE7D,OAAO+B,UAAW,CAAAC,OAAA,CAAQnB,QAAU,EAAAgB,QAAA,EAAU,IAAI;EAAA,CACtD;EAEA,MAAMD,IAAKA,CAAA5B,GAAA,EAAaiC,QACxB;IACI,MAAMC,QAAW,SAAMC,QAAS,CAAAC,OAAA,CAAQC,KAAA,CAAMrC,GAAG;IAEjD,OAAOkC,QAAA,CAASI,IAAK;EAAA,CACzB;EAEAC,OAAOC,UACP;IACIA,UAAA,CAAWC,OAAQ;EAAA;AAE3B;AAEAC,UAAA,CAAWC,GAAA,CAAIrD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}