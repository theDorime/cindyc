{"ast":null,"code":"import { Matrix, settings, RenderTexture, utils, BaseTexture, Texture } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\nconst _tempMatrix = new Matrix();\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\nDisplayObject.prototype._cacheAsBitmapResolution = null;\nDisplayObject.prototype._cacheAsBitmapMultisample = null;\nclass CacheData {\n  constructor() {\n    this.textureCacheId = null;\n    this.originalRender = null;\n    this.originalRenderCanvas = null;\n    this.originalCalculateBounds = null;\n    this.originalGetLocalBounds = null;\n    this.originalUpdateTransform = null;\n    this.originalDestroy = null;\n    this.originalMask = null;\n    this.originalFilterArea = null;\n    this.originalContainsPoint = null;\n    this.sprite = null;\n  }\n}\nObject.defineProperties(DisplayObject.prototype, {\n  cacheAsBitmapResolution: {\n    get() {\n      return this._cacheAsBitmapResolution;\n    },\n    set(resolution) {\n      if (resolution === this._cacheAsBitmapResolution) {\n        return;\n      }\n      this._cacheAsBitmapResolution = resolution;\n      if (this.cacheAsBitmap) {\n        this.cacheAsBitmap = false;\n        this.cacheAsBitmap = true;\n      }\n    }\n  },\n  cacheAsBitmapMultisample: {\n    get() {\n      return this._cacheAsBitmapMultisample;\n    },\n    set(multisample) {\n      if (multisample === this._cacheAsBitmapMultisample) {\n        return;\n      }\n      this._cacheAsBitmapMultisample = multisample;\n      if (this.cacheAsBitmap) {\n        this.cacheAsBitmap = false;\n        this.cacheAsBitmap = true;\n      }\n    }\n  },\n  cacheAsBitmap: {\n    get() {\n      return this._cacheAsBitmap;\n    },\n    set(value) {\n      if (this._cacheAsBitmap === value) {\n        return;\n      }\n      this._cacheAsBitmap = value;\n      let data;\n      if (value) {\n        if (!this._cacheData) {\n          this._cacheData = new CacheData();\n        }\n        data = this._cacheData;\n        data.originalRender = this.render;\n        data.originalRenderCanvas = this.renderCanvas;\n        data.originalUpdateTransform = this.updateTransform;\n        data.originalCalculateBounds = this.calculateBounds;\n        data.originalGetLocalBounds = this.getLocalBounds;\n        data.originalDestroy = this.destroy;\n        data.originalContainsPoint = this.containsPoint;\n        data.originalMask = this._mask;\n        data.originalFilterArea = this.filterArea;\n        this.render = this._renderCached;\n        this.renderCanvas = this._renderCachedCanvas;\n        this.destroy = this._cacheAsBitmapDestroy;\n      } else {\n        data = this._cacheData;\n        if (data.sprite) {\n          this._destroyCachedDisplayObject();\n        }\n        this.render = data.originalRender;\n        this.renderCanvas = data.originalRenderCanvas;\n        this.calculateBounds = data.originalCalculateBounds;\n        this.getLocalBounds = data.originalGetLocalBounds;\n        this.destroy = data.originalDestroy;\n        this.updateTransform = data.originalUpdateTransform;\n        this.containsPoint = data.originalContainsPoint;\n        this._mask = data.originalMask;\n        this.filterArea = data.originalFilterArea;\n      }\n    }\n  }\n});\nDisplayObject.prototype._renderCached = function _renderCached(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n  this._initCachedDisplayObject(renderer);\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n  this._cacheData.sprite._render(renderer);\n};\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer) {\n  if (this._cacheData?.sprite) {\n    return;\n  }\n  const cacheAlpha = this.alpha;\n  this.alpha = 1;\n  renderer.batch.flush();\n  const bounds = this.getLocalBounds(null, true).clone();\n  if (this.filters?.length) {\n    const padding = this.filters[0].padding;\n    bounds.pad(padding);\n  }\n  bounds.ceil(settings.RESOLUTION);\n  const cachedRenderTexture = renderer.renderTexture.current;\n  const cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n  const cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n  const cachedProjectionTransform = renderer.projection.transform;\n  const renderTexture = RenderTexture.create({\n    width: bounds.width,\n    height: bounds.height,\n    resolution: this.cacheAsBitmapResolution || renderer.resolution,\n    multisample: this.cacheAsBitmapMultisample ?? renderer.multisample\n  });\n  const textureCacheId = `cacheAsBitmap_${utils.uid()}`;\n  this._cacheData.textureCacheId = textureCacheId;\n  BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  Texture.addToCache(renderTexture, textureCacheId);\n  const m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n  this.render = this._cacheData.originalRender;\n  renderer.render(this, {\n    renderTexture,\n    clear: true,\n    transform: m,\n    skipUpdateTransform: false\n  });\n  renderer.framebuffer.blit();\n  renderer.projection.transform = cachedProjectionTransform;\n  renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n  this.render = this._renderCached;\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n  this.alpha = cacheAlpha;\n  const cachedSprite = new Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1;\n  if (!this.parent) {\n    this.enableTempParent();\n    this.updateTransform();\n    this.disableTempParent(null);\n  } else {\n    this.updateTransform();\n  }\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n  this._initCachedDisplayObjectCanvas(renderer);\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n  this._cacheData.sprite._renderCanvas(renderer);\n};\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer) {\n  if (this._cacheData?.sprite) {\n    return;\n  }\n  const bounds = this.getLocalBounds(null, true);\n  const cacheAlpha = this.alpha;\n  this.alpha = 1;\n  const cachedRenderTarget = renderer.canvasContext.activeContext;\n  const cachedProjectionTransform = renderer._projTransform;\n  bounds.ceil(settings.RESOLUTION);\n  const renderTexture = RenderTexture.create({\n    width: bounds.width,\n    height: bounds.height\n  });\n  const textureCacheId = `cacheAsBitmap_${utils.uid()}`;\n  this._cacheData.textureCacheId = textureCacheId;\n  BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  Texture.addToCache(renderTexture, textureCacheId);\n  const m = _tempMatrix;\n  this.transform.localTransform.copyTo(m);\n  m.invert();\n  m.tx -= bounds.x;\n  m.ty -= bounds.y;\n  this.renderCanvas = this._cacheData.originalRenderCanvas;\n  renderer.render(this, {\n    renderTexture,\n    clear: true,\n    transform: m,\n    skipUpdateTransform: false\n  });\n  renderer.canvasContext.activeContext = cachedRenderTarget;\n  renderer._projTransform = cachedProjectionTransform;\n  this.renderCanvas = this._renderCachedCanvas;\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n  this.alpha = cacheAlpha;\n  const cachedSprite = new Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1;\n  if (!this.parent) {\n    this.parent = renderer._tempDisplayObjectParent;\n    this.updateTransform();\n    this.parent = null;\n  } else {\n    this.updateTransform();\n  }\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds() {\n  this._bounds.clear();\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite._calculateBounds();\n  this._bounds.updateID = this._boundsID;\n};\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds() {\n  return this._cacheData.sprite.getLocalBounds(null);\n};\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject() {\n  this._cacheData.sprite._texture.destroy(true);\n  this._cacheData.sprite = null;\n  BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n  Texture.removeFromCache(this._cacheData.textureCacheId);\n  this._cacheData.textureCacheId = null;\n};\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options) {\n  this.cacheAsBitmap = false;\n  this.destroy(options);\n};\nexport { CacheData };","map":{"version":3,"names":["_tempMatrix","Matrix","DisplayObject","prototype","_cacheAsBitmap","_cacheData","_cacheAsBitmapResolution","_cacheAsBitmapMultisample","CacheData","constructor","textureCacheId","originalRender","originalRenderCanvas","originalCalculateBounds","originalGetLocalBounds","originalUpdateTransform","originalDestroy","originalMask","originalFilterArea","originalContainsPoint","sprite","Object","defineProperties","cacheAsBitmapResolution","get","set","resolution","cacheAsBitmap","cacheAsBitmapMultisample","multisample","value","data","render","renderCanvas","updateTransform","calculateBounds","getLocalBounds","destroy","containsPoint","_mask","filterArea","_renderCached","_renderCachedCanvas","_cacheAsBitmapDestroy","_destroyCachedDisplayObject","renderer","visible","worldAlpha","renderable","_initCachedDisplayObject","transform","_worldID","_render","cacheAlpha","alpha","batch","flush","bounds","clone","filters","length","padding","pad","ceil","settings","RESOLUTION","cachedRenderTexture","renderTexture","current","cachedSourceFrame","sourceFrame","cachedDestinationFrame","destinationFrame","cachedProjectionTransform","projection","RenderTexture","create","width","height","utils","uid","BaseTexture","addToCache","baseTexture","Texture","m","localTransform","copyTo","invert","translate","x","y","clear","skipUpdateTransform","framebuffer","blit","bind","displayObjectUpdateTransform","_calculateCachedBounds","_getCachedLocalBounds","cachedSprite","Sprite","worldTransform","anchor","_bounds","_parentID","parent","enableTempParent","disableTempParent","_initCachedDisplayObjectCanvas","_renderCanvas","cachedRenderTarget","canvasContext","activeContext","_projTransform","tx","ty","_tempDisplayObjectParent","_calculateBounds","updateID","_boundsID","_texture","removeFromCache","options"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\mixin-cache-as-bitmap\\src\\index.ts"],"sourcesContent":["/// <reference path=\"../global.d.ts\" />\nimport { BaseTexture, Matrix, RenderTexture, settings, Texture, utils } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\n\nimport type {\n    ICanvasRenderingContext2D,\n    IPointData,\n    IRenderer,\n    MaskData,\n    MSAA_QUALITY,\n    Rectangle,\n    Renderer,\n} from '@pixi/core';\nimport type { Container, IDestroyOptions } from '@pixi/display';\n\n// Don't import CanvasRender to remove dependency on this optional package\n// this type should satisify these requirements for cacheAsBitmap types\ninterface CanvasRenderer extends IRenderer\n{\n    canvasContext: {\n        activeContext: ICanvasRenderingContext2D;\n    }\n}\n\nconst _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\nDisplayObject.prototype._cacheAsBitmapResolution = null;\nDisplayObject.prototype._cacheAsBitmapMultisample = null;\n\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n * @private\n */\nexport class CacheData\n{\n    public textureCacheId: string;\n    public originalRender: (renderer: Renderer) => void;\n    public originalRenderCanvas: (renderer: IRenderer) => void;\n    public originalCalculateBounds: () => void;\n    public originalGetLocalBounds: (rect?: Rectangle) => Rectangle;\n    public originalUpdateTransform: () => void;\n    public originalDestroy: (options?: IDestroyOptions | boolean) => void;\n    public originalMask: Container | MaskData;\n    public originalFilterArea: Rectangle;\n    public originalContainsPoint: (point: IPointData) => boolean;\n    public sprite: Sprite;\n\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.originalContainsPoint = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * The resolution to use for cacheAsBitmap. By default this will use the renderer's resolution\n     * but can be overriden for performance. Lower values will reduce memory usage at the expense\n     * of render quality. A falsey value of `null` or `0` will default to the renderer's resolution.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new resolution.\n     * @member {number} cacheAsBitmapResolution\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapResolution: {\n        get(): number\n        {\n            return this._cacheAsBitmapResolution;\n        },\n        set(resolution: number): void\n        {\n            if (resolution === this._cacheAsBitmapResolution)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapResolution = resolution;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render at the new resolution\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * The number of samples to use for cacheAsBitmap. If set to `null`, the renderer's\n     * sample count is used.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new number of samples.\n     * @member {number} cacheAsBitmapMultisample\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapMultisample: {\n        get(): MSAA_QUALITY\n        {\n            return this._cacheAsBitmapMultisample;\n        },\n        set(multisample: MSAA_QUALITY): void\n        {\n            if (multisample === this._cacheAsBitmapMultisample)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapMultisample = multisample;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render with new multisample\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snapshot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get(): CacheData\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value: CacheData): void\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data: CacheData;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n * @private\n * @method _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer: Renderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._render(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer: Renderer): void\n{\n    if (this._cacheData?.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = (this as Container).getLocalBounds(null, true).clone();\n\n    // add some padding!\n    if (this.filters?.length)\n    {\n        const padding = this.filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    bounds.ceil(settings.RESOLUTION);\n\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    const cachedRenderTexture = renderer.renderTexture.current;\n    const cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n    const cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n    const cachedProjectionTransform = renderer.projection.transform;\n\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n    const renderTexture = RenderTexture.create({\n        width: bounds.width,\n        height: bounds.height,\n        resolution: this.cacheAsBitmapResolution || renderer.resolution,\n        multisample: this.cacheAsBitmapMultisample ?? renderer.multisample,\n    });\n\n    const textureCacheId = `cacheAsBitmap_${utils.uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    renderer.framebuffer.blit();\n\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n\n    // renderer.filterManager.filterStack = stack;\n\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.enableTempParent();\n        this.updateTransform();\n        this.disableTempParent(null);\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n * @private\n * @method _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer: IRenderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(\n    renderer: CanvasRenderer\n): void\n{\n    if (this._cacheData?.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = (this as Container).getLocalBounds(null, true);\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.canvasContext.activeContext;\n    const cachedProjectionTransform = (renderer as any)._projTransform;\n\n    bounds.ceil(settings.RESOLUTION);\n\n    const renderTexture = RenderTexture.create({ width: bounds.width, height: bounds.height });\n\n    const textureCacheId = `cacheAsBitmap_${utils.uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    // now restore the state be setting the new properties\n    renderer.canvasContext.activeContext = cachedRenderTarget;\n    (renderer as any)._projTransform = cachedProjectionTransform;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = (renderer as any)._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n * @private\n * @method\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds(): void\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    (this._cacheData.sprite as any)._calculateBounds();\n    this._bounds.updateID = (this as any)._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n * @private\n * @method\n * @returns {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds(): Rectangle\n{\n    return this._cacheData.sprite.getLocalBounds(null);\n};\n\n/**\n * Destroys the cached sprite.\n * @private\n * @method\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject(): void\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n * @private\n * @method\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options?: IDestroyOptions | boolean): void\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}