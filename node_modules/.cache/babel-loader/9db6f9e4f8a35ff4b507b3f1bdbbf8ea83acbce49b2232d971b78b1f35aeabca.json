{"ast":null,"code":"import { Filter, CLEAR_MODES } from '@pixi/core';\nimport { BlurFilterPass } from './BlurFilterPass.mjs';\nclass BlurFilter extends Filter {\n  constructor() {\n    let strength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n    let quality = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n    let resolution = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Filter.defaultResolution;\n    let kernelSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;\n    super();\n    this._repeatEdgePixels = false;\n    this.blurXFilter = new BlurFilterPass(true, strength, quality, resolution, kernelSize);\n    this.blurYFilter = new BlurFilterPass(false, strength, quality, resolution, kernelSize);\n    this.resolution = resolution;\n    this.quality = quality;\n    this.blur = strength;\n    this.repeatEdgePixels = false;\n  }\n  apply(filterManager, input, output, clearMode) {\n    const xStrength = Math.abs(this.blurXFilter.strength);\n    const yStrength = Math.abs(this.blurYFilter.strength);\n    if (xStrength && yStrength) {\n      const renderTarget = filterManager.getFilterTexture();\n      this.blurXFilter.apply(filterManager, input, renderTarget, CLEAR_MODES.CLEAR);\n      this.blurYFilter.apply(filterManager, renderTarget, output, clearMode);\n      filterManager.returnFilterTexture(renderTarget);\n    } else if (yStrength) {\n      this.blurYFilter.apply(filterManager, input, output, clearMode);\n    } else {\n      this.blurXFilter.apply(filterManager, input, output, clearMode);\n    }\n  }\n  updatePadding() {\n    if (this._repeatEdgePixels) {\n      this.padding = 0;\n    } else {\n      this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n    }\n  }\n  get blur() {\n    return this.blurXFilter.blur;\n  }\n  set blur(value) {\n    this.blurXFilter.blur = this.blurYFilter.blur = value;\n    this.updatePadding();\n  }\n  get quality() {\n    return this.blurXFilter.quality;\n  }\n  set quality(value) {\n    this.blurXFilter.quality = this.blurYFilter.quality = value;\n  }\n  get blurX() {\n    return this.blurXFilter.blur;\n  }\n  set blurX(value) {\n    this.blurXFilter.blur = value;\n    this.updatePadding();\n  }\n  get blurY() {\n    return this.blurYFilter.blur;\n  }\n  set blurY(value) {\n    this.blurYFilter.blur = value;\n    this.updatePadding();\n  }\n  get blendMode() {\n    return this.blurYFilter.blendMode;\n  }\n  set blendMode(value) {\n    this.blurYFilter.blendMode = value;\n  }\n  get repeatEdgePixels() {\n    return this._repeatEdgePixels;\n  }\n  set repeatEdgePixels(value) {\n    this._repeatEdgePixels = value;\n    this.updatePadding();\n  }\n}\nexport { BlurFilter };","map":{"version":3,"names":["BlurFilter","Filter","constructor","strength","arguments","length","undefined","quality","resolution","defaultResolution","kernelSize","_repeatEdgePixels","blurXFilter","BlurFilterPass","blurYFilter","blur","repeatEdgePixels","apply","filterManager","input","output","clearMode","xStrength","Math","abs","yStrength","renderTarget","getFilterTexture","CLEAR_MODES","CLEAR","returnFilterTexture","updatePadding","padding","max","value","blurX","blurY","blendMode"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\filter-blur\\src\\BlurFilter.ts"],"sourcesContent":["import { CLEAR_MODES, Filter } from '@pixi/core';\nimport { BlurFilterPass } from './BlurFilterPass';\n\nimport type { BLEND_MODES, FilterSystem, RenderTexture } from '@pixi/core';\n\n/**\n * The BlurFilter applies a Gaussian blur to an object.\n *\n * The strength of the blur can be set for the x-axis and y-axis separately.\n * @memberof PIXI\n */\nexport class BlurFilter extends Filter\n{\n    public blurXFilter: BlurFilterPass;\n    public blurYFilter: BlurFilterPass;\n\n    private _repeatEdgePixels = false;\n\n    /**\n     * @param strength - The strength of the blur filter.\n     * @param quality - The quality of the blur filter.\n     * @param [resolution=Filter.defaultResolution] - The resolution of the blur filter.\n     * @param kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(strength = 8, quality = 4, resolution = Filter.defaultResolution, kernelSize = 5)\n    {\n        super();\n\n        this.blurXFilter = new BlurFilterPass(true, strength, quality, resolution, kernelSize);\n        this.blurYFilter = new BlurFilterPass(false, strength, quality, resolution, kernelSize);\n\n        this.resolution = resolution;\n        this.quality = quality;\n        this.blur = strength;\n\n        this.repeatEdgePixels = false;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - How to clear\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES): void\n    {\n        const xStrength = Math.abs(this.blurXFilter.strength);\n        const yStrength = Math.abs(this.blurYFilter.strength);\n\n        if (xStrength && yStrength)\n        {\n            const renderTarget = filterManager.getFilterTexture();\n\n            this.blurXFilter.apply(filterManager, input, renderTarget, CLEAR_MODES.CLEAR);\n            this.blurYFilter.apply(filterManager, renderTarget, output, clearMode);\n\n            filterManager.returnFilterTexture(renderTarget);\n        }\n        else if (yStrength)\n        {\n            this.blurYFilter.apply(filterManager, input, output, clearMode);\n        }\n        else\n        {\n            this.blurXFilter.apply(filterManager, input, output, clearMode);\n        }\n    }\n\n    protected updatePadding(): void\n    {\n        if (this._repeatEdgePixels)\n        {\n            this.padding = 0;\n        }\n        else\n        {\n            this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n        }\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     * @default 2\n     */\n    get blur(): number\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blur(value: number)\n    {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the number of passes for blur. More passes means higher quality bluring.\n     * @default 1\n     */\n    get quality(): number\n    {\n        return this.blurXFilter.quality;\n    }\n\n    set quality(value: number)\n    {\n        this.blurXFilter.quality = this.blurYFilter.quality = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     * @default 2\n     */\n    get blurX(): number\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blurX(value: number)\n    {\n        this.blurXFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     * @default 2\n     */\n    get blurY(): number\n    {\n        return this.blurYFilter.blur;\n    }\n\n    set blurY(value: number)\n    {\n        this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the blendmode of the filter\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this.blurYFilter.blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blurYFilter.blendMode = value;\n    }\n\n    /**\n     * If set to true the edge of the target will be clamped\n     * @default false\n     */\n    get repeatEdgePixels(): boolean\n    {\n        return this._repeatEdgePixels;\n    }\n\n    set repeatEdgePixels(value: boolean)\n    {\n        this._repeatEdgePixels = value;\n        this.updatePadding();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}