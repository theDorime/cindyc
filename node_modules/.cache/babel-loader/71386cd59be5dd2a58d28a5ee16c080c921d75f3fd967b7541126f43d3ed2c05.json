{"ast":null,"code":"import { ENV, BUFFER_BITS, MSAA_QUALITY } from '@pixi/constants';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nimport { Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { Framebuffer } from './Framebuffer.mjs';\nimport { GLFramebuffer } from './GLFramebuffer.mjs';\nconst tempRectangle = new Rectangle();\nclass FramebufferSystem {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.managedFramebuffers = [];\n    this.unknownFramebuffer = new Framebuffer(10, 10);\n    this.msaaSamples = null;\n  }\n  contextChange() {\n    this.disposeAll(true);\n    const gl = this.gl = this.renderer.gl;\n    this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n    this.current = this.unknownFramebuffer;\n    this.viewport = new Rectangle();\n    this.hasMRT = true;\n    this.writeDepthTexture = true;\n    if (this.renderer.context.webGLVersion === 1) {\n      let nativeDrawBuffersExtension = this.renderer.context.extensions.drawBuffers;\n      let nativeDepthTextureExtension = this.renderer.context.extensions.depthTexture;\n      if (settings.PREFER_ENV === ENV.WEBGL_LEGACY) {\n        nativeDrawBuffersExtension = null;\n        nativeDepthTextureExtension = null;\n      }\n      if (nativeDrawBuffersExtension) {\n        gl.drawBuffers = activeTextures => nativeDrawBuffersExtension.drawBuffersWEBGL(activeTextures);\n      } else {\n        this.hasMRT = false;\n        gl.drawBuffers = () => {};\n      }\n      if (!nativeDepthTextureExtension) {\n        this.writeDepthTexture = false;\n      }\n    } else {\n      this.msaaSamples = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES);\n    }\n  }\n  bind(framebuffer, frame) {\n    let mipLevel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const {\n      gl\n    } = this;\n    if (framebuffer) {\n      const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID] || this.initFramebuffer(framebuffer);\n      if (this.current !== framebuffer) {\n        this.current = framebuffer;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer);\n      }\n      if (fbo.mipLevel !== mipLevel) {\n        framebuffer.dirtyId++;\n        framebuffer.dirtyFormat++;\n        fbo.mipLevel = mipLevel;\n      }\n      if (fbo.dirtyId !== framebuffer.dirtyId) {\n        fbo.dirtyId = framebuffer.dirtyId;\n        if (fbo.dirtyFormat !== framebuffer.dirtyFormat) {\n          fbo.dirtyFormat = framebuffer.dirtyFormat;\n          fbo.dirtySize = framebuffer.dirtySize;\n          this.updateFramebuffer(framebuffer, mipLevel);\n        } else if (fbo.dirtySize !== framebuffer.dirtySize) {\n          fbo.dirtySize = framebuffer.dirtySize;\n          this.resizeFramebuffer(framebuffer);\n        }\n      }\n      for (let i = 0; i < framebuffer.colorTextures.length; i++) {\n        const tex = framebuffer.colorTextures[i];\n        this.renderer.texture.unbind(tex.parentTextureArray || tex);\n      }\n      if (framebuffer.depthTexture) {\n        this.renderer.texture.unbind(framebuffer.depthTexture);\n      }\n      if (frame) {\n        const mipWidth = frame.width >> mipLevel;\n        const mipHeight = frame.height >> mipLevel;\n        const scale = mipWidth / frame.width;\n        this.setViewport(frame.x * scale, frame.y * scale, mipWidth, mipHeight);\n      } else {\n        const mipWidth = framebuffer.width >> mipLevel;\n        const mipHeight = framebuffer.height >> mipLevel;\n        this.setViewport(0, 0, mipWidth, mipHeight);\n      }\n    } else {\n      if (this.current) {\n        this.current = null;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      }\n      if (frame) {\n        this.setViewport(frame.x, frame.y, frame.width, frame.height);\n      } else {\n        this.setViewport(0, 0, this.renderer.width, this.renderer.height);\n      }\n    }\n  }\n  setViewport(x, y, width, height) {\n    const v = this.viewport;\n    x = Math.round(x);\n    y = Math.round(y);\n    width = Math.round(width);\n    height = Math.round(height);\n    if (v.width !== width || v.height !== height || v.x !== x || v.y !== y) {\n      v.x = x;\n      v.y = y;\n      v.width = width;\n      v.height = height;\n      this.gl.viewport(x, y, width, height);\n    }\n  }\n  get size() {\n    if (this.current) {\n      return {\n        x: 0,\n        y: 0,\n        width: this.current.width,\n        height: this.current.height\n      };\n    }\n    return {\n      x: 0,\n      y: 0,\n      width: this.renderer.width,\n      height: this.renderer.height\n    };\n  }\n  clear(r, g, b, a) {\n    let mask = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH;\n    const {\n      gl\n    } = this;\n    gl.clearColor(r, g, b, a);\n    gl.clear(mask);\n  }\n  initFramebuffer(framebuffer) {\n    const {\n      gl\n    } = this;\n    const fbo = new GLFramebuffer(gl.createFramebuffer());\n    fbo.multisample = this.detectSamples(framebuffer.multisample);\n    framebuffer.glFramebuffers[this.CONTEXT_UID] = fbo;\n    this.managedFramebuffers.push(framebuffer);\n    framebuffer.disposeRunner.add(this);\n    return fbo;\n  }\n  resizeFramebuffer(framebuffer) {\n    const {\n      gl\n    } = this;\n    const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n    if (fbo.stencil) {\n      gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n      if (fbo.msaaBuffer) {\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n      } else {\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n      }\n    }\n    const colorTextures = framebuffer.colorTextures;\n    let count = colorTextures.length;\n    if (!gl.drawBuffers) {\n      count = Math.min(count, 1);\n    }\n    for (let i = 0; i < count; i++) {\n      const texture = colorTextures[i];\n      const parentTexture = texture.parentTextureArray || texture;\n      this.renderer.texture.bind(parentTexture, 0);\n      if (i === 0 && fbo.msaaBuffer) {\n        gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height);\n      }\n    }\n    if (framebuffer.depthTexture && this.writeDepthTexture) {\n      this.renderer.texture.bind(framebuffer.depthTexture, 0);\n    }\n  }\n  updateFramebuffer(framebuffer, mipLevel) {\n    const {\n      gl\n    } = this;\n    const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n    const colorTextures = framebuffer.colorTextures;\n    let count = colorTextures.length;\n    if (!gl.drawBuffers) {\n      count = Math.min(count, 1);\n    }\n    if (fbo.multisample > 1 && this.canMultisampleFramebuffer(framebuffer)) {\n      fbo.msaaBuffer = fbo.msaaBuffer || gl.createRenderbuffer();\n    } else if (fbo.msaaBuffer) {\n      gl.deleteRenderbuffer(fbo.msaaBuffer);\n      fbo.msaaBuffer = null;\n      if (fbo.blitFramebuffer) {\n        fbo.blitFramebuffer.dispose();\n        fbo.blitFramebuffer = null;\n      }\n    }\n    const activeTextures = [];\n    for (let i = 0; i < count; i++) {\n      const texture = colorTextures[i];\n      const parentTexture = texture.parentTextureArray || texture;\n      this.renderer.texture.bind(parentTexture, 0);\n      if (i === 0 && fbo.msaaBuffer) {\n        gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, fbo.msaaBuffer);\n      } else {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, texture.target, parentTexture._glTextures[this.CONTEXT_UID].texture, mipLevel);\n        activeTextures.push(gl.COLOR_ATTACHMENT0 + i);\n      }\n    }\n    if (activeTextures.length > 1) {\n      gl.drawBuffers(activeTextures);\n    }\n    if (framebuffer.depthTexture) {\n      const writeDepthTexture = this.writeDepthTexture;\n      if (writeDepthTexture) {\n        const depthTexture = framebuffer.depthTexture;\n        this.renderer.texture.bind(depthTexture, 0);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture._glTextures[this.CONTEXT_UID].texture, mipLevel);\n      }\n    }\n    if ((framebuffer.stencil || framebuffer.depth) && !(framebuffer.depthTexture && this.writeDepthTexture)) {\n      fbo.stencil = fbo.stencil || gl.createRenderbuffer();\n      gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n      if (fbo.msaaBuffer) {\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n      } else {\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n      }\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, fbo.stencil);\n    } else if (fbo.stencil) {\n      gl.deleteRenderbuffer(fbo.stencil);\n      fbo.stencil = null;\n    }\n  }\n  canMultisampleFramebuffer(framebuffer) {\n    return this.renderer.context.webGLVersion !== 1 && framebuffer.colorTextures.length <= 1 && !framebuffer.depthTexture;\n  }\n  detectSamples(samples) {\n    const {\n      msaaSamples\n    } = this;\n    let res = MSAA_QUALITY.NONE;\n    if (samples <= 1 || msaaSamples === null) {\n      return res;\n    }\n    for (let i = 0; i < msaaSamples.length; i++) {\n      if (msaaSamples[i] <= samples) {\n        res = msaaSamples[i];\n        break;\n      }\n    }\n    if (res === 1) {\n      res = MSAA_QUALITY.NONE;\n    }\n    return res;\n  }\n  blit(framebuffer, sourcePixels, destPixels) {\n    const {\n      current,\n      renderer,\n      gl,\n      CONTEXT_UID\n    } = this;\n    if (renderer.context.webGLVersion !== 2) {\n      return;\n    }\n    if (!current) {\n      return;\n    }\n    const fbo = current.glFramebuffers[CONTEXT_UID];\n    if (!fbo) {\n      return;\n    }\n    if (!framebuffer) {\n      if (!fbo.msaaBuffer) {\n        return;\n      }\n      const colorTexture = current.colorTextures[0];\n      if (!colorTexture) {\n        return;\n      }\n      if (!fbo.blitFramebuffer) {\n        fbo.blitFramebuffer = new Framebuffer(current.width, current.height);\n        fbo.blitFramebuffer.addColorTexture(0, colorTexture);\n      }\n      framebuffer = fbo.blitFramebuffer;\n      if (framebuffer.colorTextures[0] !== colorTexture) {\n        framebuffer.colorTextures[0] = colorTexture;\n        framebuffer.dirtyId++;\n        framebuffer.dirtyFormat++;\n      }\n      if (framebuffer.width !== current.width || framebuffer.height !== current.height) {\n        framebuffer.width = current.width;\n        framebuffer.height = current.height;\n        framebuffer.dirtyId++;\n        framebuffer.dirtySize++;\n      }\n    }\n    if (!sourcePixels) {\n      sourcePixels = tempRectangle;\n      sourcePixels.width = current.width;\n      sourcePixels.height = current.height;\n    }\n    if (!destPixels) {\n      destPixels = sourcePixels;\n    }\n    const sameSize = sourcePixels.width === destPixels.width && sourcePixels.height === destPixels.height;\n    this.bind(framebuffer);\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo.framebuffer);\n    gl.blitFramebuffer(sourcePixels.left, sourcePixels.top, sourcePixels.right, sourcePixels.bottom, destPixels.left, destPixels.top, destPixels.right, destPixels.bottom, gl.COLOR_BUFFER_BIT, sameSize ? gl.NEAREST : gl.LINEAR);\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, framebuffer.glFramebuffers[this.CONTEXT_UID].framebuffer);\n  }\n  disposeFramebuffer(framebuffer, contextLost) {\n    const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n    const gl = this.gl;\n    if (!fbo) {\n      return;\n    }\n    delete framebuffer.glFramebuffers[this.CONTEXT_UID];\n    const index = this.managedFramebuffers.indexOf(framebuffer);\n    if (index >= 0) {\n      this.managedFramebuffers.splice(index, 1);\n    }\n    framebuffer.disposeRunner.remove(this);\n    if (!contextLost) {\n      gl.deleteFramebuffer(fbo.framebuffer);\n      if (fbo.msaaBuffer) {\n        gl.deleteRenderbuffer(fbo.msaaBuffer);\n      }\n      if (fbo.stencil) {\n        gl.deleteRenderbuffer(fbo.stencil);\n      }\n    }\n    if (fbo.blitFramebuffer) {\n      this.disposeFramebuffer(fbo.blitFramebuffer, contextLost);\n    }\n  }\n  disposeAll(contextLost) {\n    const list = this.managedFramebuffers;\n    this.managedFramebuffers = [];\n    for (let i = 0; i < list.length; i++) {\n      this.disposeFramebuffer(list[i], contextLost);\n    }\n  }\n  forceStencil() {\n    const framebuffer = this.current;\n    if (!framebuffer) {\n      return;\n    }\n    const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n    if (!fbo || fbo.stencil) {\n      return;\n    }\n    framebuffer.stencil = true;\n    const w = framebuffer.width;\n    const h = framebuffer.height;\n    const gl = this.gl;\n    const stencil = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, stencil);\n    if (fbo.msaaBuffer) {\n      gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, w, h);\n    } else {\n      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, w, h);\n    }\n    fbo.stencil = stencil;\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, stencil);\n  }\n  reset() {\n    this.current = this.unknownFramebuffer;\n    this.viewport = new Rectangle();\n  }\n  destroy() {\n    this.renderer = null;\n  }\n}\nFramebufferSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"framebuffer\"\n};\nextensions.add(FramebufferSystem);\nexport { FramebufferSystem };","map":{"version":3,"names":["tempRectangle","Rectangle","FramebufferSystem","constructor","renderer","managedFramebuffers","unknownFramebuffer","Framebuffer","msaaSamples","contextChange","disposeAll","gl","CONTEXT_UID","current","viewport","hasMRT","writeDepthTexture","context","webGLVersion","nativeDrawBuffersExtension","extensions","drawBuffers","nativeDepthTextureExtension","depthTexture","settings","PREFER_ENV","ENV","WEBGL_LEGACY","activeTextures","drawBuffersWEBGL","getInternalformatParameter","RENDERBUFFER","RGBA8","SAMPLES","bind","framebuffer","frame","mipLevel","arguments","length","undefined","fbo","glFramebuffers","initFramebuffer","bindFramebuffer","FRAMEBUFFER","dirtyId","dirtyFormat","dirtySize","updateFramebuffer","resizeFramebuffer","i","colorTextures","tex","texture","unbind","parentTextureArray","mipWidth","width","mipHeight","height","scale","setViewport","x","y","v","Math","round","size","clear","r","g","b","a","mask","BUFFER_BITS","COLOR","DEPTH","clearColor","GLFramebuffer","createFramebuffer","multisample","detectSamples","push","disposeRunner","add","stencil","bindRenderbuffer","msaaBuffer","renderbufferStorageMultisample","DEPTH24_STENCIL8","renderbufferStorage","DEPTH_STENCIL","count","min","parentTexture","_glTextures","internalFormat","canMultisampleFramebuffer","createRenderbuffer","deleteRenderbuffer","blitFramebuffer","dispose","framebufferRenderbuffer","COLOR_ATTACHMENT0","framebufferTexture2D","target","DEPTH_ATTACHMENT","TEXTURE_2D","depth","DEPTH_STENCIL_ATTACHMENT","samples","res","MSAA_QUALITY","NONE","blit","sourcePixels","destPixels","colorTexture","addColorTexture","sameSize","READ_FRAMEBUFFER","left","top","right","bottom","COLOR_BUFFER_BIT","NEAREST","LINEAR","disposeFramebuffer","contextLost","index","indexOf","splice","remove","deleteFramebuffer","list","forceStencil","w","h","reset","destroy","extension","type","ExtensionType","RendererSystem","name"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\framebuffer\\FramebufferSystem.ts"],"sourcesContent":["import { BUFFER_BITS, ENV, MSAA_QUALITY } from '@pixi/constants';\nimport { extensions, ExtensionType } from '@pixi/extensions';\nimport { Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { Framebuffer } from './Framebuffer';\nimport { GLFramebuffer } from './GLFramebuffer';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { IRenderingContext } from '../IRenderer';\nimport type { Renderer } from '../Renderer';\nimport type { ISystem } from '../system/ISystem';\n\nconst tempRectangle = new Rectangle();\n\n/**\n * System plugin to the renderer to manage framebuffers.\n * @memberof PIXI\n */\nexport class FramebufferSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'framebuffer',\n    };\n\n    /** A list of managed framebuffers. */\n    public readonly managedFramebuffers: Array<Framebuffer>;\n    public current: Framebuffer;\n    public viewport: Rectangle;\n    public hasMRT: boolean;\n    public writeDepthTexture: boolean;\n    protected CONTEXT_UID: number;\n    protected gl: IRenderingContext;\n\n    /** Framebuffer value that shows that we don't know what is bound. */\n    protected unknownFramebuffer: Framebuffer;\n    protected msaaSamples: Array<number>;\n    public renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this.managedFramebuffers = [];\n        this.unknownFramebuffer = new Framebuffer(10, 10);\n\n        this.msaaSamples = null;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        this.disposeAll(true);\n\n        const gl = this.gl = this.renderer.gl;\n\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n        this.current = this.unknownFramebuffer;\n        this.viewport = new Rectangle();\n        this.hasMRT = true;\n        this.writeDepthTexture = true;\n\n        // webgl2\n        if (this.renderer.context.webGLVersion === 1)\n        {\n            // webgl 1!\n            let nativeDrawBuffersExtension = this.renderer.context.extensions.drawBuffers;\n            let nativeDepthTextureExtension = this.renderer.context.extensions.depthTexture;\n\n            if (settings.PREFER_ENV === ENV.WEBGL_LEGACY)\n            {\n                nativeDrawBuffersExtension = null;\n                nativeDepthTextureExtension = null;\n            }\n\n            if (nativeDrawBuffersExtension)\n            {\n                gl.drawBuffers = (activeTextures: number[]): void =>\n                    nativeDrawBuffersExtension.drawBuffersWEBGL(activeTextures);\n            }\n            else\n            {\n                this.hasMRT = false;\n                gl.drawBuffers = (): void =>\n                {\n                    // empty\n                };\n            }\n\n            if (!nativeDepthTextureExtension)\n            {\n                this.writeDepthTexture = false;\n            }\n        }\n        else\n        {\n            // WebGL2\n            // cache possible MSAA samples\n            this.msaaSamples = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES);\n        }\n    }\n\n    /**\n     * Bind a framebuffer.\n     * @param framebuffer\n     * @param frame - frame, default is framebuffer size\n     * @param mipLevel - optional mip level to set on the framebuffer - defaults to 0\n     */\n    bind(framebuffer?: Framebuffer, frame?: Rectangle, mipLevel = 0): void\n    {\n        const { gl } = this;\n\n        if (framebuffer)\n        {\n            // TODO caching layer!\n\n            const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID] || this.initFramebuffer(framebuffer);\n\n            if (this.current !== framebuffer)\n            {\n                this.current = framebuffer;\n                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer);\n            }\n            // make sure all textures are unbound..\n\n            if (fbo.mipLevel !== mipLevel)\n            {\n                framebuffer.dirtyId++;\n                framebuffer.dirtyFormat++;\n                fbo.mipLevel = mipLevel;\n            }\n\n            // now check for updates...\n            if (fbo.dirtyId !== framebuffer.dirtyId)\n            {\n                fbo.dirtyId = framebuffer.dirtyId;\n\n                if (fbo.dirtyFormat !== framebuffer.dirtyFormat)\n                {\n                    fbo.dirtyFormat = framebuffer.dirtyFormat;\n                    fbo.dirtySize = framebuffer.dirtySize;\n                    this.updateFramebuffer(framebuffer, mipLevel);\n                }\n                else if (fbo.dirtySize !== framebuffer.dirtySize)\n                {\n                    fbo.dirtySize = framebuffer.dirtySize;\n                    this.resizeFramebuffer(framebuffer);\n                }\n            }\n\n            for (let i = 0; i < framebuffer.colorTextures.length; i++)\n            {\n                const tex = framebuffer.colorTextures[i];\n\n                this.renderer.texture.unbind(tex.parentTextureArray || tex);\n            }\n\n            if (framebuffer.depthTexture)\n            {\n                this.renderer.texture.unbind(framebuffer.depthTexture);\n            }\n\n            if (frame)\n            {\n                const mipWidth = (frame.width >> mipLevel);\n                const mipHeight = (frame.height >> mipLevel);\n\n                const scale = mipWidth / frame.width;\n\n                this.setViewport(\n                    frame.x * scale,\n                    frame.y * scale,\n                    mipWidth,\n                    mipHeight\n                );\n            }\n            else\n            {\n                const mipWidth = (framebuffer.width >> mipLevel);\n                const mipHeight = (framebuffer.height >> mipLevel);\n\n                this.setViewport(0, 0, mipWidth, mipHeight);\n            }\n        }\n        else\n        {\n            if (this.current)\n            {\n                this.current = null;\n                gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            }\n\n            if (frame)\n            {\n                this.setViewport(frame.x, frame.y, frame.width, frame.height);\n            }\n            else\n            {\n                this.setViewport(0, 0, this.renderer.width, this.renderer.height);\n            }\n        }\n    }\n\n    /**\n     * Set the WebGLRenderingContext's viewport.\n     * @param x - X position of viewport\n     * @param y - Y position of viewport\n     * @param width - Width of viewport\n     * @param height - Height of viewport\n     */\n    setViewport(x: number, y: number, width: number, height: number): void\n    {\n        const v = this.viewport;\n\n        x = Math.round(x);\n        y = Math.round(y);\n        width = Math.round(width);\n        height = Math.round(height);\n\n        if (v.width !== width || v.height !== height || v.x !== x || v.y !== y)\n        {\n            v.x = x;\n            v.y = y;\n            v.width = width;\n            v.height = height;\n\n            this.gl.viewport(x, y, width, height);\n        }\n    }\n\n    /**\n     * Get the size of the current width and height. Returns object with `width` and `height` values.\n     * @readonly\n     */\n    get size(): { x: number; y: number; width: number; height: number }\n    {\n        if (this.current)\n        {\n            // TODO store temp\n            return { x: 0, y: 0, width: this.current.width, height: this.current.height };\n        }\n\n        return { x: 0, y: 0, width: this.renderer.width, height: this.renderer.height };\n    }\n\n    /**\n     * Clear the color of the context\n     * @param r - Red value from 0 to 1\n     * @param g - Green value from 0 to 1\n     * @param b - Blue value from 0 to 1\n     * @param a - Alpha value from 0 to 1\n     * @param {PIXI.BUFFER_BITS} [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n     *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n     */\n    clear(r: number, g: number, b: number, a: number, mask: BUFFER_BITS = BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH): void\n    {\n        const { gl } = this;\n\n        // TODO clear color can be set only one right?\n        gl.clearColor(r, g, b, a);\n        gl.clear(mask);\n    }\n\n    /**\n     * Initialize framebuffer for this context\n     * @protected\n     * @param framebuffer\n     * @returns - created GLFramebuffer\n     */\n    initFramebuffer(framebuffer: Framebuffer): GLFramebuffer\n    {\n        const { gl } = this;\n        const fbo = new GLFramebuffer(gl.createFramebuffer());\n\n        fbo.multisample = this.detectSamples(framebuffer.multisample);\n        framebuffer.glFramebuffers[this.CONTEXT_UID] = fbo;\n\n        this.managedFramebuffers.push(framebuffer);\n        framebuffer.disposeRunner.add(this);\n\n        return fbo;\n    }\n\n    /**\n     * Resize the framebuffer\n     * @param framebuffer\n     * @protected\n     */\n    resizeFramebuffer(framebuffer: Framebuffer): void\n    {\n        const { gl } = this;\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        if (fbo.stencil)\n        {\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n\n            if (fbo.msaaBuffer)\n            {\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n            }\n            else\n            {\n                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n            }\n        }\n\n        const colorTextures = framebuffer.colorTextures;\n\n        let count = colorTextures.length;\n\n        if (!gl.drawBuffers)\n        {\n            count = Math.min(count, 1);\n        }\n\n        for (let i = 0; i < count; i++)\n        {\n            const texture = colorTextures[i];\n            const parentTexture = texture.parentTextureArray || texture;\n\n            this.renderer.texture.bind(parentTexture, 0);\n\n            if (i === 0 && fbo.msaaBuffer)\n            {\n                gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height);\n            }\n        }\n\n        if (framebuffer.depthTexture && this.writeDepthTexture)\n        {\n            this.renderer.texture.bind(framebuffer.depthTexture, 0);\n        }\n    }\n\n    /**\n     * Update the framebuffer\n     * @param framebuffer\n     * @param mipLevel\n     * @protected\n     */\n    updateFramebuffer(framebuffer: Framebuffer, mipLevel: number): void\n    {\n        const { gl } = this;\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        // bind the color texture\n        const colorTextures = framebuffer.colorTextures;\n\n        let count = colorTextures.length;\n\n        if (!gl.drawBuffers)\n        {\n            count = Math.min(count, 1);\n        }\n\n        if (fbo.multisample > 1 && this.canMultisampleFramebuffer(framebuffer))\n        {\n            fbo.msaaBuffer = fbo.msaaBuffer || gl.createRenderbuffer();\n        }\n        else if (fbo.msaaBuffer)\n        {\n            gl.deleteRenderbuffer(fbo.msaaBuffer);\n            fbo.msaaBuffer = null;\n\n            if (fbo.blitFramebuffer)\n            {\n                fbo.blitFramebuffer.dispose();\n                fbo.blitFramebuffer = null;\n            }\n        }\n\n        const activeTextures = [];\n\n        for (let i = 0; i < count; i++)\n        {\n            const texture = colorTextures[i];\n            const parentTexture = texture.parentTextureArray || texture;\n\n            this.renderer.texture.bind(parentTexture, 0);\n\n            if (i === 0 && fbo.msaaBuffer)\n            {\n                gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height);\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, fbo.msaaBuffer);\n            }\n            else\n            {\n                gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                    gl.COLOR_ATTACHMENT0 + i,\n                    texture.target,\n                    parentTexture._glTextures[this.CONTEXT_UID].texture,\n                    mipLevel);\n\n                activeTextures.push(gl.COLOR_ATTACHMENT0 + i);\n            }\n        }\n\n        if (activeTextures.length > 1)\n        {\n            gl.drawBuffers(activeTextures);\n        }\n\n        if (framebuffer.depthTexture)\n        {\n            const writeDepthTexture = this.writeDepthTexture;\n\n            if (writeDepthTexture)\n            {\n                const depthTexture = framebuffer.depthTexture;\n\n                this.renderer.texture.bind(depthTexture, 0);\n\n                gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                    gl.DEPTH_ATTACHMENT,\n                    gl.TEXTURE_2D,\n                    depthTexture._glTextures[this.CONTEXT_UID].texture,\n                    mipLevel);\n            }\n        }\n\n        if ((framebuffer.stencil || framebuffer.depth) && !(framebuffer.depthTexture && this.writeDepthTexture))\n        {\n            fbo.stencil = fbo.stencil || gl.createRenderbuffer();\n\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n\n            if (fbo.msaaBuffer)\n            {\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n            }\n            else\n            {\n                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n            }\n\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, fbo.stencil);\n        }\n        else if (fbo.stencil)\n        {\n            gl.deleteRenderbuffer(fbo.stencil);\n            fbo.stencil = null;\n        }\n    }\n\n    /**\n     * Returns true if the frame buffer can be multisampled.\n     * @param framebuffer\n     */\n    protected canMultisampleFramebuffer(framebuffer: Framebuffer): boolean\n    {\n        return this.renderer.context.webGLVersion !== 1\n            && framebuffer.colorTextures.length <= 1 && !framebuffer.depthTexture;\n    }\n\n    /**\n     * Detects number of samples that is not more than a param but as close to it as possible\n     * @param samples - number of samples\n     * @returns - recommended number of samples\n     */\n    protected detectSamples(samples: MSAA_QUALITY): MSAA_QUALITY\n    {\n        const { msaaSamples } = this;\n        let res: number = MSAA_QUALITY.NONE;\n\n        if (samples <= 1 || msaaSamples === null)\n        {\n            return res;\n        }\n        for (let i = 0; i < msaaSamples.length; i++)\n        {\n            if (msaaSamples[i] <= samples)\n            {\n                res = msaaSamples[i];\n                break;\n            }\n        }\n\n        if (res === 1)\n        {\n            res = MSAA_QUALITY.NONE;\n        }\n\n        return res;\n    }\n\n    /**\n     * Only works with WebGL2\n     *\n     * blits framebuffer to another of the same or bigger size\n     * after that target framebuffer is bound\n     *\n     * Fails with WebGL warning if blits multisample framebuffer to different size\n     * @param framebuffer - by default it blits \"into itself\", from renderBuffer to texture.\n     * @param sourcePixels - source rectangle in pixels\n     * @param destPixels - dest rectangle in pixels, assumed to be the same as sourcePixels\n     */\n    public blit(framebuffer?: Framebuffer, sourcePixels?: Rectangle, destPixels?: Rectangle): void\n    {\n        const { current, renderer, gl, CONTEXT_UID } = this;\n\n        if (renderer.context.webGLVersion !== 2)\n        {\n            return;\n        }\n\n        if (!current)\n        {\n            return;\n        }\n        const fbo = current.glFramebuffers[CONTEXT_UID];\n\n        if (!fbo)\n        {\n            return;\n        }\n        if (!framebuffer)\n        {\n            if (!fbo.msaaBuffer)\n            {\n                return;\n            }\n\n            const colorTexture = current.colorTextures[0];\n\n            if (!colorTexture)\n            {\n                return;\n            }\n\n            if (!fbo.blitFramebuffer)\n            {\n                fbo.blitFramebuffer = new Framebuffer(current.width, current.height);\n                fbo.blitFramebuffer.addColorTexture(0, colorTexture);\n            }\n\n            framebuffer = fbo.blitFramebuffer;\n\n            if (framebuffer.colorTextures[0] !== colorTexture)\n            {\n                framebuffer.colorTextures[0] = colorTexture;\n                framebuffer.dirtyId++;\n                framebuffer.dirtyFormat++;\n            }\n\n            if (framebuffer.width !== current.width || framebuffer.height !== current.height)\n            {\n                framebuffer.width = current.width;\n                framebuffer.height = current.height;\n                framebuffer.dirtyId++;\n                framebuffer.dirtySize++;\n            }\n        }\n\n        if (!sourcePixels)\n        {\n            sourcePixels = tempRectangle;\n            sourcePixels.width = current.width;\n            sourcePixels.height = current.height;\n        }\n        if (!destPixels)\n        {\n            destPixels = sourcePixels;\n        }\n\n        const sameSize = sourcePixels.width === destPixels.width && sourcePixels.height === destPixels.height;\n\n        this.bind(framebuffer);\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo.framebuffer);\n        gl.blitFramebuffer(\n            sourcePixels.left, sourcePixels.top, sourcePixels.right, sourcePixels.bottom,\n            destPixels.left, destPixels.top, destPixels.right, destPixels.bottom,\n            gl.COLOR_BUFFER_BIT, sameSize ? gl.NEAREST : gl.LINEAR\n        );\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, framebuffer.glFramebuffers[this.CONTEXT_UID].framebuffer);\n    }\n\n    /**\n     * Disposes framebuffer.\n     * @param framebuffer - framebuffer that has to be disposed of\n     * @param contextLost - If context was lost, we suppress all delete function calls\n     */\n    disposeFramebuffer(framebuffer: Framebuffer, contextLost?: boolean): void\n    {\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n        const gl = this.gl;\n\n        if (!fbo)\n        {\n            return;\n        }\n\n        delete framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        const index = this.managedFramebuffers.indexOf(framebuffer);\n\n        if (index >= 0)\n        {\n            this.managedFramebuffers.splice(index, 1);\n        }\n\n        framebuffer.disposeRunner.remove(this);\n\n        if (!contextLost)\n        {\n            gl.deleteFramebuffer(fbo.framebuffer);\n\n            if (fbo.msaaBuffer)\n            {\n                gl.deleteRenderbuffer(fbo.msaaBuffer);\n            }\n\n            if (fbo.stencil)\n            {\n                gl.deleteRenderbuffer(fbo.stencil);\n            }\n        }\n\n        if (fbo.blitFramebuffer)\n        {\n            this.disposeFramebuffer(fbo.blitFramebuffer, contextLost);\n        }\n    }\n\n    /**\n     * Disposes all framebuffers, but not textures bound to them.\n     * @param [contextLost=false] - If context was lost, we suppress all delete function calls\n     */\n    disposeAll(contextLost?: boolean): void\n    {\n        const list = this.managedFramebuffers;\n\n        (this.managedFramebuffers as any) = [];\n\n        for (let i = 0; i < list.length; i++)\n        {\n            this.disposeFramebuffer(list[i], contextLost);\n        }\n    }\n\n    /**\n     * Forcing creation of stencil buffer for current framebuffer, if it wasn't done before.\n     * Used by MaskSystem, when its time to use stencil mask for Graphics element.\n     *\n     * Its an alternative for public lazy `framebuffer.enableStencil`, in case we need stencil without rebind.\n     * @private\n     */\n    forceStencil(): void\n    {\n        const framebuffer = this.current;\n\n        if (!framebuffer)\n        {\n            return;\n        }\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        if (!fbo || fbo.stencil)\n        {\n            return;\n        }\n\n        framebuffer.stencil = true;\n\n        const w = framebuffer.width;\n        const h = framebuffer.height;\n        const gl = this.gl;\n        const stencil = gl.createRenderbuffer();\n\n        gl.bindRenderbuffer(gl.RENDERBUFFER, stencil);\n\n        if (fbo.msaaBuffer)\n        {\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, w, h);\n        }\n        else\n        {\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, w, h);\n        }\n\n        fbo.stencil = stencil;\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, stencil);\n    }\n\n    /** Resets framebuffer stored state, binds screen framebuffer. Should be called before renderTexture reset(). */\n    reset(): void\n    {\n        this.current = this.unknownFramebuffer;\n        this.viewport = new Rectangle();\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n\nextensions.add(FramebufferSystem);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}