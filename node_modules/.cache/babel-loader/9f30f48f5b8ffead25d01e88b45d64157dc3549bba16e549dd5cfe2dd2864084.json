{"ast":null,"code":"import { ALPHA_MODES } from '@pixi/constants';\nimport { BufferResource } from './BufferResource.mjs';\nclass DepthResource extends BufferResource {\n  upload(renderer, baseTexture, glTexture) {\n    const gl = renderer.gl;\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n    const width = baseTexture.realWidth;\n    const height = baseTexture.realHeight;\n    if (glTexture.width === width && glTexture.height === height) {\n      gl.texSubImage2D(baseTexture.target, 0, 0, 0, width, height, baseTexture.format, glTexture.type, this.data);\n    } else {\n      glTexture.width = width;\n      glTexture.height = height;\n      gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, width, height, 0, baseTexture.format, glTexture.type, this.data);\n    }\n    return true;\n  }\n}\nexport { DepthResource };","map":{"version":3,"names":["DepthResource","BufferResource","upload","renderer","baseTexture","glTexture","gl","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","alphaMode","ALPHA_MODES","UNPACK","width","realWidth","height","realHeight","texSubImage2D","target","format","type","data","texImage2D","internalFormat"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\textures\\resources\\DepthResource.ts"],"sourcesContent":["import { ALPHA_MODES } from '@pixi/constants';\nimport { BufferResource } from './BufferResource';\n\nimport type { Renderer } from '../../Renderer';\nimport type { BaseTexture } from '../BaseTexture';\nimport type { GLTexture } from '../GLTexture';\n\n/**\n * Resource type for DepthTexture.\n * @memberof PIXI\n */\nexport class DepthResource extends BufferResource\n{\n    /**\n     * Upload the texture to the GPU.\n     * @param renderer - Upload to the renderer\n     * @param baseTexture - Reference to parent texture\n     * @param glTexture - glTexture\n     * @returns - true is success\n     */\n    upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture): boolean\n    {\n        const gl = renderer.gl;\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n\n        const width = baseTexture.realWidth;\n        const height = baseTexture.realHeight;\n\n        if (glTexture.width === width && glTexture.height === height)\n        {\n            gl.texSubImage2D(\n                baseTexture.target,\n                0,\n                0,\n                0,\n                width,\n                height,\n                baseTexture.format,\n                glTexture.type,\n                this.data,\n            );\n        }\n        else\n        {\n            glTexture.width = width;\n            glTexture.height = height;\n\n            gl.texImage2D(\n                baseTexture.target,\n                0,\n                glTexture.internalFormat,\n                width,\n                height,\n                0,\n                baseTexture.format,\n                glTexture.type,\n                this.data,\n            );\n        }\n\n        return true;\n    }\n}\n"],"mappings":";;AAWO,MAAMA,aAAA,SAAsBC,cACnC;EAQIC,OAAOC,QAAoB,EAAAC,WAAA,EAA0BC,SACrD;IACI,MAAMC,EAAA,GAAKH,QAAS,CAAAG,EAAA;IAEpBA,EAAA,CAAGC,WAAA,CAAYD,EAAG,CAAAE,8BAAA,EAAgCJ,WAAY,CAAAK,SAAA,KAAcC,WAAA,CAAYC,MAAM;IAE9F,MAAMC,KAAA,GAAQR,WAAY,CAAAS,SAAA;IAC1B,MAAMC,MAAA,GAASV,WAAY,CAAAW,UAAA;IAE3B,IAAIV,SAAU,CAAAO,KAAA,KAAUA,KAAS,IAAAP,SAAA,CAAUS,MAAA,KAAWA,MACtD;MACIR,EAAA,CAAGU,aACC,CAAAZ,WAAA,CAAYa,MACZ,KACA,CACA,KACAL,KACA,EAAAE,MAAA,EACAV,WAAY,CAAAc,MAAA,EACZb,SAAU,CAAAc,IAAA,EACV,KAAKC,IACT;IAAA,CAGJ;MACIf,SAAA,CAAUO,KAAQ,GAAAA,KAAA;MAClBP,SAAA,CAAUS,MAAS,GAAAA,MAAA;MAEnBR,EAAA,CAAGe,UACC,CAAAjB,WAAA,CAAYa,MACZ,KACAZ,SAAA,CAAUiB,cACV,EAAAV,KAAA,EACAE,MACA,KACAV,WAAY,CAAAc,MAAA,EACZb,SAAU,CAAAc,IAAA,EACV,KAAKC,IACT;IAAA;IAGG;EAAA;AAEf"},"metadata":{},"sourceType":"module","externalDependencies":[]}