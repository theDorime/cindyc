{"ast":null,"code":"import { ALPHA_MODES } from '@pixi/constants';\nimport { determineCrossOrigin } from '@pixi/utils';\nimport { Resource } from './Resource.mjs';\nclass BaseImageResource extends Resource {\n  constructor(source) {\n    const sourceAny = source;\n    const width = sourceAny.naturalWidth || sourceAny.videoWidth || sourceAny.width;\n    const height = sourceAny.naturalHeight || sourceAny.videoHeight || sourceAny.height;\n    super(width, height);\n    this.source = source;\n    this.noSubImage = false;\n  }\n  static crossOrigin(element, url, crossorigin) {\n    if (crossorigin === void 0 && !url.startsWith(\"data:\")) {\n      element.crossOrigin = determineCrossOrigin(url);\n    } else if (crossorigin !== false) {\n      element.crossOrigin = typeof crossorigin === \"string\" ? crossorigin : \"anonymous\";\n    }\n  }\n  upload(renderer, baseTexture, glTexture, source) {\n    const gl = renderer.gl;\n    const width = baseTexture.realWidth;\n    const height = baseTexture.realHeight;\n    source = source || this.source;\n    if (typeof HTMLImageElement !== \"undefined\" && source instanceof HTMLImageElement) {\n      if (!source.complete || source.naturalWidth === 0) {\n        return false;\n      }\n    } else if (typeof HTMLVideoElement !== \"undefined\" && source instanceof HTMLVideoElement) {\n      if (source.readyState <= 1 && source.buffered.length === 0) {\n        return false;\n      }\n    }\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n    if (!this.noSubImage && baseTexture.target === gl.TEXTURE_2D && glTexture.width === width && glTexture.height === height) {\n      gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, baseTexture.format, glTexture.type, source);\n    } else {\n      glTexture.width = width;\n      glTexture.height = height;\n      gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, baseTexture.format, glTexture.type, source);\n    }\n    return true;\n  }\n  update() {\n    if (this.destroyed) {\n      return;\n    }\n    const source = this.source;\n    const width = source.naturalWidth || source.videoWidth || source.width;\n    const height = source.naturalHeight || source.videoHeight || source.height;\n    this.resize(width, height);\n    super.update();\n  }\n  dispose() {\n    this.source = null;\n  }\n}\nexport { BaseImageResource };","map":{"version":3,"names":["BaseImageResource","Resource","constructor","source","sourceAny","width","naturalWidth","videoWidth","height","naturalHeight","videoHeight","noSubImage","crossOrigin","element","url","crossorigin","startsWith","determineCrossOrigin","upload","renderer","baseTexture","glTexture","gl","realWidth","realHeight","HTMLImageElement","complete","HTMLVideoElement","readyState","buffered","length","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","alphaMode","ALPHA_MODES","UNPACK","target","TEXTURE_2D","texSubImage2D","format","type","texImage2D","internalFormat","update","destroyed","resize","dispose"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\textures\\resources\\BaseImageResource.ts"],"sourcesContent":["import { ALPHA_MODES } from '@pixi/constants';\nimport { determineCrossOrigin } from '@pixi/utils';\nimport { Resource } from './Resource';\n\nimport type { Renderer } from '../../Renderer';\nimport type { BaseTexture, ImageSource } from '../BaseTexture';\nimport type { GLTexture } from '../GLTexture';\n\n/**\n * Base for all the image/canvas resources.\n * @memberof PIXI\n */\nexport class BaseImageResource extends Resource\n{\n    /**\n     * The source element.\n     * @member {HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas}\n     * @readonly\n     */\n    public source: ImageSource;\n\n    /**\n     * If set to `true`, will force `texImage2D` over `texSubImage2D` for uploading.\n     * Certain types of media (e.g. video) using `texImage2D` is more performant.\n     * @default false\n     * @private\n     */\n    public noSubImage: boolean;\n\n    /**\n     * @param {HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas} source\n     */\n    constructor(source: ImageSource)\n    {\n        const sourceAny = source as any;\n        const width = sourceAny.naturalWidth || sourceAny.videoWidth || sourceAny.width;\n        const height = sourceAny.naturalHeight || sourceAny.videoHeight || sourceAny.height;\n\n        super(width, height);\n\n        this.source = source;\n        this.noSubImage = false;\n    }\n\n    /**\n     * Set cross origin based detecting the url and the crossorigin\n     * @param element - Element to apply crossOrigin\n     * @param url - URL to check\n     * @param crossorigin - Cross origin value to use\n     */\n    static crossOrigin(element: HTMLImageElement | HTMLVideoElement, url: string, crossorigin?: boolean | string): void\n    {\n        if (crossorigin === undefined && !url.startsWith('data:'))\n        {\n            element.crossOrigin = determineCrossOrigin(url);\n        }\n        else if (crossorigin !== false)\n        {\n            element.crossOrigin = typeof crossorigin === 'string' ? crossorigin : 'anonymous';\n        }\n    }\n\n    /**\n     * Upload the texture to the GPU.\n     * @param renderer - Upload to the renderer\n     * @param baseTexture - Reference to parent texture\n     * @param glTexture\n     * @param {HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas} [source] - (optional)\n     * @returns - true is success\n     */\n    override upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture, source?: ImageSource): boolean\n    {\n        const gl = renderer.gl;\n        const width = baseTexture.realWidth;\n        const height = baseTexture.realHeight;\n\n        source = source || this.source;\n\n        if (typeof HTMLImageElement !== 'undefined' && source instanceof HTMLImageElement)\n        {\n            if (!source.complete || source.naturalWidth === 0)\n            {\n                return false;\n            }\n        }\n        else if (typeof HTMLVideoElement !== 'undefined' && source instanceof HTMLVideoElement)\n        {\n            if (source.readyState <= 1 && source.buffered.length === 0)\n            {\n                return false;\n            }\n        }\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n\n        if (!this.noSubImage\n            && baseTexture.target === gl.TEXTURE_2D\n            && glTexture.width === width\n            && glTexture.height === height)\n        {\n            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, baseTexture.format, glTexture.type, source);\n        }\n        else\n        {\n            glTexture.width = width;\n            glTexture.height = height;\n\n            gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, baseTexture.format, glTexture.type, source);\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks if source width/height was changed, resize can cause extra baseTexture update.\n     * Triggers one update in any case.\n     */\n    override update(): void\n    {\n        if (this.destroyed)\n        {\n            return;\n        }\n\n        const source = this.source as any;\n\n        const width = source.naturalWidth || source.videoWidth || source.width;\n        const height = source.naturalHeight || source.videoHeight || source.height;\n\n        this.resize(width, height);\n\n        super.update();\n    }\n\n    /** Destroy this {@link PIXI.BaseImageResource} */\n    override dispose(): void\n    {\n        this.source = null;\n    }\n}\n"],"mappings":";;;AAYO,MAAMA,iBAAA,SAA0BC,QACvC;EAmBIC,YAAYC,MACZ;IACI,MAAMC,SAAY,GAAAD,MAAA;IAClB,MAAME,KAAQ,GAAAD,SAAA,CAAUE,YAAgB,IAAAF,SAAA,CAAUG,UAAA,IAAcH,SAAU,CAAAC,KAAA;IAC1E,MAAMG,MAAS,GAAAJ,SAAA,CAAUK,aAAiB,IAAAL,SAAA,CAAUM,WAAA,IAAeN,SAAU,CAAAI,MAAA;IAE7E,MAAMH,KAAA,EAAOG,MAAM;IAEnB,KAAKL,MAAS,GAAAA,MAAA;IACd,KAAKQ,UAAa;EAAA;EAStB,OAAOC,YAAYC,OAA8C,EAAAC,GAAA,EAAaC,WAC9E;IACI,IAAIA,WAAA,KAAgB,KAAa,MAACD,GAAI,CAAAE,UAAA,CAAW,OAAO,CACxD;MACYH,OAAA,CAAAD,WAAA,GAAcK,oBAAA,CAAqBH,GAAG;IAAA,CAClD,UACSC,WAAA,KAAgB,KACzB;MACIF,OAAA,CAAQD,WAAc,UAAOG,WAAgB,gBAAWA,WAAc;IAAA;EAC1E;EAWJG,MAASA,CAAOC,QAAoB,EAAAC,WAAA,EAA0BC,SAAA,EAAsBlB,MACpF;IACI,MAAMmB,EAAA,GAAKH,QAAS,CAAAG,EAAA;IACpB,MAAMjB,KAAA,GAAQe,WAAY,CAAAG,SAAA;IAC1B,MAAMf,MAAA,GAASY,WAAY,CAAAI,UAAA;IAE3BrB,MAAA,GAASA,MAAA,IAAU,IAAK,CAAAA,MAAA;IAExB,IAAI,OAAOsB,gBAAA,KAAqB,WAAe,IAAAtB,MAAA,YAAkBsB,gBACjE;MACI,IAAI,CAACtB,MAAA,CAAOuB,QAAY,IAAAvB,MAAA,CAAOG,YAAA,KAAiB,CAChD;QACW;MAAA;IACX,CAEK,iBAAOqB,gBAAqB,oBAAexB,MAAA,YAAkBwB,gBACtE;MACI,IAAIxB,MAAA,CAAOyB,UAAc,SAAKzB,MAAO,CAAA0B,QAAA,CAASC,MAAA,KAAW,CACzD;QACW;MAAA;IACX;IAGJR,EAAA,CAAGS,WAAA,CAAYT,EAAG,CAAAU,8BAAA,EAAgCZ,WAAY,CAAAa,SAAA,KAAcC,WAAA,CAAYC,MAAM;IAE9F,IAAI,CAAC,KAAKxB,UACH,IAAAS,WAAA,CAAYgB,MAAW,KAAAd,EAAA,CAAGe,UAC1B,IAAAhB,SAAA,CAAUhB,KAAU,KAAAA,KAAA,IACpBgB,SAAU,CAAAb,MAAA,KAAWA,MAC5B;MACOc,EAAA,CAAAgB,aAAA,CAAchB,EAAG,CAAAe,UAAA,EAAY,CAAG,KAAG,GAAGjB,WAAY,CAAAmB,MAAA,EAAQlB,SAAU,CAAAmB,IAAA,EAAMrC,MAAM;IAAA,CAGvF;MACIkB,SAAA,CAAUhB,KAAQ,GAAAA,KAAA;MAClBgB,SAAA,CAAUb,MAAS,GAAAA,MAAA;MAEhBc,EAAA,CAAAmB,UAAA,CAAWrB,WAAY,CAAAgB,MAAA,EAAQ,CAAG,EAAAf,SAAA,CAAUqB,cAAA,EAAgBtB,WAAY,CAAAmB,MAAA,EAAQlB,SAAU,CAAAmB,IAAA,EAAMrC,MAAM;IAAA;IAGtG;EAAA;EAOXwC,MACAA,CAAA;IACI,IAAI,KAAKC,SACT;MACI;IAAA;IAGJ,MAAMzC,MAAA,GAAS,IAAK,CAAAA,MAAA;IAEpB,MAAME,KAAQ,GAAAF,MAAA,CAAOG,YAAgB,IAAAH,MAAA,CAAOI,UAAA,IAAcJ,MAAO,CAAAE,KAAA;IACjE,MAAMG,MAAS,GAAAL,MAAA,CAAOM,aAAiB,IAAAN,MAAA,CAAOO,WAAA,IAAeP,MAAO,CAAAK,MAAA;IAE/D,KAAAqC,MAAA,CAAOxC,KAAA,EAAOG,MAAM;IAEzB,MAAMmC,MAAO;EAAA;EAIjBG,OACAA,CAAA;IACI,KAAK3C,MAAS;EAAA;AAEtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}