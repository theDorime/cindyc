{"ast":null,"code":"var ExtensionType = /* @__PURE__ */(ExtensionType2 => {\n  ExtensionType2[\"Renderer\"] = \"renderer\";\n  ExtensionType2[\"Application\"] = \"application\";\n  ExtensionType2[\"RendererSystem\"] = \"renderer-webgl-system\";\n  ExtensionType2[\"RendererPlugin\"] = \"renderer-webgl-plugin\";\n  ExtensionType2[\"CanvasRendererSystem\"] = \"renderer-canvas-system\";\n  ExtensionType2[\"CanvasRendererPlugin\"] = \"renderer-canvas-plugin\";\n  ExtensionType2[\"Asset\"] = \"asset\";\n  ExtensionType2[\"LoadParser\"] = \"load-parser\";\n  ExtensionType2[\"ResolveParser\"] = \"resolve-parser\";\n  ExtensionType2[\"CacheParser\"] = \"cache-parser\";\n  ExtensionType2[\"DetectionParser\"] = \"detection-parser\";\n  return ExtensionType2;\n})(ExtensionType || {});\nconst normalizeExtension = ext => {\n  if (typeof ext === \"function\" || typeof ext === \"object\" && ext.extension) {\n    if (!ext.extension) {\n      throw new Error(\"Extension class must have an extension object\");\n    }\n    const metadata = typeof ext.extension !== \"object\" ? {\n      type: ext.extension\n    } : ext.extension;\n    ext = {\n      ...metadata,\n      ref: ext\n    };\n  }\n  if (typeof ext === \"object\") {\n    ext = {\n      ...ext\n    };\n  } else {\n    throw new Error(\"Invalid extension type\");\n  }\n  if (typeof ext.type === \"string\") {\n    ext.type = [ext.type];\n  }\n  return ext;\n};\nconst normalizePriority = (ext, defaultPriority) => normalizeExtension(ext).priority ?? defaultPriority;\nconst extensions = {\n  _addHandlers: {},\n  _removeHandlers: {},\n  _queue: {},\n  remove() {\n    for (var _len = arguments.length, extensions2 = new Array(_len), _key = 0; _key < _len; _key++) {\n      extensions2[_key] = arguments[_key];\n    }\n    extensions2.map(normalizeExtension).forEach(ext => {\n      ext.type.forEach(type => this._removeHandlers[type]?.(ext));\n    });\n    return this;\n  },\n  add() {\n    for (var _len2 = arguments.length, extensions2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      extensions2[_key2] = arguments[_key2];\n    }\n    extensions2.map(normalizeExtension).forEach(ext => {\n      ext.type.forEach(type => {\n        const handlers = this._addHandlers;\n        const queue = this._queue;\n        if (!handlers[type]) {\n          queue[type] = queue[type] || [];\n          queue[type].push(ext);\n        } else {\n          handlers[type](ext);\n        }\n      });\n    });\n    return this;\n  },\n  handle(type, onAdd, onRemove) {\n    const addHandlers = this._addHandlers;\n    const removeHandlers = this._removeHandlers;\n    if (addHandlers[type] || removeHandlers[type]) {\n      throw new Error(`Extension type ${type} already has a handler`);\n    }\n    addHandlers[type] = onAdd;\n    removeHandlers[type] = onRemove;\n    const queue = this._queue;\n    if (queue[type]) {\n      queue[type].forEach(ext => onAdd(ext));\n      delete queue[type];\n    }\n    return this;\n  },\n  handleByMap(type, map) {\n    return this.handle(type, extension => {\n      map[extension.name] = extension.ref;\n    }, extension => {\n      delete map[extension.name];\n    });\n  },\n  handleByList(type, list) {\n    let defaultPriority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    return this.handle(type, extension => {\n      if (list.includes(extension.ref)) {\n        return;\n      }\n      list.push(extension.ref);\n      list.sort((a, b) => normalizePriority(b, defaultPriority) - normalizePriority(a, defaultPriority));\n    }, extension => {\n      const index = list.indexOf(extension.ref);\n      if (index !== -1) {\n        list.splice(index, 1);\n      }\n    });\n  }\n};\nexport { ExtensionType, extensions };","map":{"version":3,"names":["ExtensionType","ExtensionType2","normalizeExtension","ext","extension","Error","metadata","type","ref","normalizePriority","defaultPriority","priority","extensions","_addHandlers","_removeHandlers","_queue","remove","_len","arguments","length","extensions2","Array","_key","map","forEach","add","_len2","_key2","handlers","queue","push","handle","onAdd","onRemove","addHandlers","removeHandlers","handleByMap","name","handleByList","list","undefined","includes","sort","a","b","index","indexOf","splice"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\extensions\\src\\index.ts"],"sourcesContent":["/**\n * Collection of valid extension types.\n * @memberof PIXI\n * @property {string} Application - Application plugins\n * @property {string} RendererPlugin - Plugins for Renderer\n * @property {string} CanvasRendererPlugin - Plugins for CanvasRenderer\n * @property {string} Loader - Plugins to use with Loader\n * @property {string} LoadParser - Parsers for Assets loader.\n * @property {string} ResolveParser - Parsers for Assets resolvers.\n * @property {string} CacheParser - Parsers for Assets cache.\n */\nenum ExtensionType\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    Renderer = 'renderer',\n    Application = 'application',\n    RendererSystem = 'renderer-webgl-system',\n    RendererPlugin = 'renderer-webgl-plugin',\n    CanvasRendererSystem = 'renderer-canvas-system',\n    CanvasRendererPlugin = 'renderer-canvas-plugin',\n    Asset = 'asset',\n    LoadParser = 'load-parser',\n    ResolveParser = 'resolve-parser',\n    CacheParser = 'cache-parser',\n    DetectionParser = 'detection-parser',\n}\n\ninterface ExtensionMetadataDetails\n{\n    type: ExtensionType | ExtensionType[];\n    name?: string;\n    priority?: number;\n}\n\ntype ExtensionMetadata = ExtensionType | ExtensionMetadataDetails;\n\n/**\n * Format when registering an extension. Generally, the extension\n * should have these values as `extension` static property,\n * but you can override name or type by providing an object.\n * @memberof PIXI\n */\ninterface ExtensionFormatLoose\n{\n    /** The extension type, can be multiple types */\n    type: ExtensionType | ExtensionType[];\n    /** Optional. Some plugins provide an API name/property, such as Renderer plugins */\n    name?: string;\n    /** Optional, used for sorting the plugins in a particular order */\n    priority?: number;\n    /** Reference to the plugin object/class */\n    ref: any;\n}\n\n/**\n * Strict extension format that is used internally for registrations.\n * @memberof PIXI\n */\ninterface ExtensionFormat extends ExtensionFormatLoose\n{\n    /** The extension type, always expressed as multiple, even if a single */\n    type: ExtensionType[];\n}\n\ntype ExtensionHandler = (extension: ExtensionFormat) => void;\n\n/**\n * Convert input into extension format data.\n * @ignore\n */\nconst normalizeExtension = (ext: ExtensionFormatLoose | any): ExtensionFormat =>\n{\n    // Class/Object submission, use extension object\n    if (typeof ext === 'function' || (typeof ext === 'object' && ext.extension))\n    {\n        // #if _DEBUG\n        if (!ext.extension)\n        {\n            throw new Error('Extension class must have an extension object');\n        }\n        // #endif\n        const metadata: ExtensionMetadataDetails = (typeof ext.extension !== 'object')\n            ? { type: ext.extension }\n            : ext.extension;\n\n        ext = { ...metadata, ref: ext };\n    }\n    if (typeof ext === 'object')\n    {\n        ext = { ...ext };\n    }\n    else\n    {\n        throw new Error('Invalid extension type');\n    }\n\n    if (typeof ext.type === 'string')\n    {\n        ext.type = [ext.type];\n    }\n\n    return ext;\n};\n\n/**\n * Get the priority for an extension.\n * @ignore\n * @param ext - Any extension\n * @param defaultPriority - Fallback priority if none is defined.\n * @returns The priority for the extension.\n */\nconst normalizePriority = (ext: ExtensionFormatLoose | any, defaultPriority: number): number =>\n    normalizeExtension(ext).priority ?? defaultPriority;\n\n/**\n * Global registration of all PixiJS extensions. One-stop-shop for extensibility.\n * @memberof PIXI\n * @namespace extensions\n */\nconst extensions = {\n\n    /** @ignore */\n    _addHandlers: {} as Record<ExtensionType, ExtensionHandler>,\n\n    /** @ignore */\n    _removeHandlers: {} as Record<ExtensionType, ExtensionHandler>,\n\n    /** @ignore */\n    _queue: {} as Record<ExtensionType, ExtensionFormat[]>,\n\n    /**\n     * Remove extensions from PixiJS.\n     * @param extensions - Extensions to be removed.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    remove(...extensions: Array<ExtensionFormatLoose | any>)\n    {\n        extensions.map(normalizeExtension).forEach((ext) =>\n        {\n            ext.type.forEach((type) => this._removeHandlers[type]?.(ext));\n        });\n\n        return this;\n    },\n\n    /**\n     * Register new extensions with PixiJS.\n     * @param extensions - The spread of extensions to add to PixiJS.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    add(...extensions: Array<ExtensionFormatLoose | any>)\n    {\n        // Handle any extensions either passed as class w/ data or as data\n        extensions.map(normalizeExtension).forEach((ext) =>\n        {\n            ext.type.forEach((type) =>\n            {\n                const handlers = this._addHandlers;\n                const queue = this._queue;\n\n                if (!handlers[type])\n                {\n                    queue[type] = queue[type] || [];\n                    queue[type].push(ext);\n                }\n                else\n                {\n                    handlers[type](ext);\n                }\n            });\n        });\n\n        return this;\n    },\n\n    /**\n     * Internal method to handle extensions by name.\n     * @param type - The extension type.\n     * @param onAdd  - Function for handling when extensions are added/registered passes {@link PIXI.ExtensionFormat}.\n     * @param onRemove  - Function for handling when extensions are removed/unregistered passes {@link PIXI.ExtensionFormat}.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handle(type: ExtensionType, onAdd: ExtensionHandler, onRemove: ExtensionHandler)\n    {\n        const addHandlers = this._addHandlers;\n        const removeHandlers = this._removeHandlers;\n\n        // #if _DEBUG\n        if (addHandlers[type] || removeHandlers[type])\n        {\n            throw new Error(`Extension type ${type} already has a handler`);\n        }\n        // #endif\n\n        addHandlers[type] = onAdd;\n        removeHandlers[type] = onRemove;\n\n        // Process the queue\n        const queue = this._queue;\n\n        // Process any plugins that have been registered before the handler\n        if (queue[type])\n        {\n            queue[type].forEach((ext) => onAdd(ext));\n            delete queue[type];\n        }\n\n        return this;\n    },\n\n    /**\n     * Handle a type, but using a map by `name` property.\n     * @param type - Type of extension to handle.\n     * @param map - The object map of named extensions.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handleByMap(type: ExtensionType, map: Record<string, any>)\n    {\n        return this.handle(type,\n            (extension) =>\n            {\n                map[extension.name] = extension.ref;\n            },\n            (extension) =>\n            {\n                delete map[extension.name];\n            }\n        );\n    },\n\n    /**\n     * Handle a type, but using a list of extensions.\n     * @param type - Type of extension to handle.\n     * @param list - The list of extensions.\n     * @param defaultPriority - The default priority to use if none is specified.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handleByList(type: ExtensionType, list: any[], defaultPriority = -1)\n    {\n        return this.handle(\n            type,\n            (extension) =>\n            {\n                if (list.includes(extension.ref))\n                {\n                    return;\n                }\n\n                list.push(extension.ref);\n                list.sort((a, b) => normalizePriority(b, defaultPriority) - normalizePriority(a, defaultPriority));\n            },\n            (extension) =>\n            {\n                const index = list.indexOf(extension.ref);\n\n                if (index !== -1)\n                {\n                    list.splice(index, 1);\n                }\n            }\n        );\n    },\n};\n\nexport {\n    extensions,\n    ExtensionType,\n};\nexport type {\n    ExtensionFormat,\n    ExtensionFormatLoose,\n    ExtensionHandler,\n    ExtensionMetadata,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}