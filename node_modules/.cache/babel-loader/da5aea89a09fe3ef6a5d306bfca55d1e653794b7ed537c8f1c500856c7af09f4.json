{"ast":null,"code":"import '../settings.mjs';\nimport { settings } from '@pixi/settings';\nfunction getResolutionOfUrl(url) {\n  let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  const resolution = settings.RETINA_PREFIX?.exec(url);\n  if (resolution) {\n    return parseFloat(resolution[1]);\n  }\n  return defaultValue;\n}\nexport { getResolutionOfUrl };","map":{"version":3,"names":["getResolutionOfUrl","url","defaultValue","arguments","length","undefined","resolution","settings","RETINA_PREFIX","exec","parseFloat"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\utils\\src\\network\\getResolutionOfUrl.ts"],"sourcesContent":["import { settings } from '../settings';\n\n/**\n * get the resolution / device pixel ratio of an asset by looking for the prefix\n * used by spritesheets and image urls\n * @memberof PIXI.utils\n * @function getResolutionOfUrl\n * @param {string} url - the image path\n * @param {number} [defaultValue=1] - the defaultValue if no filename prefix is set.\n * @returns {number} resolution / device pixel ratio of an asset\n */\nexport function getResolutionOfUrl(url: string, defaultValue = 1): number\n{\n    const resolution = settings.RETINA_PREFIX?.exec(url);\n\n    if (resolution)\n    {\n        return parseFloat(resolution[1]);\n    }\n\n    return defaultValue;\n}\n"],"mappings":";;AAWmC,SAAAA,mBAAAC,GAAA,EACnC;EAAA,IADgDC,YAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAe,CAC/D;EACI,MAAMG,UAAa,GAAAC,QAAA,CAASC,aAAe,EAAAC,IAAA,CAAKR,GAAG;EAEnD,IAAIK,UACJ;IACW,OAAAI,UAAA,CAAWJ,UAAA,CAAW,CAAE;EAAA;EAG5B,OAAAJ,YAAA;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}