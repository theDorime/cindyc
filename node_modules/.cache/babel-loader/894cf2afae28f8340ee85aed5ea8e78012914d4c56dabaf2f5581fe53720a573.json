{"ast":null,"code":"import { Matrix } from './Matrix.mjs';\nimport { ObservablePoint } from './ObservablePoint.mjs';\nconst _Transform = class {\n  constructor() {\n    this.worldTransform = new Matrix();\n    this.localTransform = new Matrix();\n    this.position = new ObservablePoint(this.onChange, this, 0, 0);\n    this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n    this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n    this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n    this._rotation = 0;\n    this._cx = 1;\n    this._sx = 0;\n    this._cy = 0;\n    this._sy = 1;\n    this._localID = 0;\n    this._currentLocalID = 0;\n    this._worldID = 0;\n    this._parentID = 0;\n  }\n  onChange() {\n    this._localID++;\n  }\n  updateSkew() {\n    this._cx = Math.cos(this._rotation + this.skew.y);\n    this._sx = Math.sin(this._rotation + this.skew.y);\n    this._cy = -Math.sin(this._rotation - this.skew.x);\n    this._sy = Math.cos(this._rotation - this.skew.x);\n    this._localID++;\n  }\n  toString() {\n    return `[@pixi/math:Transform position=(${this.position.x}, ${this.position.y}) rotation=${this.rotation} scale=(${this.scale.x}, ${this.scale.y}) skew=(${this.skew.x}, ${this.skew.y}) ]`;\n  }\n  updateLocalTransform() {\n    const lt = this.localTransform;\n    if (this._localID !== this._currentLocalID) {\n      lt.a = this._cx * this.scale.x;\n      lt.b = this._sx * this.scale.x;\n      lt.c = this._cy * this.scale.y;\n      lt.d = this._sy * this.scale.y;\n      lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n      lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n      this._currentLocalID = this._localID;\n      this._parentID = -1;\n    }\n  }\n  updateTransform(parentTransform) {\n    const lt = this.localTransform;\n    if (this._localID !== this._currentLocalID) {\n      lt.a = this._cx * this.scale.x;\n      lt.b = this._sx * this.scale.x;\n      lt.c = this._cy * this.scale.y;\n      lt.d = this._sy * this.scale.y;\n      lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n      lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n      this._currentLocalID = this._localID;\n      this._parentID = -1;\n    }\n    if (this._parentID !== parentTransform._worldID) {\n      const pt = parentTransform.worldTransform;\n      const wt = this.worldTransform;\n      wt.a = lt.a * pt.a + lt.b * pt.c;\n      wt.b = lt.a * pt.b + lt.b * pt.d;\n      wt.c = lt.c * pt.a + lt.d * pt.c;\n      wt.d = lt.c * pt.b + lt.d * pt.d;\n      wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;\n      wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;\n      this._parentID = parentTransform._worldID;\n      this._worldID++;\n    }\n  }\n  setFromMatrix(matrix) {\n    matrix.decompose(this);\n    this._localID++;\n  }\n  get rotation() {\n    return this._rotation;\n  }\n  set rotation(value) {\n    if (this._rotation !== value) {\n      this._rotation = value;\n      this.updateSkew();\n    }\n  }\n};\nlet Transform = _Transform;\nTransform.IDENTITY = new _Transform();\nexport { Transform };","map":{"version":3,"names":["_Transform","constructor","worldTransform","Matrix","localTransform","position","ObservablePoint","onChange","scale","pivot","skew","updateSkew","_rotation","_cx","_sx","_cy","_sy","_localID","_currentLocalID","_worldID","_parentID","Math","cos","y","sin","x","toString","rotation","updateLocalTransform","lt","a","b","c","d","tx","ty","updateTransform","parentTransform","pt","wt","setFromMatrix","matrix","decompose","value","Transform","IDENTITY"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\math\\src\\Transform.ts"],"sourcesContent":["import { Matrix } from './Matrix';\nimport { ObservablePoint } from './ObservablePoint';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Transform extends GlobalMixins.Transform {}\n\n/**\n * Transform that takes care about its versions.\n * @memberof PIXI\n */\nexport class Transform\n{\n    /**\n     * A default (identity) transform.\n     * @static\n     * @type {PIXI.Transform}\n     */\n    public static readonly IDENTITY = new Transform();\n\n    /** The world transformation matrix. */\n    public worldTransform: Matrix;\n\n    /** The local transformation matrix. */\n    public localTransform: Matrix;\n\n    /** The coordinate of the object relative to the local coordinates of the parent. */\n    public position: ObservablePoint;\n\n    /** The scale factor of the object. */\n    public scale: ObservablePoint;\n\n    /** The pivot point of the displayObject that it rotates around. */\n    public pivot: ObservablePoint;\n\n    /** The skew amount, on the x and y axis. */\n    public skew: ObservablePoint;\n\n    /** The locally unique ID of the parent's world transform used to calculate the current world transformation matrix. */\n    public _parentID: number;\n\n    /** The locally unique ID of the world transform. */\n    _worldID: number;\n\n    /** The rotation amount. */\n    protected _rotation: number;\n\n    /**\n     * The X-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    protected _cx: number;\n\n    /**\n     * The Y-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    protected _sx: number;\n\n    /**\n     * The X-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    protected _cy: number;\n\n    /**\n     * The Y-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    protected _sy: number;\n\n    /** The locally unique ID of the local transform. */\n    protected _localID: number;\n\n    /** The locally unique ID of the local transform used to calculate the current local transformation matrix. */\n    protected _currentLocalID: number;\n\n    constructor()\n    {\n        this.worldTransform = new Matrix();\n        this.localTransform = new Matrix();\n        this.position = new ObservablePoint(this.onChange, this, 0, 0);\n        this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n        this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n\n        this._rotation = 0;\n        this._cx = 1;\n        this._sx = 0;\n        this._cy = 0;\n        this._sy = 1;\n        this._localID = 0;\n        this._currentLocalID = 0;\n\n        this._worldID = 0;\n        this._parentID = 0;\n    }\n\n    /** Called when a value changes. */\n    protected onChange(): void\n    {\n        this._localID++;\n    }\n\n    /** Called when the skew or the rotation changes. */\n    protected updateSkew(): void\n    {\n        this._cx = Math.cos(this._rotation + this.skew.y);\n        this._sx = Math.sin(this._rotation + this.skew.y);\n        this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2\n\n        this._localID++;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Transform `\n            + `position=(${this.position.x}, ${this.position.y}) `\n            + `rotation=${this.rotation} `\n            + `scale=(${this.scale.x}, ${this.scale.y}) `\n            + `skew=(${this.skew.x}, ${this.skew.y}) `\n            + `]`;\n    }\n    // #endif\n\n    /** Updates the local transformation matrix. */\n    updateLocalTransform(): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n    }\n\n    /**\n     * Updates the local and the world transformation matrices.\n     * @param parentTransform - The parent transform\n     */\n    updateTransform(parentTransform: Transform): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n\n        if (this._parentID !== parentTransform._worldID)\n        {\n            // concat the parent matrix with the objects transform.\n            const pt = parentTransform.worldTransform;\n            const wt = this.worldTransform;\n\n            wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n            wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n            wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n            wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n            wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n            wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n\n            this._parentID = parentTransform._worldID;\n\n            // update the id of the transform..\n            this._worldID++;\n        }\n    }\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     * @param matrix - The matrix to decompose\n     */\n    setFromMatrix(matrix: Matrix): void\n    {\n        matrix.decompose(this);\n        this._localID++;\n    }\n\n    /** The rotation of the object in radians. */\n    get rotation(): number\n    {\n        return this._rotation;\n    }\n\n    set rotation(value: number)\n    {\n        if (this._rotation !== value)\n        {\n            this._rotation = value;\n            this.updateSkew();\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}