{"ast":null,"code":"import { Point, ObservablePoint, Color, BLEND_MODES, Texture, settings, utils, Rectangle } from '@pixi/core';\nimport { Container, Bounds } from '@pixi/display';\nconst tempPoint = new Point();\nconst indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\nclass Sprite extends Container {\n  constructor(texture) {\n    super();\n    this._anchor = new ObservablePoint(this._onAnchorUpdate, this, texture ? texture.defaultAnchor.x : 0, texture ? texture.defaultAnchor.y : 0);\n    this._texture = null;\n    this._width = 0;\n    this._height = 0;\n    this._tintColor = new Color(16777215);\n    this._tintRGB = null;\n    this.tint = 16777215;\n    this.blendMode = BLEND_MODES.NORMAL;\n    this._cachedTint = 16777215;\n    this.uvs = null;\n    this.texture = texture || Texture.EMPTY;\n    this.vertexData = new Float32Array(8);\n    this.vertexTrimmedData = null;\n    this._transformID = -1;\n    this._textureID = -1;\n    this._transformTrimmedID = -1;\n    this._textureTrimmedID = -1;\n    this.indices = indices;\n    this.pluginName = \"batch\";\n    this.isSprite = true;\n    this._roundPixels = settings.ROUND_PIXELS;\n  }\n  _onTextureUpdate() {\n    this._textureID = -1;\n    this._textureTrimmedID = -1;\n    this._cachedTint = 16777215;\n    if (this._width) {\n      this.scale.x = utils.sign(this.scale.x) * this._width / this._texture.orig.width;\n    }\n    if (this._height) {\n      this.scale.y = utils.sign(this.scale.y) * this._height / this._texture.orig.height;\n    }\n  }\n  _onAnchorUpdate() {\n    this._transformID = -1;\n    this._transformTrimmedID = -1;\n  }\n  calculateVertices() {\n    const texture = this._texture;\n    if (this._transformID === this.transform._worldID && this._textureID === texture._updateID) {\n      return;\n    }\n    if (this._textureID !== texture._updateID) {\n      this.uvs = this._texture._uvs.uvsFloat32;\n    }\n    this._transformID = this.transform._worldID;\n    this._textureID = texture._updateID;\n    const wt = this.transform.worldTransform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const vertexData = this.vertexData;\n    const trim = texture.trim;\n    const orig = texture.orig;\n    const anchor = this._anchor;\n    let w0 = 0;\n    let w1 = 0;\n    let h0 = 0;\n    let h1 = 0;\n    if (trim) {\n      w1 = trim.x - anchor._x * orig.width;\n      w0 = w1 + trim.width;\n      h1 = trim.y - anchor._y * orig.height;\n      h0 = h1 + trim.height;\n    } else {\n      w1 = -anchor._x * orig.width;\n      w0 = w1 + orig.width;\n      h1 = -anchor._y * orig.height;\n      h0 = h1 + orig.height;\n    }\n    vertexData[0] = a * w1 + c * h1 + tx;\n    vertexData[1] = d * h1 + b * w1 + ty;\n    vertexData[2] = a * w0 + c * h1 + tx;\n    vertexData[3] = d * h1 + b * w0 + ty;\n    vertexData[4] = a * w0 + c * h0 + tx;\n    vertexData[5] = d * h0 + b * w0 + ty;\n    vertexData[6] = a * w1 + c * h0 + tx;\n    vertexData[7] = d * h0 + b * w1 + ty;\n    if (this._roundPixels) {\n      const resolution = settings.RESOLUTION;\n      for (let i = 0; i < vertexData.length; ++i) {\n        vertexData[i] = Math.round(vertexData[i] * resolution) / resolution;\n      }\n    }\n  }\n  calculateTrimmedVertices() {\n    if (!this.vertexTrimmedData) {\n      this.vertexTrimmedData = new Float32Array(8);\n    } else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID) {\n      return;\n    }\n    this._transformTrimmedID = this.transform._worldID;\n    this._textureTrimmedID = this._texture._updateID;\n    const texture = this._texture;\n    const vertexData = this.vertexTrimmedData;\n    const orig = texture.orig;\n    const anchor = this._anchor;\n    const wt = this.transform.worldTransform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const w1 = -anchor._x * orig.width;\n    const w0 = w1 + orig.width;\n    const h1 = -anchor._y * orig.height;\n    const h0 = h1 + orig.height;\n    vertexData[0] = a * w1 + c * h1 + tx;\n    vertexData[1] = d * h1 + b * w1 + ty;\n    vertexData[2] = a * w0 + c * h1 + tx;\n    vertexData[3] = d * h1 + b * w0 + ty;\n    vertexData[4] = a * w0 + c * h0 + tx;\n    vertexData[5] = d * h0 + b * w0 + ty;\n    vertexData[6] = a * w1 + c * h0 + tx;\n    vertexData[7] = d * h0 + b * w1 + ty;\n  }\n  _render(renderer) {\n    this.calculateVertices();\n    renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n    renderer.plugins[this.pluginName].render(this);\n  }\n  _calculateBounds() {\n    const trim = this._texture.trim;\n    const orig = this._texture.orig;\n    if (!trim || trim.width === orig.width && trim.height === orig.height) {\n      this.calculateVertices();\n      this._bounds.addQuad(this.vertexData);\n    } else {\n      this.calculateTrimmedVertices();\n      this._bounds.addQuad(this.vertexTrimmedData);\n    }\n  }\n  getLocalBounds(rect) {\n    if (this.children.length === 0) {\n      if (!this._localBounds) {\n        this._localBounds = new Bounds();\n      }\n      this._localBounds.minX = this._texture.orig.width * -this._anchor._x;\n      this._localBounds.minY = this._texture.orig.height * -this._anchor._y;\n      this._localBounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n      this._localBounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n      if (!rect) {\n        if (!this._localBoundsRect) {\n          this._localBoundsRect = new Rectangle();\n        }\n        rect = this._localBoundsRect;\n      }\n      return this._localBounds.getRectangle(rect);\n    }\n    return super.getLocalBounds.call(this, rect);\n  }\n  containsPoint(point) {\n    this.worldTransform.applyInverse(point, tempPoint);\n    const width = this._texture.orig.width;\n    const height = this._texture.orig.height;\n    const x1 = -width * this.anchor.x;\n    let y1 = 0;\n    if (tempPoint.x >= x1 && tempPoint.x < x1 + width) {\n      y1 = -height * this.anchor.y;\n      if (tempPoint.y >= y1 && tempPoint.y < y1 + height) {\n        return true;\n      }\n    }\n    return false;\n  }\n  destroy(options) {\n    super.destroy(options);\n    this._texture.off(\"update\", this._onTextureUpdate, this);\n    this._anchor = null;\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyBaseTexture = typeof options === \"boolean\" ? options : options?.baseTexture;\n      this._texture.destroy(!!destroyBaseTexture);\n    }\n    this._texture = null;\n  }\n  static from(source, options) {\n    const texture = source instanceof Texture ? source : Texture.from(source, options);\n    return new Sprite(texture);\n  }\n  set roundPixels(value) {\n    if (this._roundPixels !== value) {\n      this._transformID = -1;\n    }\n    this._roundPixels = value;\n  }\n  get roundPixels() {\n    return this._roundPixels;\n  }\n  get width() {\n    return Math.abs(this.scale.x) * this._texture.orig.width;\n  }\n  set width(value) {\n    const s = utils.sign(this.scale.x) || 1;\n    this.scale.x = s * value / this._texture.orig.width;\n    this._width = value;\n  }\n  get height() {\n    return Math.abs(this.scale.y) * this._texture.orig.height;\n  }\n  set height(value) {\n    const s = utils.sign(this.scale.y) || 1;\n    this.scale.y = s * value / this._texture.orig.height;\n    this._height = value;\n  }\n  get anchor() {\n    return this._anchor;\n  }\n  set anchor(value) {\n    this._anchor.copyFrom(value);\n  }\n  get tint() {\n    return this._tintColor.value;\n  }\n  set tint(value) {\n    this._tintColor.setValue(value);\n    this._tintRGB = this._tintColor.toLittleEndianNumber();\n  }\n  get tintValue() {\n    return this._tintColor.toNumber();\n  }\n  get texture() {\n    return this._texture;\n  }\n  set texture(value) {\n    if (this._texture === value) {\n      return;\n    }\n    if (this._texture) {\n      this._texture.off(\"update\", this._onTextureUpdate, this);\n    }\n    this._texture = value || Texture.EMPTY;\n    this._cachedTint = 16777215;\n    this._textureID = -1;\n    this._textureTrimmedID = -1;\n    if (value) {\n      if (value.baseTexture.valid) {\n        this._onTextureUpdate();\n      } else {\n        value.once(\"update\", this._onTextureUpdate, this);\n      }\n    }\n  }\n}\nexport { Sprite };","map":{"version":3,"names":["tempPoint","Point","indices","Uint16Array","Sprite","Container","constructor","texture","_anchor","ObservablePoint","_onAnchorUpdate","defaultAnchor","x","y","_texture","_width","_height","_tintColor","Color","_tintRGB","tint","blendMode","BLEND_MODES","NORMAL","_cachedTint","uvs","Texture","EMPTY","vertexData","Float32Array","vertexTrimmedData","_transformID","_textureID","_transformTrimmedID","_textureTrimmedID","pluginName","isSprite","_roundPixels","settings","ROUND_PIXELS","_onTextureUpdate","scale","utils","sign","orig","width","height","calculateVertices","transform","_worldID","_updateID","_uvs","uvsFloat32","wt","worldTransform","a","b","c","d","tx","ty","trim","anchor","w0","w1","h0","h1","_x","_y","resolution","RESOLUTION","i","length","Math","round","calculateTrimmedVertices","_render","renderer","batch","setObjectRenderer","plugins","render","_calculateBounds","_bounds","addQuad","getLocalBounds","rect","children","_localBounds","Bounds","minX","minY","maxX","maxY","_localBoundsRect","Rectangle","getRectangle","call","containsPoint","point","applyInverse","x1","y1","destroy","options","off","destroyTexture","destroyBaseTexture","baseTexture","from","source","roundPixels","value","abs","s","copyFrom","setValue","toLittleEndianNumber","tintValue","toNumber","valid","once"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\sprite\\src\\Sprite.ts"],"sourcesContent":["import { BLEND_MODES, Color, ObservablePoint, Point, Rectangle, settings, Texture, utils } from '@pixi/core';\nimport { Bounds, Container } from '@pixi/display';\n\nimport type { ColorSource, IBaseTextureOptions, IPointData, Renderer, TextureSource } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\nconst tempPoint = new Point();\nconst indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\n\nexport type SpriteSource = TextureSource | Texture;\n\nexport interface Sprite extends GlobalMixins.Sprite, Container {}\n\n/**\n * The Sprite object is the base for all textured objects that are rendered to the screen\n *\n * A sprite can be created directly from an image like this:\n *\n * ```js\n * import { Sprite } from 'pixi.js';\n *\n * const sprite = Sprite.from('assets/image.png');\n * ```\n *\n * The more efficient way to create sprites is using a {@link PIXI.Spritesheet},\n * as swapping base textures when rendering to the screen is inefficient.\n *\n * ```js\n * import { Assets, Sprite } from 'pixi.js';\n *\n * const sheet = await Assets.load('assets/spritesheet.json');\n * const sprite = new Sprite(sheet.textures['image.png']);\n * ```\n * @memberof PIXI\n */\nexport class Sprite extends Container\n{\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    public blendMode: BLEND_MODES;\n    public indices: Uint16Array;\n\n    /**\n     * Plugin that is responsible for rendering this element.\n     * Allows to customize the rendering process without overriding '_render' & '_renderCanvas' methods.\n     * @default 'batch'\n     */\n    public pluginName: string;\n\n    /**\n     * The width of the sprite (this is initially set by the texture).\n     * @protected\n     */\n    _width: number;\n\n    /**\n     * The height of the sprite (this is initially set by the texture)\n     * @protected\n     */\n    _height: number;\n\n    /**\n     * The texture that the sprite is using.\n     * @private\n     */\n    _texture: Texture;\n    _textureID: number;\n\n    /**\n     * Cached tint value so we can tell when the tint is changed.\n     * Value is used for 2d CanvasRenderer.\n     * @protected\n     * @default 0xFFFFFF\n     */\n    _cachedTint: number;\n    protected _textureTrimmedID: number;\n\n    /**\n     * This is used to store the uvs data of the sprite, assigned at the same time\n     * as the vertexData in calculateVertices().\n     * @member {Float32Array}\n     */\n    protected uvs: Float32Array;\n\n    /**\n     * The anchor point defines the normalized coordinates\n     * in the texture that map to the position of this\n     * sprite.\n     *\n     * By default, this is `(0,0)` (or `texture.defaultAnchor`\n     * if you have modified that), which means the position\n     * `(x,y)` of this `Sprite` will be the top-left corner.\n     *\n     * Note: Updating `texture.defaultAnchor` after\n     * constructing a `Sprite` does _not_ update its anchor.\n     *\n     * {@link https://docs.cocos2d-x.org/cocos2d-x/en/sprites/manipulation.html}\n     * @default `this.texture.defaultAnchor`\n     */\n    protected _anchor: ObservablePoint;\n\n    /**\n     * This is used to store the vertex data of the sprite (basically a quad).\n     * @member {Float32Array}\n     */\n    protected vertexData: Float32Array;\n\n    /**\n     * This is used to calculate the bounds of the object IF it is a trimmed sprite.\n     * @member {Float32Array}\n     */\n    private vertexTrimmedData: Float32Array;\n\n    /**\n     * Internal roundPixels field\n     * @private\n     */\n    private _roundPixels: boolean;\n    private _transformID: number;\n    private _transformTrimmedID: number;\n\n    /**\n     * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    private _tintColor: Color;\n\n    // Internal-only properties\n    /**\n     * The tint applied to the sprite. This is a RGB value. A value of 0xFFFFFF will remove any tint effect.\n     * @private\n     * @default 16777215\n     */\n    _tintRGB: number;\n\n    /** @param texture - The texture for this sprite. */\n    constructor(texture?: Texture)\n    {\n        super();\n\n        this._anchor = new ObservablePoint(\n            this._onAnchorUpdate,\n            this,\n            (texture ? texture.defaultAnchor.x : 0),\n            (texture ? texture.defaultAnchor.y : 0)\n        );\n\n        this._texture = null;\n\n        this._width = 0;\n        this._height = 0;\n        this._tintColor = new Color(0xFFFFFF);\n        this._tintRGB = null;\n\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n        this._cachedTint = 0xFFFFFF;\n        this.uvs = null;\n\n        // call texture setter\n        this.texture = texture || Texture.EMPTY;\n        this.vertexData = new Float32Array(8);\n        this.vertexTrimmedData = null;\n\n        this._transformID = -1;\n        this._textureID = -1;\n\n        this._transformTrimmedID = -1;\n        this._textureTrimmedID = -1;\n\n        // Batchable stuff..\n        // TODO could make this a mixin?\n        this.indices = indices;\n\n        this.pluginName = 'batch';\n\n        /**\n         * Used to fast check if a sprite is.. a sprite!\n         * @member {boolean}\n         */\n        this.isSprite = true;\n        this._roundPixels = settings.ROUND_PIXELS;\n    }\n\n    /** When the texture is updated, this event will fire to update the scale and frame. */\n    protected _onTextureUpdate(): void\n    {\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this._cachedTint = 0xFFFFFF;\n\n        // so if _width is 0 then width was not set..\n        if (this._width)\n        {\n            this.scale.x = utils.sign(this.scale.x) * this._width / this._texture.orig.width;\n        }\n\n        if (this._height)\n        {\n            this.scale.y = utils.sign(this.scale.y) * this._height / this._texture.orig.height;\n        }\n    }\n\n    /** Called when the anchor position updates. */\n    private _onAnchorUpdate(): void\n    {\n        this._transformID = -1;\n        this._transformTrimmedID = -1;\n    }\n\n    /** Calculates worldTransform * vertices, store it in vertexData. */\n    public calculateVertices(): void\n    {\n        const texture = this._texture;\n\n        if (this._transformID === this.transform._worldID && this._textureID === texture._updateID)\n        {\n            return;\n        }\n\n        // update texture UV here, because base texture can be changed without calling `_onTextureUpdate`\n        if (this._textureID !== texture._updateID)\n        {\n            this.uvs = this._texture._uvs.uvsFloat32;\n        }\n\n        this._transformID = this.transform._worldID;\n        this._textureID = texture._updateID;\n\n        // set the vertex data\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n        const vertexData = this.vertexData;\n        const trim = texture.trim;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        if (trim)\n        {\n            // if the sprite is trimmed and is not a tilingsprite then we need to add the extra\n            // space before transforming the sprite coords.\n            w1 = trim.x - (anchor._x * orig.width);\n            w0 = w1 + trim.width;\n\n            h1 = trim.y - (anchor._y * orig.height);\n            h0 = h1 + trim.height;\n        }\n        else\n        {\n            w1 = -anchor._x * orig.width;\n            w0 = w1 + orig.width;\n\n            h1 = -anchor._y * orig.height;\n            h0 = h1 + orig.height;\n        }\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round(vertexData[i] * resolution) / resolution;\n            }\n        }\n    }\n\n    /**\n     * Calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData.\n     *\n     * This is used to ensure that the true width and height of a trimmed texture is respected.\n     */\n    public calculateTrimmedVertices(): void\n    {\n        if (!this.vertexTrimmedData)\n        {\n            this.vertexTrimmedData = new Float32Array(8);\n        }\n        else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID)\n        {\n            return;\n        }\n\n        this._transformTrimmedID = this.transform._worldID;\n        this._textureTrimmedID = this._texture._updateID;\n\n        // lets do some special trim code!\n        const texture = this._texture;\n        const vertexData = this.vertexTrimmedData;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        // lets calculate the new untrimmed bounds..\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const w1 = -anchor._x * orig.width;\n        const w0 = w1 + orig.width;\n\n        const h1 = -anchor._y * orig.height;\n        const h0 = h1 + orig.height;\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n    }\n\n    /**\n     *\n     * Renders the object using the WebGL renderer\n     * @param renderer - The webgl renderer to use.\n     */\n    protected _render(renderer: Renderer): void\n    {\n        this.calculateVertices();\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /** Updates the bounds of the sprite. */\n    protected _calculateBounds(): void\n    {\n        const trim = this._texture.trim;\n        const orig = this._texture.orig;\n\n        // First lets check to see if the current texture has a trim..\n        if (!trim || (trim.width === orig.width && trim.height === orig.height))\n        {\n            // no trim! lets use the usual calculations..\n            this.calculateVertices();\n            this._bounds.addQuad(this.vertexData);\n        }\n        else\n        {\n            // lets calculate a special trimmed bounds...\n            this.calculateTrimmedVertices();\n            this._bounds.addQuad(this.vertexTrimmedData);\n        }\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     * @param rect - Optional output rectangle.\n     * @returns The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            if (!this._localBounds)\n            {\n                this._localBounds = new Bounds();\n            }\n\n            this._localBounds.minX = this._texture.orig.width * -this._anchor._x;\n            this._localBounds.minY = this._texture.orig.height * -this._anchor._y;\n            this._localBounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n            this._localBounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._localBounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Tests if a point is inside this sprite\n     * @param point - the point to test\n     * @returns The result of the test\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._texture.orig.width;\n        const height = this._texture.orig.height;\n        const x1 = -width * this.anchor.x;\n        let y1 = 0;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            y1 = -height * this.anchor.y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy(options);\n\n        this._texture.off('update', this._onTextureUpdate, this);\n\n        this._anchor = null;\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyBaseTexture = typeof options === 'boolean' ? options : options?.baseTexture;\n\n            this._texture.destroy(!!destroyBaseTexture);\n        }\n\n        this._texture = null;\n    }\n\n    // some helper functions..\n\n    /**\n     * Helper function that creates a new sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     * @param {string|PIXI.Texture|HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas} source\n     *     - Source to create texture from\n     * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @returns The newly created sprite\n     */\n    static from(source: SpriteSource, options?: IBaseTextureOptions): Sprite\n    {\n        const texture = (source instanceof Texture)\n            ? source\n            : Texture.from(source, options);\n\n        return new Sprite(texture);\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     *\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     *\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}.\n     * @default false\n     */\n    set roundPixels(value: boolean)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        const s = utils.sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        const s = utils.sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\n     * and passed to the constructor.\n     *\n     * The default is `(0,0)`, this means the sprite's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n     *\n     * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(Texture.WHITE);\n     * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n     */\n    get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    set anchor(value: ObservablePoint)\n    {\n        this._anchor.copyFrom(value);\n    }\n\n    /**\n     * The tint applied to the sprite. This is a hex value.\n     *\n     * A value of 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    get tint(): ColorSource\n    {\n        return this._tintColor.value;\n    }\n\n    set tint(value: ColorSource)\n    {\n        this._tintColor.setValue(value);\n        this._tintRGB = this._tintColor.toLittleEndianNumber();\n    }\n\n    /**\n     * Get the tint as a RGB integer.\n     * @ignore\n     */\n    get tintValue(): number\n    {\n        return this._tintColor.toNumber();\n    }\n\n    /** The texture that the sprite is using. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        if (this._texture === value)\n        {\n            return;\n        }\n\n        if (this._texture)\n        {\n            this._texture.off('update', this._onTextureUpdate, this);\n        }\n\n        this._texture = value || Texture.EMPTY;\n        this._cachedTint = 0xFFFFFF;\n\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n\n        if (value)\n        {\n            // wait for the texture to load\n            if (value.baseTexture.valid)\n            {\n                this._onTextureUpdate();\n            }\n            else\n            {\n                value.once('update', this._onTextureUpdate, this);\n            }\n        }\n    }\n}\n"],"mappings":";;AAMA,MAAMA,SAAA,GAAY,IAAIC,KAAM;AAC5B,MAAMC,OAAA,GAAU,IAAIC,WAAA,CAAY,CAAC,GAAG,GAAG,CAAG,KAAG,CAAG,GAAC,CAAC;AA4B3C,MAAMC,MAAA,SAAeC,SAC5B;EAsGIC,YAAYC,OACZ;IACU;IAEN,KAAKC,OAAU,OAAIC,eACf,MAAKC,eAAA,EACL,IACC,EAAAH,OAAA,GAAUA,OAAQ,CAAAI,aAAA,CAAcC,CAAA,GAAI,CACpC,EAAAL,OAAA,GAAUA,OAAQ,CAAAI,aAAA,CAAcE,CAAA,GAAI,CACzC;IAEA,KAAKC,QAAW;IAEhB,KAAKC,MAAS;IACd,KAAKC,OAAU;IACV,KAAAC,UAAA,GAAa,IAAIC,KAAA,CAAM,QAAQ;IACpC,KAAKC,QAAW;IAEhB,KAAKC,IAAO;IACZ,KAAKC,SAAA,GAAYC,WAAY,CAAAC,MAAA;IAC7B,KAAKC,WAAc;IACnB,KAAKC,GAAM;IAGN,KAAAlB,OAAA,GAAUA,OAAA,IAAWmB,OAAQ,CAAAC,KAAA;IAC7B,KAAAC,UAAA,GAAa,IAAIC,YAAA,CAAa,CAAC;IACpC,KAAKC,iBAAoB;IAEzB,KAAKC,YAAe;IACpB,KAAKC,UAAa;IAElB,KAAKC,mBAAsB;IAC3B,KAAKC,iBAAoB;IAIzB,KAAKhC,OAAU,GAAAA,OAAA;IAEf,KAAKiC,UAAa;IAMlB,KAAKC,QAAW;IAChB,KAAKC,YAAA,GAAeC,QAAS,CAAAC,YAAA;EAAA;EAIjCC,gBACAA,CAAA;IACI,KAAKR,UAAa;IAClB,KAAKE,iBAAoB;IACzB,KAAKV,WAAc;IAGnB,IAAI,KAAKT,MACT;MACI,KAAK0B,KAAM,CAAA7B,CAAA,GAAI8B,KAAM,CAAAC,IAAA,CAAK,IAAK,CAAAF,KAAA,CAAM7B,CAAC,IAAI,IAAK,CAAAG,MAAA,GAAS,IAAK,CAAAD,QAAA,CAAS8B,IAAK,CAAAC,KAAA;IAAA;IAG/E,IAAI,KAAK7B,OACT;MACI,KAAKyB,KAAM,CAAA5B,CAAA,GAAI6B,KAAM,CAAAC,IAAA,CAAK,IAAK,CAAAF,KAAA,CAAM5B,CAAC,IAAI,IAAK,CAAAG,OAAA,GAAU,IAAK,CAAAF,QAAA,CAAS8B,IAAK,CAAAE,MAAA;IAAA;EAChF;EAIJpC,eACAA,CAAA;IACI,KAAKqB,YAAe;IACpB,KAAKE,mBAAsB;EAAA;EAI/Bc,iBACAA,CAAA;IACI,MAAMxC,OAAA,GAAU,IAAK,CAAAO,QAAA;IAEjB,SAAKiB,YAAA,KAAiB,IAAK,CAAAiB,SAAA,CAAUC,QAAA,IAAY,IAAK,CAAAjB,UAAA,KAAezB,OAAA,CAAQ2C,SACjF;MACI;IAAA;IAIA,SAAKlB,UAAe,KAAAzB,OAAA,CAAQ2C,SAChC;MACS,KAAAzB,GAAA,GAAM,IAAK,CAAAX,QAAA,CAASqC,IAAK,CAAAC,UAAA;IAAA;IAG7B,KAAArB,YAAA,GAAe,KAAKiB,SAAU,CAAAC,QAAA;IACnC,KAAKjB,UAAA,GAAazB,OAAQ,CAAA2C,SAAA;IAIpB,MAAAG,EAAA,GAAK,KAAKL,SAAU,CAAAM,cAAA;IAC1B,MAAMC,CAAA,GAAIF,EAAG,CAAAE,CAAA;IACb,MAAMC,CAAA,GAAIH,EAAG,CAAAG,CAAA;IACb,MAAMC,CAAA,GAAIJ,EAAG,CAAAI,CAAA;IACb,MAAMC,CAAA,GAAIL,EAAG,CAAAK,CAAA;IACb,MAAMC,EAAA,GAAKN,EAAG,CAAAM,EAAA;IACd,MAAMC,EAAA,GAAKP,EAAG,CAAAO,EAAA;IACd,MAAMhC,UAAA,GAAa,IAAK,CAAAA,UAAA;IACxB,MAAMiC,IAAA,GAAOtD,OAAQ,CAAAsD,IAAA;IACrB,MAAMjB,IAAA,GAAOrC,OAAQ,CAAAqC,IAAA;IACrB,MAAMkB,MAAA,GAAS,IAAK,CAAAtD,OAAA;IAEpB,IAAIuD,EAAK;IACT,IAAIC,EAAK;IACT,IAAIC,EAAK;IACT,IAAIC,EAAK;IAET,IAAIL,IACJ;MAGIG,EAAA,GAAKH,IAAK,CAAAjD,CAAA,GAAKkD,MAAO,CAAAK,EAAA,GAAKvB,IAAK,CAAAC,KAAA;MAChCkB,EAAA,GAAKC,EAAA,GAAKH,IAAK,CAAAhB,KAAA;MAEfqB,EAAA,GAAKL,IAAK,CAAAhD,CAAA,GAAKiD,MAAO,CAAAM,EAAA,GAAKxB,IAAK,CAAAE,MAAA;MAChCmB,EAAA,GAAKC,EAAA,GAAKL,IAAK,CAAAf,MAAA;IAAA,CAGnB;MACSkB,EAAA,IAACF,MAAO,CAAAK,EAAA,GAAKvB,IAAK,CAAAC,KAAA;MACvBkB,EAAA,GAAKC,EAAA,GAAKpB,IAAK,CAAAC,KAAA;MAEVqB,EAAA,IAACJ,MAAO,CAAAM,EAAA,GAAKxB,IAAK,CAAAE,MAAA;MACvBmB,EAAA,GAAKC,EAAA,GAAKtB,IAAK,CAAAE,MAAA;IAAA;IAInBlB,UAAA,CAAW,CAAM,IAAA2B,CAAA,GAAIS,EAAO,GAAAP,CAAA,GAAIS,EAAM,GAAAP,EAAA;IACtC/B,UAAA,CAAW,CAAM,IAAA8B,CAAA,GAAIQ,EAAO,GAAAV,CAAA,GAAIQ,EAAM,GAAAJ,EAAA;IAGtChC,UAAA,CAAW,CAAM,IAAA2B,CAAA,GAAIQ,EAAO,GAAAN,CAAA,GAAIS,EAAM,GAAAP,EAAA;IACtC/B,UAAA,CAAW,CAAM,IAAA8B,CAAA,GAAIQ,EAAO,GAAAV,CAAA,GAAIO,EAAM,GAAAH,EAAA;IAGtChC,UAAA,CAAW,CAAM,IAAA2B,CAAA,GAAIQ,EAAO,GAAAN,CAAA,GAAIQ,EAAM,GAAAN,EAAA;IACtC/B,UAAA,CAAW,CAAM,IAAA8B,CAAA,GAAIO,EAAO,GAAAT,CAAA,GAAIO,EAAM,GAAAH,EAAA;IAGtChC,UAAA,CAAW,CAAM,IAAA2B,CAAA,GAAIS,EAAO,GAAAP,CAAA,GAAIQ,EAAM,GAAAN,EAAA;IACtC/B,UAAA,CAAW,CAAM,IAAA8B,CAAA,GAAIO,EAAO,GAAAT,CAAA,GAAIQ,EAAM,GAAAJ,EAAA;IAEtC,IAAI,KAAKvB,YACT;MACI,MAAMgC,UAAA,GAAa/B,QAAS,CAAAgC,UAAA;MAE5B,SAASC,CAAA,GAAI,CAAG,EAAAA,CAAA,GAAI3C,UAAW,CAAA4C,MAAA,EAAQ,EAAED,CACzC;QACI3C,UAAA,CAAW2C,CAAA,IAAKE,IAAK,CAAAC,KAAA,CAAM9C,UAAW,CAAA2C,CAAA,IAAKF,UAAU,CAAI,GAAAA,UAAA;MAAA;IAC7D;EACJ;EAQJM,wBACAA,CAAA;IACQ,KAAC,KAAK7C,iBACV;MACS,KAAAA,iBAAA,GAAoB,IAAID,YAAA,CAAa,CAAC;IAAA,CAC/C,UACS,IAAK,CAAAI,mBAAA,KAAwB,IAAK,CAAAe,SAAA,CAAUC,QAAA,IAAY,IAAK,CAAAf,iBAAA,KAAsB,IAAK,CAAApB,QAAA,CAASoC,SAC1G;MACI;IAAA;IAGC,KAAAjB,mBAAA,GAAsB,KAAKe,SAAU,CAAAC,QAAA;IACrC,KAAAf,iBAAA,GAAoB,KAAKpB,QAAS,CAAAoC,SAAA;IAGvC,MAAM3C,OAAA,GAAU,IAAK,CAAAO,QAAA;IACrB,MAAMc,UAAA,GAAa,IAAK,CAAAE,iBAAA;IACxB,MAAMc,IAAA,GAAOrC,OAAQ,CAAAqC,IAAA;IACrB,MAAMkB,MAAA,GAAS,IAAK,CAAAtD,OAAA;IAGd,MAAA6C,EAAA,GAAK,KAAKL,SAAU,CAAAM,cAAA;IAC1B,MAAMC,CAAA,GAAIF,EAAG,CAAAE,CAAA;IACb,MAAMC,CAAA,GAAIH,EAAG,CAAAG,CAAA;IACb,MAAMC,CAAA,GAAIJ,EAAG,CAAAI,CAAA;IACb,MAAMC,CAAA,GAAIL,EAAG,CAAAK,CAAA;IACb,MAAMC,EAAA,GAAKN,EAAG,CAAAM,EAAA;IACd,MAAMC,EAAA,GAAKP,EAAG,CAAAO,EAAA;IAEd,MAAMI,EAAK,IAACF,MAAO,CAAAK,EAAA,GAAKvB,IAAK,CAAAC,KAAA;IACvB,MAAAkB,EAAA,GAAKC,EAAA,GAAKpB,IAAK,CAAAC,KAAA;IAErB,MAAMqB,EAAK,IAACJ,MAAO,CAAAM,EAAA,GAAKxB,IAAK,CAAAE,MAAA;IACvB,MAAAmB,EAAA,GAAKC,EAAA,GAAKtB,IAAK,CAAAE,MAAA;IAGrBlB,UAAA,CAAW,CAAM,IAAA2B,CAAA,GAAIS,EAAO,GAAAP,CAAA,GAAIS,EAAM,GAAAP,EAAA;IACtC/B,UAAA,CAAW,CAAM,IAAA8B,CAAA,GAAIQ,EAAO,GAAAV,CAAA,GAAIQ,EAAM,GAAAJ,EAAA;IAGtChC,UAAA,CAAW,CAAM,IAAA2B,CAAA,GAAIQ,EAAO,GAAAN,CAAA,GAAIS,EAAM,GAAAP,EAAA;IACtC/B,UAAA,CAAW,CAAM,IAAA8B,CAAA,GAAIQ,EAAO,GAAAV,CAAA,GAAIO,EAAM,GAAAH,EAAA;IAGtChC,UAAA,CAAW,CAAM,IAAA2B,CAAA,GAAIQ,EAAO,GAAAN,CAAA,GAAIQ,EAAM,GAAAN,EAAA;IACtC/B,UAAA,CAAW,CAAM,IAAA8B,CAAA,GAAIO,EAAO,GAAAT,CAAA,GAAIO,EAAM,GAAAH,EAAA;IAGtChC,UAAA,CAAW,CAAM,IAAA2B,CAAA,GAAIS,EAAO,GAAAP,CAAA,GAAIQ,EAAM,GAAAN,EAAA;IACtC/B,UAAA,CAAW,CAAM,IAAA8B,CAAA,GAAIO,EAAO,GAAAT,CAAA,GAAIQ,EAAM,GAAAJ,EAAA;EAAA;EAQhCgB,QAAQC,QAClB;IACI,KAAK9B,iBAAkB;IAEvB8B,QAAA,CAASC,KAAM,CAAAC,iBAAA,CAAkBF,QAAS,CAAAG,OAAA,CAAQ,KAAK7C,UAAW;IAClE0C,QAAA,CAASG,OAAQ,MAAK7C,UAAY,EAAA8C,MAAA,CAAO,IAAI;EAAA;EAIjDC,gBACAA,CAAA;IACU,MAAArB,IAAA,GAAO,KAAK/C,QAAS,CAAA+C,IAAA;IACrB,MAAAjB,IAAA,GAAO,KAAK9B,QAAS,CAAA8B,IAAA;IAGvB,KAACiB,IAAA,IAASA,IAAK,CAAAhB,KAAA,KAAUD,IAAA,CAAKC,KAAS,IAAAgB,IAAA,CAAKf,MAAW,KAAAF,IAAA,CAAKE,MAChE;MAEI,KAAKC,iBAAkB;MAClB,KAAAoC,OAAA,CAAQC,OAAQ,MAAKxD,UAAU;IAAA,CAGxC;MAEI,KAAK+C,wBAAyB;MACzB,KAAAQ,OAAA,CAAQC,OAAQ,MAAKtD,iBAAiB;IAAA;EAC/C;EAQGuD,eAAeC,IACtB;IAEQ,SAAKC,QAAS,CAAAf,MAAA,KAAW,CAC7B;MACQ,KAAC,KAAKgB,YACV;QACS,KAAAA,YAAA,GAAe,IAAIC,MAAO;MAAA;MAG9B,KAAAD,YAAA,CAAaE,IAAA,GAAO,IAAK,CAAA5E,QAAA,CAAS8B,IAAA,CAAKC,KAAQ,IAAC,KAAKrC,OAAQ,CAAA2D,EAAA;MAC7D,KAAAqB,YAAA,CAAaG,IAAA,GAAO,IAAK,CAAA7E,QAAA,CAAS8B,IAAA,CAAKE,MAAS,IAAC,KAAKtC,OAAQ,CAAA4D,EAAA;MAC9D,KAAAoB,YAAA,CAAaI,IAAA,GAAO,IAAK,CAAA9E,QAAA,CAAS8B,IAAA,CAAKC,KAAS,QAAI,KAAKrC,OAAQ,CAAA2D,EAAA;MACjE,KAAAqB,YAAA,CAAaK,IAAA,GAAO,IAAK,CAAA/E,QAAA,CAAS8B,IAAA,CAAKE,MAAU,QAAI,KAAKtC,OAAQ,CAAA4D,EAAA;MAEvE,IAAI,CAACkB,IACL;QACQ,KAAC,KAAKQ,gBACV;UACS,KAAAA,gBAAA,GAAmB,IAAIC,SAAU;QAAA;QAG1CT,IAAA,GAAO,IAAK,CAAAQ,gBAAA;MAAA;MAGT,YAAKN,YAAa,CAAAQ,YAAA,CAAaV,IAAI;IAAA;IAG9C,OAAO,KAAM,CAAAD,cAAA,CAAeY,IAAK,OAAMX,IAAI;EAAA;EAQxCY,cAAcC,KACrB;IACS,KAAA7C,cAAA,CAAe8C,YAAa,CAAAD,KAAA,EAAOnG,SAAS;IAE3C,MAAA6C,KAAA,GAAQ,IAAK,CAAA/B,QAAA,CAAS8B,IAAK,CAAAC,KAAA;IAC3B,MAAAC,MAAA,GAAS,IAAK,CAAAhC,QAAA,CAAS8B,IAAK,CAAAE,MAAA;IAClC,MAAMuD,EAAK,IAACxD,KAAQ,QAAKiB,MAAO,CAAAlD,CAAA;IAChC,IAAI0F,EAAK;IAET,IAAItG,SAAA,CAAUY,CAAK,IAAAyF,EAAA,IAAMrG,SAAU,CAAAY,CAAA,GAAIyF,EAAA,GAAKxD,KAC5C;MACSyD,EAAA,IAACxD,MAAS,QAAKgB,MAAO,CAAAjD,CAAA;MAE3B,IAAIb,SAAA,CAAUa,CAAK,IAAAyF,EAAA,IAAMtG,SAAU,CAAAa,CAAA,GAAIyF,EAAA,GAAKxD,MAC5C;QACW;MAAA;IACX;IAGG;EAAA;EAYJyD,QAAQC,OACf;IACI,MAAMD,OAAA,CAAQC,OAAO;IAErB,KAAK1F,QAAS,CAAA2F,GAAA,CAAI,QAAU,OAAKjE,gBAAA,EAAkB,IAAI;IAEvD,KAAKhC,OAAU;IAEf,MAAMkG,cAAiB,UAAOF,OAAY,iBAAYA,OAAA,GAAUA,OAAS,EAAAjG,OAAA;IAEzE,IAAImG,cACJ;MACI,MAAMC,kBAAqB,UAAOH,OAAY,iBAAYA,OAAA,GAAUA,OAAS,EAAAI,WAAA;MAE7E,KAAK9F,QAAS,CAAAyF,OAAA,CAAQ,CAAC,CAACI,kBAAkB;IAAA;IAG9C,KAAK7F,QAAW;EAAA;EAapB,OAAO+F,IAAKA,CAAAC,MAAA,EAAsBN,OAClC;IACI,MAAMjG,OAAA,GAAWuG,MAAkB,YAAApF,OAAA,GAC7BoF,MAAA,GACApF,OAAQ,CAAAmF,IAAA,CAAKC,MAAA,EAAQN,OAAO;IAE3B,WAAIpG,MAAA,CAAOG,OAAO;EAAA;EAY7B,IAAIwG,YAAYC,KAChB;IACQ,SAAK3E,YAAA,KAAiB2E,KAC1B;MACI,KAAKjF,YAAe;IAAA;IAExB,KAAKM,YAAe,GAAA2E,KAAA;EAAA;EAGxB,IAAID,WACJA,CAAA;IACI,OAAO,IAAK,CAAA1E,YAAA;EAAA;EAIhB,IAAIQ,KACJA,CAAA;IACW,OAAA4B,IAAA,CAAKwC,GAAA,CAAI,IAAK,CAAAxE,KAAA,CAAM7B,CAAC,CAAI,QAAKE,QAAA,CAAS8B,IAAK,CAAAC,KAAA;EAAA;EAGvD,IAAIA,MAAMmE,KACV;IACI,MAAME,CAAA,GAAIxE,KAAM,CAAAC,IAAA,CAAK,IAAK,CAAAF,KAAA,CAAM7B,CAAC,CAAK;IAEtC,KAAK6B,KAAA,CAAM7B,CAAI,GAAAsG,CAAA,GAAIF,KAAQ,QAAKlG,QAAA,CAAS8B,IAAK,CAAAC,KAAA;IAC9C,KAAK9B,MAAS,GAAAiG,KAAA;EAAA;EAIlB,IAAIlE,MACJA,CAAA;IACW,OAAA2B,IAAA,CAAKwC,GAAA,CAAI,IAAK,CAAAxE,KAAA,CAAM5B,CAAC,CAAI,QAAKC,QAAA,CAAS8B,IAAK,CAAAE,MAAA;EAAA;EAGvD,IAAIA,OAAOkE,KACX;IACI,MAAME,CAAA,GAAIxE,KAAM,CAAAC,IAAA,CAAK,IAAK,CAAAF,KAAA,CAAM5B,CAAC,CAAK;IAEtC,KAAK4B,KAAA,CAAM5B,CAAI,GAAAqG,CAAA,GAAIF,KAAQ,QAAKlG,QAAA,CAAS8B,IAAK,CAAAE,MAAA;IAC9C,KAAK9B,OAAU,GAAAgG,KAAA;EAAA;EAoBnB,IAAIlD,MACJA,CAAA;IACI,OAAO,IAAK,CAAAtD,OAAA;EAAA;EAGhB,IAAIsD,OAAOkD,KACX;IACS,KAAAxG,OAAA,CAAQ2G,QAAA,CAASH,KAAK;EAAA;EAS/B,IAAI5F,IACJA,CAAA;IACI,OAAO,KAAKH,UAAW,CAAA+F,KAAA;EAAA;EAG3B,IAAI5F,KAAK4F,KACT;IACS,KAAA/F,UAAA,CAAWmG,QAAA,CAASJ,KAAK;IACzB,KAAA7F,QAAA,GAAW,IAAK,CAAAF,UAAA,CAAWoG,oBAAqB;EAAA;EAOzD,IAAIC,SACJA,CAAA;IACW,YAAKrG,UAAA,CAAWsG,QAAS;EAAA;EAIpC,IAAIhH,OACJA,CAAA;IACI,OAAO,IAAK,CAAAO,QAAA;EAAA;EAGhB,IAAIP,QAAQyG,KACZ;IACQ,SAAKlG,QAAA,KAAakG,KACtB;MACI;IAAA;IAGJ,IAAI,KAAKlG,QACT;MACI,KAAKA,QAAS,CAAA2F,GAAA,CAAI,QAAU,OAAKjE,gBAAA,EAAkB,IAAI;IAAA;IAGtD,KAAA1B,QAAA,GAAWkG,KAAA,IAAStF,OAAQ,CAAAC,KAAA;IACjC,KAAKH,WAAc;IAEnB,KAAKQ,UAAa;IAClB,KAAKE,iBAAoB;IAEzB,IAAI8E,KACJ;MAEQ,IAAAA,KAAA,CAAMJ,WAAA,CAAYY,KACtB;QACI,KAAKhF,gBAAiB;MAAA,CAG1B;QACIwE,KAAA,CAAMS,IAAK,WAAU,IAAK,CAAAjF,gBAAA,EAAkB,IAAI;MAAA;IACpD;EACJ;AAER"},"metadata":{},"sourceType":"module","externalDependencies":[]}