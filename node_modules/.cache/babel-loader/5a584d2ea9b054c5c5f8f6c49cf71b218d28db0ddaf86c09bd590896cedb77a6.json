{"ast":null,"code":"const vertTemplate = `\n    attribute vec2 aVertexPosition;\n\n    uniform mat3 projectionMatrix;\n\n    uniform float strength;\n\n    varying vec2 vBlurTexCoords[%size%];\n\n    uniform vec4 inputSize;\n    uniform vec4 outputFrame;\n\n    vec4 filterVertexPosition( void )\n    {\n        vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n        return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n    }\n\n    vec2 filterTextureCoord( void )\n    {\n        return aVertexPosition * (outputFrame.zw * inputSize.zw);\n    }\n\n    void main(void)\n    {\n        gl_Position = filterVertexPosition();\n\n        vec2 textureCoord = filterTextureCoord();\n        %blur%\n    }`;\nfunction generateBlurVertSource(kernelSize, x) {\n  const halfLength = Math.ceil(kernelSize / 2);\n  let vertSource = vertTemplate;\n  let blurLoop = \"\";\n  let template;\n  if (x) {\n    template = \"vBlurTexCoords[%index%] =  textureCoord + vec2(%sampleIndex% * strength, 0.0);\";\n  } else {\n    template = \"vBlurTexCoords[%index%] =  textureCoord + vec2(0.0, %sampleIndex% * strength);\";\n  }\n  for (let i = 0; i < kernelSize; i++) {\n    let blur = template.replace(\"%index%\", i.toString());\n    blur = blur.replace(\"%sampleIndex%\", `${i - (halfLength - 1)}.0`);\n    blurLoop += blur;\n    blurLoop += \"\\n\";\n  }\n  vertSource = vertSource.replace(\"%blur%\", blurLoop);\n  vertSource = vertSource.replace(\"%size%\", kernelSize.toString());\n  return vertSource;\n}\nexport { generateBlurVertSource };","map":{"version":3,"names":["vertTemplate","generateBlurVertSource","kernelSize","x","halfLength","Math","ceil","vertSource","blurLoop","template","i","blur","replace","toString"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\filter-blur\\src\\generateBlurVertSource.ts"],"sourcesContent":["const vertTemplate = `\n    attribute vec2 aVertexPosition;\n\n    uniform mat3 projectionMatrix;\n\n    uniform float strength;\n\n    varying vec2 vBlurTexCoords[%size%];\n\n    uniform vec4 inputSize;\n    uniform vec4 outputFrame;\n\n    vec4 filterVertexPosition( void )\n    {\n        vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n        return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n    }\n\n    vec2 filterTextureCoord( void )\n    {\n        return aVertexPosition * (outputFrame.zw * inputSize.zw);\n    }\n\n    void main(void)\n    {\n        gl_Position = filterVertexPosition();\n\n        vec2 textureCoord = filterTextureCoord();\n        %blur%\n    }`;\n\nexport function generateBlurVertSource(kernelSize: number, x: boolean): string\n{\n    const halfLength = Math.ceil(kernelSize / 2);\n\n    let vertSource = vertTemplate;\n\n    let blurLoop = '';\n    let template;\n\n    if (x)\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(%sampleIndex% * strength, 0.0);';\n    }\n    else\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(0.0, %sampleIndex% * strength);';\n    }\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i.toString());\n\n        blur = blur.replace('%sampleIndex%', `${i - (halfLength - 1)}.0`);\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    vertSource = vertSource.replace('%blur%', blurLoop);\n    vertSource = vertSource.replace('%size%', kernelSize.toString());\n\n    return vertSource;\n}\n"],"mappings":"AAAA,MAAMA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCd,SAAAC,uBAAgCC,UAAA,EAAoBC,CAC3D;EACI,MAAMC,UAAa,GAAAC,IAAA,CAAKC,IAAK,CAAAJ,UAAA,GAAa,CAAC;EAE3C,IAAIK,UAAa,GAAAP,YAAA;EAEjB,IAAIQ,QAAW;EACX,IAAAC,QAAA;EAEJ,IAAIN,CACJ;IACeM,QAAA;EAAA,CAGf;IACeA,QAAA;EAAA;EAGf,SAASC,CAAI,MAAGA,CAAI,GAAAR,UAAA,EAAYQ,CAChC;IACI,IAAIC,IAAA,GAAOF,QAAS,CAAAG,OAAA,CAAQ,SAAW,EAAAF,CAAA,CAAEG,QAAA,EAAU;IAEnDF,IAAA,GAAOA,IAAA,CAAKC,OAAQ,kBAAoB,GAAAF,CAAA,IAAAN,UAAA,GAAkB,CAAM;IAEpDI,QAAA,IAAAG,IAAA;IACAH,QAAA;EAAA;EAGHD,UAAA,GAAAA,UAAA,CAAWK,OAAQ,WAAUJ,QAAQ;EAClDD,UAAA,GAAaA,UAAW,CAAAK,OAAA,CAAQ,QAAU,EAAAV,UAAA,CAAWW,QAAA,EAAU;EAExD,OAAAN,UAAA;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}