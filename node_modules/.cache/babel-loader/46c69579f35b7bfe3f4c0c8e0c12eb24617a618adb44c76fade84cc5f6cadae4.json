{"ast":null,"code":"import { settings } from '@pixi/core';\nconst contextSettings = {\n  willReadFrequently: true\n};\nconst _TextMetrics = class {\n  static get experimentalLetterSpacingSupported() {\n    let result = _TextMetrics._experimentalLetterSpacingSupported;\n    if (result !== void 0) {\n      const proto = settings.ADAPTER.getCanvasRenderingContext2D().prototype;\n      result = _TextMetrics._experimentalLetterSpacingSupported = \"letterSpacing\" in proto || \"textLetterSpacing\" in proto;\n    }\n    return result;\n  }\n  constructor(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties) {\n    this.text = text;\n    this.style = style;\n    this.width = width;\n    this.height = height;\n    this.lines = lines;\n    this.lineWidths = lineWidths;\n    this.lineHeight = lineHeight;\n    this.maxLineWidth = maxLineWidth;\n    this.fontProperties = fontProperties;\n  }\n  static measureText(text, style, wordWrap) {\n    let canvas = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _TextMetrics._canvas;\n    wordWrap = wordWrap === void 0 || wordWrap === null ? style.wordWrap : wordWrap;\n    const font = style.toFontString();\n    const fontProperties = _TextMetrics.measureFont(font);\n    if (fontProperties.fontSize === 0) {\n      fontProperties.fontSize = style.fontSize;\n      fontProperties.ascent = style.fontSize;\n    }\n    const context = canvas.getContext(\"2d\", contextSettings);\n    context.font = font;\n    const outputText = wordWrap ? _TextMetrics.wordWrap(text, style, canvas) : text;\n    const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n    const lineWidths = new Array(lines.length);\n    let maxLineWidth = 0;\n    for (let i = 0; i < lines.length; i++) {\n      const lineWidth = _TextMetrics._measureText(lines[i], style.letterSpacing, context);\n      lineWidths[i] = lineWidth;\n      maxLineWidth = Math.max(maxLineWidth, lineWidth);\n    }\n    let width = maxLineWidth + style.strokeThickness;\n    if (style.dropShadow) {\n      width += style.dropShadowDistance;\n    }\n    const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n    let height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness * 2) + (lines.length - 1) * (lineHeight + style.leading);\n    if (style.dropShadow) {\n      height += style.dropShadowDistance;\n    }\n    return new _TextMetrics(text, style, width, height, lines, lineWidths, lineHeight + style.leading, maxLineWidth, fontProperties);\n  }\n  static _measureText(text, letterSpacing, context) {\n    let useExperimentalLetterSpacing = false;\n    if (_TextMetrics.experimentalLetterSpacingSupported) {\n      if (_TextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    let width = context.measureText(text).width;\n    if (width > 0) {\n      if (useExperimentalLetterSpacing) {\n        width -= letterSpacing;\n      } else {\n        width += (_TextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n      }\n    }\n    return width;\n  }\n  static wordWrap(text, style) {\n    let canvas = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _TextMetrics._canvas;\n    const context = canvas.getContext(\"2d\", contextSettings);\n    let width = 0;\n    let line = \"\";\n    let lines = \"\";\n    const cache = /* @__PURE__ */Object.create(null);\n    const {\n      letterSpacing,\n      whiteSpace\n    } = style;\n    const collapseSpaces = _TextMetrics.collapseSpaces(whiteSpace);\n    const collapseNewlines = _TextMetrics.collapseNewlines(whiteSpace);\n    let canPrependSpaces = !collapseSpaces;\n    const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n    const tokens = _TextMetrics.tokenize(text);\n    for (let i = 0; i < tokens.length; i++) {\n      let token = tokens[i];\n      if (_TextMetrics.isNewline(token)) {\n        if (!collapseNewlines) {\n          lines += _TextMetrics.addLine(line);\n          canPrependSpaces = !collapseSpaces;\n          line = \"\";\n          width = 0;\n          continue;\n        }\n        token = \" \";\n      }\n      if (collapseSpaces) {\n        const currIsBreakingSpace = _TextMetrics.isBreakingSpace(token);\n        const lastIsBreakingSpace = _TextMetrics.isBreakingSpace(line[line.length - 1]);\n        if (currIsBreakingSpace && lastIsBreakingSpace) {\n          continue;\n        }\n      }\n      const tokenWidth = _TextMetrics.getFromCache(token, letterSpacing, cache, context);\n      if (tokenWidth > wordWrapWidth) {\n        if (line !== \"\") {\n          lines += _TextMetrics.addLine(line);\n          line = \"\";\n          width = 0;\n        }\n        if (_TextMetrics.canBreakWords(token, style.breakWords)) {\n          const characters = _TextMetrics.wordWrapSplit(token);\n          for (let j = 0; j < characters.length; j++) {\n            let char = characters[j];\n            let lastChar = char;\n            let k = 1;\n            while (characters[j + k]) {\n              const nextChar = characters[j + k];\n              if (!_TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords)) {\n                char += nextChar;\n              } else {\n                break;\n              }\n              lastChar = nextChar;\n              k++;\n            }\n            j += k - 1;\n            const characterWidth = _TextMetrics.getFromCache(char, letterSpacing, cache, context);\n            if (characterWidth + width > wordWrapWidth) {\n              lines += _TextMetrics.addLine(line);\n              canPrependSpaces = false;\n              line = \"\";\n              width = 0;\n            }\n            line += char;\n            width += characterWidth;\n          }\n        } else {\n          if (line.length > 0) {\n            lines += _TextMetrics.addLine(line);\n            line = \"\";\n            width = 0;\n          }\n          const isLastToken = i === tokens.length - 1;\n          lines += _TextMetrics.addLine(token, !isLastToken);\n          canPrependSpaces = false;\n          line = \"\";\n          width = 0;\n        }\n      } else {\n        if (tokenWidth + width > wordWrapWidth) {\n          canPrependSpaces = false;\n          lines += _TextMetrics.addLine(line);\n          line = \"\";\n          width = 0;\n        }\n        if (line.length > 0 || !_TextMetrics.isBreakingSpace(token) || canPrependSpaces) {\n          line += token;\n          width += tokenWidth;\n        }\n      }\n    }\n    lines += _TextMetrics.addLine(line, false);\n    return lines;\n  }\n  static addLine(line) {\n    let newLine = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    line = _TextMetrics.trimRight(line);\n    line = newLine ? `${line}\n` : line;\n    return line;\n  }\n  static getFromCache(key, letterSpacing, cache, context) {\n    let width = cache[key];\n    if (typeof width !== \"number\") {\n      width = _TextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n      cache[key] = width;\n    }\n    return width;\n  }\n  static collapseSpaces(whiteSpace) {\n    return whiteSpace === \"normal\" || whiteSpace === \"pre-line\";\n  }\n  static collapseNewlines(whiteSpace) {\n    return whiteSpace === \"normal\";\n  }\n  static trimRight(text) {\n    if (typeof text !== \"string\") {\n      return \"\";\n    }\n    for (let i = text.length - 1; i >= 0; i--) {\n      const char = text[i];\n      if (!_TextMetrics.isBreakingSpace(char)) {\n        break;\n      }\n      text = text.slice(0, -1);\n    }\n    return text;\n  }\n  static isNewline(char) {\n    if (typeof char !== \"string\") {\n      return false;\n    }\n    return _TextMetrics._newlines.includes(char.charCodeAt(0));\n  }\n  static isBreakingSpace(char, _nextChar) {\n    if (typeof char !== \"string\") {\n      return false;\n    }\n    return _TextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n  }\n  static tokenize(text) {\n    const tokens = [];\n    let token = \"\";\n    if (typeof text !== \"string\") {\n      return tokens;\n    }\n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n      const nextChar = text[i + 1];\n      if (_TextMetrics.isBreakingSpace(char, nextChar) || _TextMetrics.isNewline(char)) {\n        if (token !== \"\") {\n          tokens.push(token);\n          token = \"\";\n        }\n        tokens.push(char);\n        continue;\n      }\n      token += char;\n    }\n    if (token !== \"\") {\n      tokens.push(token);\n    }\n    return tokens;\n  }\n  static canBreakWords(_token, breakWords) {\n    return breakWords;\n  }\n  static canBreakChars(_char, _nextChar, _token, _index, _breakWords) {\n    return true;\n  }\n  static wordWrapSplit(token) {\n    return _TextMetrics.graphemeSegmenter(token);\n  }\n  static measureFont(font) {\n    if (_TextMetrics._fonts[font]) {\n      return _TextMetrics._fonts[font];\n    }\n    const properties = {\n      ascent: 0,\n      descent: 0,\n      fontSize: 0\n    };\n    const canvas = _TextMetrics._canvas;\n    const context = _TextMetrics._context;\n    context.font = font;\n    const metricsString = _TextMetrics.METRICS_STRING + _TextMetrics.BASELINE_SYMBOL;\n    const width = Math.ceil(context.measureText(metricsString).width);\n    let baseline = Math.ceil(context.measureText(_TextMetrics.BASELINE_SYMBOL).width);\n    const height = Math.ceil(_TextMetrics.HEIGHT_MULTIPLIER * baseline);\n    baseline = baseline * _TextMetrics.BASELINE_MULTIPLIER | 0;\n    if (width === 0 || height === 0) {\n      _TextMetrics._fonts[font] = properties;\n      return properties;\n    }\n    canvas.width = width;\n    canvas.height = height;\n    context.fillStyle = \"#f00\";\n    context.fillRect(0, 0, width, height);\n    context.font = font;\n    context.textBaseline = \"alphabetic\";\n    context.fillStyle = \"#000\";\n    context.fillText(metricsString, 0, baseline);\n    const imagedata = context.getImageData(0, 0, width, height).data;\n    const pixels = imagedata.length;\n    const line = width * 4;\n    let i = 0;\n    let idx = 0;\n    let stop = false;\n    for (i = 0; i < baseline; ++i) {\n      for (let j = 0; j < line; j += 4) {\n        if (imagedata[idx + j] !== 255) {\n          stop = true;\n          break;\n        }\n      }\n      if (!stop) {\n        idx += line;\n      } else {\n        break;\n      }\n    }\n    properties.ascent = baseline - i;\n    idx = pixels - line;\n    stop = false;\n    for (i = height; i > baseline; --i) {\n      for (let j = 0; j < line; j += 4) {\n        if (imagedata[idx + j] !== 255) {\n          stop = true;\n          break;\n        }\n      }\n      if (!stop) {\n        idx -= line;\n      } else {\n        break;\n      }\n    }\n    properties.descent = i - baseline;\n    properties.fontSize = properties.ascent + properties.descent;\n    _TextMetrics._fonts[font] = properties;\n    return properties;\n  }\n  static clearMetrics() {\n    let font = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    if (font) {\n      delete _TextMetrics._fonts[font];\n    } else {\n      _TextMetrics._fonts = {};\n    }\n  }\n  static get _canvas() {\n    if (!_TextMetrics.__canvas) {\n      let canvas;\n      try {\n        const c = new OffscreenCanvas(0, 0);\n        const context = c.getContext(\"2d\", contextSettings);\n        if (context?.measureText) {\n          _TextMetrics.__canvas = c;\n          return c;\n        }\n        canvas = settings.ADAPTER.createCanvas();\n      } catch (ex) {\n        canvas = settings.ADAPTER.createCanvas();\n      }\n      canvas.width = canvas.height = 10;\n      _TextMetrics.__canvas = canvas;\n    }\n    return _TextMetrics.__canvas;\n  }\n  static get _context() {\n    if (!_TextMetrics.__context) {\n      _TextMetrics.__context = _TextMetrics._canvas.getContext(\"2d\", contextSettings);\n    }\n    return _TextMetrics.__context;\n  }\n};\nlet TextMetrics = _TextMetrics;\nTextMetrics.METRICS_STRING = \"|\\xC9q\\xC5\";\nTextMetrics.BASELINE_SYMBOL = \"M\";\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\nTextMetrics.HEIGHT_MULTIPLIER = 2;\nTextMetrics.graphemeSegmenter = (() => {\n  if (typeof Intl?.Segmenter === \"function\") {\n    const segmenter = new Intl.Segmenter();\n    return s => [...segmenter.segment(s)].map(x => x.segment);\n  }\n  return s => [...s];\n})();\nTextMetrics.experimentalLetterSpacing = false;\nTextMetrics._fonts = {};\nTextMetrics._newlines = [10, 13];\nTextMetrics._breakingSpaces = [9, 32, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8200, 8201, 8202, 8287, 12288];\nexport { TextMetrics };","map":{"version":3,"names":["contextSettings","willReadFrequently","_TextMetrics","experimentalLetterSpacingSupported","result","_experimentalLetterSpacingSupported","proto","settings","ADAPTER","getCanvasRenderingContext2D","prototype","constructor","text","style","width","height","lines","lineWidths","lineHeight","maxLineWidth","fontProperties","measureText","wordWrap","canvas","arguments","length","undefined","_canvas","font","toFontString","measureFont","fontSize","ascent","context","getContext","outputText","split","Array","i","lineWidth","_measureText","letterSpacing","Math","max","strokeThickness","dropShadow","dropShadowDistance","leading","useExperimentalLetterSpacing","experimentalLetterSpacing","textLetterSpacing","graphemeSegmenter","line","cache","Object","create","whiteSpace","collapseSpaces","collapseNewlines","canPrependSpaces","wordWrapWidth","tokens","tokenize","token","isNewline","addLine","currIsBreakingSpace","isBreakingSpace","lastIsBreakingSpace","tokenWidth","getFromCache","canBreakWords","breakWords","characters","wordWrapSplit","j","char","lastChar","k","nextChar","canBreakChars","characterWidth","isLastToken","newLine","trimRight","key","slice","_newlines","includes","charCodeAt","_nextChar","_breakingSpaces","push","_token","_char","_index","_breakWords","_fonts","properties","descent","_context","metricsString","METRICS_STRING","BASELINE_SYMBOL","ceil","baseline","HEIGHT_MULTIPLIER","BASELINE_MULTIPLIER","fillStyle","fillRect","textBaseline","fillText","imagedata","getImageData","data","pixels","idx","stop","clearMetrics","__canvas","c","OffscreenCanvas","createCanvas","ex","__context","TextMetrics","Intl","Segmenter","segmenter","s","segment","map","x"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\text\\src\\TextMetrics.ts"],"sourcesContent":["import { settings } from '@pixi/core';\n\nimport type { ICanvas, ICanvasRenderingContext2D, ICanvasRenderingContext2DSettings } from '@pixi/core';\nimport type { TextStyle, TextStyleWhiteSpace } from './TextStyle';\n\n// The type for Intl.Segmenter is only available since TypeScript 4.7.2, so let's make a polyfill for it.\ninterface ISegmentData\n{\n    segment: string;\n}\ninterface ISegments\n{\n    [Symbol.iterator](): IterableIterator<ISegmentData>;\n}\ninterface ISegmenter\n{\n    segment(input: string): ISegments;\n}\ninterface IIntl\n{\n    Segmenter?: {\n        prototype: ISegmenter;\n        new(): ISegmenter;\n    };\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\n\n/**\n * A number, or a string containing a number.\n * @memberof PIXI\n * @typedef {object} IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\ninterface IFontMetrics\n{\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = Record<string, number>;\n\n// Default settings used for all getContext calls\nconst contextSettings: ICanvasRenderingContext2DSettings = {\n    // TextMetrics requires getImageData readback for measuring fonts.\n    willReadFrequently: true,\n};\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n * @example\n * import { TextMetrics, TextStyle } from 'pixi.js';\n *\n * const style = new TextStyle({\n *     fontFamily: 'Arial',\n *     fontSize: 24,\n *     fill: 0xff1010,\n *     align: 'center',\n * });\n * const textMetrics = TextMetrics.measureText('Your text', style);\n * @memberof PIXI\n */\nexport class TextMetrics\n{\n    /** The text that was measured. */\n    public text: string;\n\n    /** The style that was measured. */\n    public style: TextStyle;\n\n    /** The measured width of the text. */\n    public width: number;\n\n    /** The measured height of the text. */\n    public height: number;\n\n    /** An array of lines of the text broken by new lines and wrapping is specified in style. */\n    public lines: string[];\n\n    /** An array of the line widths for each line matched to `lines`. */\n    public lineWidths: number[];\n\n    /** The measured line height for this style. */\n    public lineHeight: number;\n\n    /** The maximum line width for all measured lines. */\n    public maxLineWidth: number;\n\n    /** The font properties object from TextMetrics.measureFont. */\n    public fontProperties: IFontMetrics;\n\n    /**\n     * String used for calculate font metrics.\n     * These characters are all tall to help calculate the height required for text.\n     */\n    public static METRICS_STRING = '|ÉqÅ';\n\n    /** Baseline symbol for calculate font metrics. */\n    public static BASELINE_SYMBOL = 'M';\n\n    /** Baseline multiplier for calculate font metrics. */\n    public static BASELINE_MULTIPLIER = 1.4;\n\n    /** Height multiplier for setting height of canvas to calculate font metrics. */\n    public static HEIGHT_MULTIPLIER = 2.0;\n\n    /**\n     * A Unicode \"character\", or \"grapheme cluster\", can be composed of multiple Unicode code points,\n     * such as letters with diacritical marks (e.g. `'\\u0065\\u0301'`, letter e with acute)\n     * or emojis with modifiers (e.g. `'\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB'`, technologist).\n     * The new `Intl.Segmenter` API in ES2022 can split the string into grapheme clusters correctly. If it is not available,\n     * PixiJS will fallback to use the iterator of String, which can only spilt the string into code points.\n     * If you want to get full functionality in environments that don't support `Intl.Segmenter` (such as Firefox),\n     * you can use other libraries such as [grapheme-splitter]{@link https://www.npmjs.com/package/grapheme-splitter}\n     * or [graphemer]{@link https://www.npmjs.com/package/graphemer} to create a polyfill. Since these libraries can be\n     * relatively large in size to handle various Unicode grapheme clusters properly, PixiJS won't use them directly.\n     */\n    public static graphemeSegmenter: (s: string) => string[] = (() =>\n    {\n        if (typeof (Intl as IIntl)?.Segmenter === 'function')\n        {\n            const segmenter = new (Intl as IIntl).Segmenter();\n\n            return (s: string) => [...segmenter.segment(s)].map((x) => x.segment);\n        }\n\n        return (s: string) => [...s];\n    })();\n\n    public static _experimentalLetterSpacingSupported?: boolean;\n\n    /**\n     * Checking that we can use modern canvas 2D API.\n     *\n     * Note: This is an unstable API, Chrome < 94 use `textLetterSpacing`, later versions use `letterSpacing`.\n     * @see PIXI.TextMetrics.experimentalLetterSpacing\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/letterSpacing\n     * @see https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n     */\n    public static get experimentalLetterSpacingSupported(): boolean\n    {\n        let result = TextMetrics._experimentalLetterSpacingSupported;\n\n        if (result !== undefined)\n        {\n            const proto = settings.ADAPTER.getCanvasRenderingContext2D().prototype;\n\n            result\n                = TextMetrics._experimentalLetterSpacingSupported\n                = 'letterSpacing' in proto || 'textLetterSpacing' in proto;\n        }\n\n        return result;\n    }\n\n    /**\n     * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n     * lead to more accurate letter-spacing results because it does not try to manually draw\n     * each character. However, this Chrome API is experimental and may not serve all cases yet.\n     * @see PIXI.TextMetrics.experimentalLetterSpacingSupported\n     */\n    public static experimentalLetterSpacing = false;\n\n    /** Cache of {@see PIXI.TextMetrics.FontMetrics} objects. */\n    private static _fonts: Record<string, IFontMetrics> = {};\n\n    /** Cache of new line chars. */\n    private static _newlines: number[] = [\n        0x000A, // line feed\n        0x000D, // carriage return\n    ];\n\n    /** Cache of breaking spaces. */\n    private static _breakingSpaces: number[] = [\n        0x0009, // character tabulation\n        0x0020, // space\n        0x2000, // en quad\n        0x2001, // em quad\n        0x2002, // en space\n        0x2003, // em space\n        0x2004, // three-per-em space\n        0x2005, // four-per-em space\n        0x2006, // six-per-em space\n        0x2008, // punctuation space\n        0x2009, // thin space\n        0x200A, // hair space\n        0x205F, // medium mathematical space\n        0x3000, // ideographic space\n    ];\n\n    private static __canvas: ICanvas;\n    private static __context: ICanvasRenderingContext2D;\n\n    /**\n     * @param text - the text that was measured\n     * @param style - the style that was measured\n     * @param width - the measured width of the text\n     * @param height - the measured height of the text\n     * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param lineWidths - an array of the line widths for each line matched to `lines`\n     * @param lineHeight - the measured line height for this style\n     * @param maxLineWidth - the maximum line width for all measured lines\n     * @param {PIXI.IFontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: IFontMetrics)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     * @param text - The text to measure.\n     * @param style - The text style to use for measuring\n     * @param wordWrap - Override for if word-wrap should be applied to the text.\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns Measured width and height of the text.\n     */\n    public static measureText(\n        text: string,\n        style: TextStyle,\n        wordWrap?: boolean,\n        canvas: ICanvas = TextMetrics._canvas\n    ): TextMetrics\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        // (toDataURI, getImageData functions)\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = canvas.getContext('2d', contextSettings);\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = TextMetrics._measureText(lines[i], style.letterSpacing, context);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + (style.strokeThickness * 2))\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    private static _measureText(\n        text: string,\n        letterSpacing: number,\n        context: ICanvasRenderingContext2D\n    )\n    {\n        let useExperimentalLetterSpacing = false;\n\n        if (TextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (TextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        let width = context.measureText(text).width;\n\n        if (width > 0)\n        {\n            if (useExperimentalLetterSpacing)\n            {\n                width -= letterSpacing;\n            }\n            else\n            {\n                width += (TextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n            }\n        }\n\n        return width;\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     * @param text - String to apply word wrapping to\n     * @param style - the style to use when wrapping\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns New string with new lines applied where required\n     */\n    private static wordWrap(\n        text: string,\n        style: TextStyle,\n        canvas: ICanvas = TextMetrics._canvas\n    ): string\n    {\n        const context = canvas.getContext('2d', contextSettings);\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = TextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n                        let lastChar = char;\n\n                        let k = 1;\n\n                        // we are not at the end of the token\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            lastChar = nextChar;\n                            k++;\n                        }\n\n                        j += k - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap method.\n     * @param line    - The line of text to add\n     * @param newLine - Add new line character to end\n     * @returns A formatted line\n     */\n    private static addLine(line: string, newLine = true): string\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     * @param key            - The key\n     * @param letterSpacing  - The letter spacing\n     * @param cache          - The cache\n     * @param context        - The canvas context\n     * @returns The from cache.\n     */\n    private static getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: ICanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (typeof width !== 'number')\n        {\n            width = TextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces.\n     * @param whiteSpace - The TextStyle property whiteSpace\n     * @returns Should collapse\n     */\n    private static collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars.\n     * @param whiteSpace - The white space\n     * @returns should collapse\n     */\n    private static collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * Trims breaking whitespaces from string.\n     * @param text - The text\n     * @returns Trimmed string\n     */\n    private static trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     * @param char - The character\n     * @returns True if newline, False otherwise.\n     */\n    private static isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return TextMetrics._newlines.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param char - The character\n     * @param [_nextChar] - The next character\n     * @returns True if whitespace, False otherwise.\n     */\n    static isBreakingSpace(char: string, _nextChar?: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return TextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     * @param text - The text\n     * @returns A tokenized array\n     */\n    private static tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n            const nextChar = text[i + 1];\n\n            if (TextMetrics.isBreakingSpace(char, nextChar) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     * @param _token - The token\n     * @param breakWords - The style attr break words\n     * @returns Whether to break word or not\n     */\n    static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param _char - The character\n     * @param _nextChar - The next character\n     * @param _token - The token/word the characters are from\n     * @param _index - The index in the token of the char\n     * @param _breakWords - The style attr break words\n     * @returns whether to break word or not\n     */\n    static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     * @param token - The token to split\n     * @returns The characters of the token\n     * @see TextMetrics.graphemeSegmenter\n     */\n    static wordWrapSplit(token: string): string[]\n    {\n        return TextMetrics.graphemeSegmenter(token);\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     * @param font - String representing the style of the font\n     * @returns Font properties object\n     */\n    public static measureFont(font: string): IFontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties: IFontMetrics = {\n            ascent: 0,\n            descent: 0,\n            fontSize: 0,\n        };\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = Math.ceil(TextMetrics.HEIGHT_MULTIPLIER * baseline);\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        if (width === 0 || height === 0)\n        {\n            TextMetrics._fonts[font] = properties;\n\n            return properties;\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n\n    /**\n     * Cached canvas element for measuring text\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _canvas(): ICanvas\n    {\n        if (!TextMetrics.__canvas)\n        {\n            let canvas: ICanvas;\n\n            try\n            {\n                // OffscreenCanvas2D measureText can be up to 40% faster.\n                const c = new OffscreenCanvas(0, 0);\n                const context = c.getContext('2d', contextSettings);\n\n                if (context?.measureText)\n                {\n                    TextMetrics.__canvas = c;\n\n                    return c;\n                }\n\n                canvas = settings.ADAPTER.createCanvas();\n            }\n            catch (ex)\n            {\n                canvas = settings.ADAPTER.createCanvas();\n            }\n            canvas.width = canvas.height = 10;\n            TextMetrics.__canvas = canvas;\n        }\n\n        return TextMetrics.__canvas;\n    }\n\n    /**\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _context(): ICanvasRenderingContext2D\n    {\n        if (!TextMetrics.__context)\n        {\n            TextMetrics.__context = TextMetrics._canvas.getContext('2d', contextSettings);\n        }\n\n        return TextMetrics.__context;\n    }\n}\n"],"mappings":";AAsDA,MAAMA,eAAqD;EAEvDC,kBAAoB;AACxB;AAgBO,MAAMC,YAAA,GAAN,MACP;EA4EI,WAAkBC,kCAClBA,CAAA;IACI,IAAIC,MAAA,GAASF,YAAY,CAAAG,mCAAA;IAEzB,IAAID,MAAA,KAAW,KACf;MACI,MAAME,KAAQ,GAAAC,QAAA,CAASC,OAAQ,CAAAC,2BAAA,EAA8B,CAAAC,SAAA;MAE7DN,MAAA,GACMF,YAAY,CAAAG,mCAAA,GACZ,eAAmB,IAAAC,KAAA,IAAS,mBAAuB,IAAAA,KAAA;IAAA;IAGtD,OAAAF,MAAA;EAAA;EAoDXO,YAAYC,IAAA,EAAcC,KAAkB,EAAAC,KAAA,EAAeC,MAAA,EAAgBC,KAAiB,EAAAC,UAAA,EACxFC,UAAoB,EAAAC,YAAA,EAAsBC,cAC9C;IACI,KAAKR,IAAO,GAAAA,IAAA;IACZ,KAAKC,KAAQ,GAAAA,KAAA;IACb,KAAKC,KAAQ,GAAAA,KAAA;IACb,KAAKC,MAAS,GAAAA,MAAA;IACd,KAAKC,KAAQ,GAAAA,KAAA;IACb,KAAKC,UAAa,GAAAA,UAAA;IAClB,KAAKC,UAAa,GAAAA,UAAA;IAClB,KAAKC,YAAe,GAAAA,YAAA;IACpB,KAAKC,cAAiB,GAAAA,cAAA;EAAA;EAW1B,OAAcC,WACVA,CAAAT,IAAA,EACAC,KAAA,EACAS,QACA,EAEJ;IAAA,IAFIC,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAkBtB,YAAA,CAAYyB,OAElC;IACIL,QAAA,GAAYA,QAAa,eAAaA,QAAa,YAAQT,KAAA,CAAMS,QAAW,GAAAA,QAAA;IACtE,MAAAM,IAAA,GAAOf,KAAA,CAAMgB,YAAa;IAC1B,MAAAT,cAAA,GAAiBlB,YAAY,CAAA4B,WAAA,CAAYF,IAAI;IAI/C,IAAAR,cAAA,CAAeW,QAAA,KAAa,CAChC;MACIX,cAAA,CAAeW,QAAA,GAAWlB,KAAM,CAAAkB,QAAA;MAChCX,cAAA,CAAeY,MAAA,GAASnB,KAAM,CAAAkB,QAAA;IAAA;IAGlC,MAAME,OAAU,GAAAV,MAAA,CAAOW,UAAW,OAAMlC,eAAe;IAEvDiC,OAAA,CAAQL,IAAO,GAAAA,IAAA;IAEf,MAAMO,UAAA,GAAab,QAAW,GAAApB,YAAA,CAAYoB,QAAA,CAASV,IAAM,EAAAC,KAAA,EAAOU,MAAM,CAAI,GAAAX,IAAA;IACpE,MAAAI,KAAA,GAAQmB,UAAW,CAAAC,KAAA,CAAM,gBAAgB;IAC/C,MAAMnB,UAAa,OAAIoB,KAAc,CAAArB,KAAA,CAAMS,MAAM;IACjD,IAAIN,YAAe;IAEnB,SAASmB,CAAI,MAAGA,CAAI,GAAAtB,KAAA,CAAMS,MAAA,EAAQa,CAClC;MACI,MAAMC,SAAA,GAAYrC,YAAY,CAAAsC,YAAA,CAAaxB,KAAA,CAAMsB,CAAI,GAAAzB,KAAA,CAAM4B,aAAA,EAAeR,OAAO;MAEjFhB,UAAA,CAAWqB,CAAK,IAAAC,SAAA;MACDpB,YAAA,GAAAuB,IAAA,CAAKC,GAAI,CAAAxB,YAAA,EAAcoB,SAAS;IAAA;IAE/C,IAAAzB,KAAA,GAAQK,YAAA,GAAeN,KAAM,CAAA+B,eAAA;IAEjC,IAAI/B,KAAA,CAAMgC,UACV;MACI/B,KAAA,IAASD,KAAM,CAAAiC,kBAAA;IAAA;IAGnB,MAAM5B,UAAa,GAAAL,KAAA,CAAMK,UAAc,IAAAE,cAAA,CAAeW,QAAA,GAAWlB,KAAM,CAAA+B,eAAA;IACvE,IAAI7B,MAAS,GAAA2B,IAAA,CAAKC,GAAI,CAAAzB,UAAA,EAAYE,cAAA,CAAeW,QAAY,GAAAlB,KAAA,CAAM+B,eAAkB,IAAE,CAC/E,IAAA5B,KAAA,CAAMS,MAAS,SAAAP,UAAA,GAAmBL,KAAM,CAAAkC,OAAA;IAEhD,IAAIlC,KAAA,CAAMgC,UACV;MACI9B,MAAA,IAAUF,KAAM,CAAAiC,kBAAA;IAAA;IAGpB,OAAO,IAAI5C,YAAA,CACPU,IACA,EAAAC,KAAA,EACAC,KACA,EAAAC,MAAA,EACAC,KACA,EAAAC,UAAA,EACAC,UAAa,GAAAL,KAAA,CAAMkC,OACnB,EAAA5B,YAAA,EACAC,cACJ;EAAA;EAGJ,OAAeoB,aACX5B,IACA,EAAA6B,aAAA,EACAR,OAEJ;IACI,IAAIe,4BAA+B;IAEnC,IAAI9C,YAAA,CAAYC,kCAChB;MACI,IAAID,YAAA,CAAY+C,yBAChB;QACIhB,OAAA,CAAQQ,aAAA,GAAmB,GAAAA,aAAA;QAC3BR,OAAA,CAAQiB,iBAAA,GAAuB,GAAAT,aAAA;QACAO,4BAAA;MAAA,CAGnC;QACIf,OAAA,CAAQQ,aAAgB;QACxBR,OAAA,CAAQiB,iBAAoB;MAAA;IAChC;IAGJ,IAAIpC,KAAQ,GAAAmB,OAAA,CAAQZ,WAAY,CAAAT,IAAI,CAAE,CAAAE,KAAA;IAEtC,IAAIA,KAAA,GAAQ,CACZ;MACI,IAAIkC,4BACJ;QACalC,KAAA,IAAA2B,aAAA;MAAA,CAGb;QACI3B,KAAA,IAAU,CAAYZ,YAAA,CAAAiD,iBAAA,CAAkBvC,IAAI,EAAEa,MAAA,GAAS,CAAK,IAAAgB,aAAA;MAAA;IAChE;IAGG,OAAA3B,KAAA;EAAA;EAWX,OAAeQ,QACXA,CAAAV,IAAA,EACAC,KACA,EAEJ;IAAA,IAFIU,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAkBtB,YAAA,CAAYyB,OAElC;IACI,MAAMM,OAAU,GAAAV,MAAA,CAAOW,UAAW,OAAMlC,eAAe;IAEvD,IAAIc,KAAQ;IACZ,IAAIsC,IAAO;IACX,IAAIpC,KAAQ;IAEN,MAAAqC,KAAA,kBAAoCC,MAAA,CAAAC,MAAA,CAAO,IAAI;IAC/C;MAAEd,aAAA;MAAee;IAAe,IAAA3C,KAAA;IAGhC,MAAA4C,cAAA,GAAiBvD,YAAY,CAAAuD,cAAA,CAAeD,UAAU;IACtD,MAAAE,gBAAA,GAAmBxD,YAAY,CAAAwD,gBAAA,CAAiBF,UAAU;IAGhE,IAAIG,gBAAA,GAAmB,CAACF,cAAA;IAQlB,MAAAG,aAAA,GAAgB/C,KAAA,CAAM+C,aAAgB,GAAAnB,aAAA;IAGtC,MAAAoB,MAAA,GAAS3D,YAAY,CAAA4D,QAAA,CAASlD,IAAI;IAExC,SAAS0B,CAAI,MAAGA,CAAI,GAAAuB,MAAA,CAAOpC,MAAA,EAAQa,CACnC;MAEI,IAAIyB,KAAA,GAAQF,MAAO,CAAAvB,CAAA;MAGf,IAAApC,YAAA,CAAY8D,SAAU,CAAAD,KAAK,CAC/B;QAEI,IAAI,CAACL,gBACL;UACa1C,KAAA,IAAAd,YAAA,CAAY+D,OAAA,CAAQb,IAAI;UACjCO,gBAAA,GAAmB,CAACF,cAAA;UACbL,IAAA;UACCtC,KAAA;UACR;QAAA;QAKIiD,KAAA;MAAA;MAIZ,IAAIN,cACJ;QAEU,MAAAS,mBAAA,GAAsBhE,YAAY,CAAAiE,eAAA,CAAgBJ,KAAK;QAC7D,MAAMK,mBAAA,GAAsBlE,YAAY,CAAAiE,eAAA,CAAgBf,IAAK,CAAAA,IAAA,CAAK3B,MAAA,GAAS,CAAE;QAE7E,IAAIyC,mBAAA,IAAuBE,mBAC3B;UACI;QAAA;MACJ;MAIJ,MAAMC,UAAA,GAAanE,YAAY,CAAAoE,YAAA,CAAaP,KAAO,EAAAtB,aAAA,EAAeY,KAAA,EAAOpB,OAAO;MAGhF,IAAIoC,UAAA,GAAaT,aACjB;QAEI,IAAIR,IAAA,KAAS,EACb;UAEapC,KAAA,IAAAd,YAAA,CAAY+D,OAAA,CAAQb,IAAI;UAC1BA,IAAA;UACCtC,KAAA;QAAA;QAIZ,IAAIZ,YAAY,CAAAqE,aAAA,CAAcR,KAAO,EAAAlD,KAAA,CAAM2D,UAAU,CACrD;UAEU,MAAAC,UAAA,GAAavE,YAAY,CAAAwE,aAAA,CAAcX,KAAK;UAGlD,SAASY,CAAI,MAAGA,CAAI,GAAAF,UAAA,CAAWhD,MAAA,EAAQkD,CACvC;YACI,IAAIC,IAAA,GAAOH,UAAW,CAAAE,CAAA;YACtB,IAAIE,QAAW,GAAAD,IAAA;YAEf,IAAIE,CAAI;YAGD,OAAAL,UAAA,CAAWE,CAAA,GAAIG,CACtB;cACU,MAAAC,QAAA,GAAWN,UAAA,CAAWE,CAAI,GAAAG,CAAA;cAG5B,KAAC5E,YAAA,CAAY8E,aAAc,CAAAH,QAAA,EAAUE,QAAA,EAAUhB,KAAO,EAAAY,CAAA,EAAG9D,KAAM,CAAA2D,UAAU,CAC7E;gBAEYI,IAAA,IAAAG,QAAA;cAAA,CAGZ;gBACI;cAAA;cAGOF,QAAA,GAAAE,QAAA;cACXD,CAAA;YAAA;YAGJH,CAAA,IAAKG,CAAI;YAET,MAAMG,cAAA,GAAiB/E,YAAY,CAAAoE,YAAA,CAAaM,IAAM,EAAAnC,aAAA,EAAeY,KAAA,EAAOpB,OAAO;YAE/E,IAAAgD,cAAA,GAAiBnE,KAAA,GAAQ8C,aAC7B;cACa5C,KAAA,IAAAd,YAAA,CAAY+D,OAAA,CAAQb,IAAI;cACdO,gBAAA;cACZP,IAAA;cACCtC,KAAA;YAAA;YAGJsC,IAAA,IAAAwB,IAAA;YACC9D,KAAA,IAAAmE,cAAA;UAAA;QACb,CAKJ;UAGQ,IAAA7B,IAAA,CAAK3B,MAAA,GAAS,CAClB;YACaT,KAAA,IAAAd,YAAA,CAAY+D,OAAA,CAAQb,IAAI;YAC1BA,IAAA;YACCtC,KAAA;UAAA;UAGN,MAAAoE,WAAA,GAAc5C,CAAM,KAAAuB,MAAA,CAAOpC,MAAS;UAG1CT,KAAA,IAASd,YAAY,CAAA+D,OAAA,CAAQF,KAAO,GAACmB,WAAW;UAC7BvB,gBAAA;UACZP,IAAA;UACCtC,KAAA;QAAA;MACZ,CAKJ;QAGQ,IAAAuD,UAAA,GAAavD,KAAA,GAAQ8C,aACzB;UAEuBD,gBAAA;UAGV3C,KAAA,IAAAd,YAAA,CAAY+D,OAAA,CAAQb,IAAI;UAG1BA,IAAA;UACCtC,KAAA;QAAA;QAIR,IAAAsC,IAAA,CAAK3B,MAAA,GAAS,CAAK,KAACvB,YAAA,CAAYiE,eAAgB,CAAAJ,KAAK,KAAKJ,gBAC9D;UAEYP,IAAA,IAAAW,KAAA;UAGCjD,KAAA,IAAAuD,UAAA;QAAA;MACb;IACJ;IAGKrD,KAAA,IAAAd,YAAA,CAAY+D,OAAQ,CAAAb,IAAA,EAAM,KAAK;IAEjC,OAAApC,KAAA;EAAA;EASX,OAAeiD,QAAQb,IAAc,EACrC;IAAA,IADqC+B,OAAA,GAAA3D,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAU,IAC/C;IACW4B,IAAA,GAAAlD,YAAA,CAAYkF,SAAA,CAAUhC,IAAI;IAEjCA,IAAA,GAAQ+B,OAAA,GAAc,GAAA/B,IAAA;AAAA,CAAW,GAAAA,IAAA;IAE1B,OAAAA,IAAA;EAAA;EAWX,OAAekB,aAAae,GAAa,EAAA5C,aAAA,EAAuBY,KAAA,EAC5DpB,OACJ;IACI,IAAInB,KAAA,GAAQuC,KAAM,CAAAgC,GAAA;IAEd,WAAOvE,KAAA,KAAU,QACrB;MACIA,KAAA,GAAQZ,YAAY,CAAAsC,YAAA,CAAa6C,GAAK,EAAA5C,aAAA,EAAeR,OAAO,CAAI,GAAAQ,aAAA;MAChEY,KAAA,CAAMgC,GAAO,IAAAvE,KAAA;IAAA;IAGV,OAAAA,KAAA;EAAA;EAQX,OAAe2C,eAAeD,UAC9B;IACY,OAAAA,UAAA,KAAe,YAAYA,UAAe;EAAA;EAQtD,OAAeE,iBAAiBF,UAChC;IACI,OAAQA,UAAe;EAAA;EAQ3B,OAAe4B,UAAUxE,IACzB;IACQ,WAAOA,IAAA,KAAS,QACpB;MACW;IAAA;IAGX,SAAS0B,CAAA,GAAI1B,IAAK,CAAAa,MAAA,GAAS,CAAG,EAAAa,CAAA,IAAK,GAAGA,CACtC;MACI,MAAMsC,IAAA,GAAOhE,IAAK,CAAA0B,CAAA;MAElB,IAAI,CAACpC,YAAA,CAAYiE,eAAgB,CAAAS,IAAI,CACrC;QACI;MAAA;MAGGhE,IAAA,GAAAA,IAAA,CAAK0E,KAAM,IAAG,CAAE;IAAA;IAGpB,OAAA1E,IAAA;EAAA;EAQX,OAAeoD,UAAUY,IACzB;IACQ,WAAOA,IAAA,KAAS,QACpB;MACW;IAAA;IAGX,OAAO1E,YAAA,CAAYqF,SAAU,CAAAC,QAAA,CAASZ,IAAK,CAAAa,UAAA,CAAW,CAAC,CAAC;EAAA;EAa5D,OAAOtB,eAAgBA,CAAAS,IAAA,EAAcc,SACrC;IACQ,WAAOd,IAAA,KAAS,QACpB;MACW;IAAA;IAGX,OAAO1E,YAAA,CAAYyF,eAAgB,CAAAH,QAAA,CAASZ,IAAK,CAAAa,UAAA,CAAW,CAAC,CAAC;EAAA;EAQlE,OAAe3B,SAASlD,IACxB;IACI,MAAMiD,MAAA,GAAmB,EAAC;IAC1B,IAAIE,KAAQ;IAER,WAAOnD,IAAA,KAAS,QACpB;MACW,OAAAiD,MAAA;IAAA;IAGX,SAASvB,CAAI,MAAGA,CAAI,GAAA1B,IAAA,CAAKa,MAAA,EAAQa,CACjC;MACI,MAAMsC,IAAA,GAAOhE,IAAK,CAAA0B,CAAA;MACZ,MAAAyC,QAAA,GAAWnE,IAAA,CAAK0B,CAAI;MAEtB,IAAApC,YAAA,CAAYiE,eAAA,CAAgBS,IAAM,EAAAG,QAAQ,KAAK7E,YAAY,CAAA8D,SAAA,CAAUY,IAAI,CAC7E;QACI,IAAIb,KAAA,KAAU,EACd;UACIF,MAAA,CAAO+B,IAAA,CAAK7B,KAAK;UACTA,KAAA;QAAA;QAGZF,MAAA,CAAO+B,IAAA,CAAKhB,IAAI;QAEhB;MAAA;MAGKb,KAAA,IAAAa,IAAA;IAAA;IAGb,IAAIb,KAAA,KAAU,EACd;MACIF,MAAA,CAAO+B,IAAA,CAAK7B,KAAK;IAAA;IAGd,OAAAF,MAAA;EAAA;EAaX,OAAOU,aAAcA,CAAAsB,MAAA,EAAgBrB,UACrC;IACW,OAAAA,UAAA;EAAA;EAiBX,OAAOQ,aAAcA,CAAAc,KAAA,EAAeJ,SAAmB,EAAAG,MAAA,EAAgBE,MAAA,EACnEC,WACJ;IACW;EAAA;EAaX,OAAOtB,cAAcX,KACrB;IACW,OAAA7D,YAAA,CAAYiD,iBAAA,CAAkBY,KAAK;EAAA;EAQ9C,OAAcjC,YAAYF,IAC1B;IAEQ,IAAA1B,YAAA,CAAY+F,MAAA,CAAOrE,IACvB;MACI,OAAO1B,YAAA,CAAY+F,MAAO,CAAArE,IAAA;IAAA;IAG9B,MAAMsE,UAA2B;MAC7BlE,MAAQ;MACRmE,OAAS;MACTpE,QAAU;IAAA,CACd;IAEA,MAAMR,MAAA,GAASrB,YAAY,CAAAyB,OAAA;IAC3B,MAAMM,OAAA,GAAU/B,YAAY,CAAAkG,QAAA;IAE5BnE,OAAA,CAAQL,IAAO,GAAAA,IAAA;IAET,MAAAyE,aAAA,GAAgBnG,YAAY,CAAAoG,cAAA,GAAiBpG,YAAY,CAAAqG,eAAA;IAC/D,MAAMzF,KAAA,GAAQ4B,IAAK,CAAA8D,IAAA,CAAKvE,OAAA,CAAQZ,WAAY,CAAAgF,aAAa,EAAEvF,KAAK;IAC5D,IAAA2F,QAAA,GAAW/D,IAAA,CAAK8D,IAAK,CAAAvE,OAAA,CAAQZ,WAAA,CAAYnB,YAAY,CAAAqG,eAAe,EAAEzF,KAAK;IAC/E,MAAMC,MAAS,GAAA2B,IAAA,CAAK8D,IAAK,CAAAtG,YAAA,CAAYwG,iBAAA,GAAoBD,QAAQ;IAEtDA,QAAA,GAAAA,QAAA,GAAWvG,YAAA,CAAYyG,mBAAsB;IAEpD,IAAA7F,KAAA,KAAU,CAAK,IAAAC,MAAA,KAAW,CAC9B;MACIb,YAAA,CAAY+F,MAAA,CAAOrE,IAAQ,IAAAsE,UAAA;MAEpB,OAAAA,UAAA;IAAA;IAGX3E,MAAA,CAAOT,KAAQ,GAAAA,KAAA;IACfS,MAAA,CAAOR,MAAS,GAAAA,MAAA;IAEhBkB,OAAA,CAAQ2E,SAAY;IACpB3E,OAAA,CAAQ4E,QAAS,IAAG,CAAG,EAAA/F,KAAA,EAAOC,MAAM;IAEpCkB,OAAA,CAAQL,IAAO,GAAAA,IAAA;IAEfK,OAAA,CAAQ6E,YAAe;IACvB7E,OAAA,CAAQ2E,SAAY;IACZ3E,OAAA,CAAA8E,QAAA,CAASV,aAAe,KAAGI,QAAQ;IAE3C,MAAMO,SAAA,GAAY/E,OAAQ,CAAAgF,YAAA,CAAa,GAAG,CAAG,EAAAnG,KAAA,EAAOC,MAAM,CAAE,CAAAmG,IAAA;IAC5D,MAAMC,MAAA,GAASH,SAAU,CAAAvF,MAAA;IACzB,MAAM2B,IAAA,GAAOtC,KAAQ;IAErB,IAAIwB,CAAI;IACR,IAAI8E,GAAM;IACV,IAAIC,IAAO;IAGX,KAAK/E,CAAI,MAAGA,CAAI,GAAAmE,QAAA,EAAU,EAAEnE,CAC5B;MACI,SAASqC,CAAI,MAAGA,CAAI,GAAAvB,IAAA,EAAMuB,CAAA,IAAK,CAC/B;QACQ,IAAAqC,SAAA,CAAUI,GAAM,GAAAzC,CAAA,MAAO,GAC3B;UACW0C,IAAA;UACP;QAAA;MACJ;MAEJ,IAAI,CAACA,IACL;QACWD,GAAA,IAAAhE,IAAA;MAAA,CAGX;QACI;MAAA;IACJ;IAGJ8C,UAAA,CAAWlE,MAAA,GAASyE,QAAW,GAAAnE,CAAA;IAE/B8E,GAAA,GAAMD,MAAS,GAAA/D,IAAA;IACRiE,IAAA;IAGP,KAAK/E,CAAI,GAAAvB,MAAA,EAAQuB,CAAI,GAAAmE,QAAA,EAAU,EAAEnE,CACjC;MACI,SAASqC,CAAI,MAAGA,CAAI,GAAAvB,IAAA,EAAMuB,CAAA,IAAK,CAC/B;QACQ,IAAAqC,SAAA,CAAUI,GAAM,GAAAzC,CAAA,MAAO,GAC3B;UACW0C,IAAA;UACP;QAAA;MACJ;MAGJ,IAAI,CAACA,IACL;QACWD,GAAA,IAAAhE,IAAA;MAAA,CAGX;QACI;MAAA;IACJ;IAGJ8C,UAAA,CAAWC,OAAA,GAAU7D,CAAI,GAAAmE,QAAA;IACdP,UAAA,CAAAnE,QAAA,GAAWmE,UAAW,CAAAlE,MAAA,GAASkE,UAAW,CAAAC,OAAA;IAErDjG,YAAA,CAAY+F,MAAA,CAAOrE,IAAQ,IAAAsE,UAAA;IAEpB,OAAAA,UAAA;EAAA;EAOX,OAAcoB,YAAaA,CAAA,EAC3B;IAAA,IAD2B1F,IAAA,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAO,EAClC;IACI,IAAII,IACJ;MACI,OAAO1B,YAAA,CAAY+F,MAAO,CAAArE,IAAA;IAAA,CAG9B;MACI1B,YAAA,CAAY+F,MAAA,GAAS,EAAC;IAAA;EAC1B;EAQJ,WAAkBtE,OAClBA,CAAA;IACQ,KAACzB,YAAA,CAAYqH,QACjB;MACQ,IAAAhG,MAAA;MAGJ;QAEI,MAAMiG,CAAI,OAAIC,eAAgB,IAAG,CAAC;QAClC,MAAMxF,OAAU,GAAAuF,CAAA,CAAEtF,UAAW,OAAMlC,eAAe;QAElD,IAAIiC,OAAA,EAASZ,WACb;UACInB,YAAA,CAAYqH,QAAW,GAAAC,CAAA;UAEhB,OAAAA,CAAA;QAAA;QAGFjG,MAAA,GAAAhB,QAAA,CAASC,OAAA,CAAQkH,YAAa;MAAA,SAEpCC,EAAP;QAEapG,MAAA,GAAAhB,QAAA,CAASC,OAAA,CAAQkH,YAAa;MAAA;MAEpCnG,MAAA,CAAAT,KAAA,GAAQS,MAAA,CAAOR,MAAS;MAC/Bb,YAAA,CAAYqH,QAAW,GAAAhG,MAAA;IAAA;IAG3B,OAAOrB,YAAY,CAAAqH,QAAA;EAAA;EAOvB,WAAkBnB,QAClBA,CAAA;IACQ,KAAClG,YAAA,CAAY0H,SACjB;MACI1H,YAAA,CAAY0H,SAAY,GAAA1H,YAAA,CAAYyB,OAAQ,CAAAO,UAAA,CAAW,MAAMlC,eAAe;IAAA;IAGhF,OAAOE,YAAY,CAAA0H,SAAA;EAAA;AAE3B;AA71BO,IAAMC,WAAN,GAAA3H,YAAA;AAAM2H,WAAA,CAiCKvB,cAAiB;AAjCtBuB,WAAA,CAoCKtB,eAAkB;AApCvBsB,WAAA,CAuCKlB,mBAAsB;AAvC3BkB,WAAA,CA0CKnB,iBAAoB;AAalCmB,WAvDS,CAuDK1E,iBAAA,GAA8C,CAC5D;EACQ,WAAQ2E,IAAgB,EAAAC,SAAA,KAAc,UAC1C;IACU,MAAAC,SAAA,GAAY,IAAKF,IAAA,CAAeC,SAAU;IAEhD,OAAQE,CAAA,IAAc,CAAC,GAAGD,SAAU,CAAAE,OAAA,CAAQD,CAAC,CAAC,CAAE,CAAAE,GAAA,CAAKC,CAAA,IAAMA,CAAA,CAAEF,OAAO;EAAA;EAGxE,OAAQD,CAAA,IAAc,CAAC,GAAGA,CAAC;AAC/B,CAAG;AAjEMJ,WAAA,CAmGK5E,yBAA4B;AAG1C4E,WAtGS,CAsGM5B,MAAA,GAAuC,EAAC;AAtG9C4B,WAAA,CAyGMtC,SAAsB,IACjC,IACA,GACJ;AA5GSsC,WAAA,CA+GMlC,eAA4B,IACvC,GACA,IACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}