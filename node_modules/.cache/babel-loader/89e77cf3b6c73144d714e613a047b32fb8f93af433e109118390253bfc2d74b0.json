{"ast":null,"code":"import { SCALE_MODES, FORMATS, ALPHA_MODES, TYPES, MIPMAP_MODES, WRAP_MODES, TARGETS } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\nimport { EventEmitter, uid, isPow2, BaseTextureCache, TextureCache } from '@pixi/utils';\nimport { autoDetectResource } from './resources/autoDetectResource.mjs';\nimport { BufferResource } from './resources/BufferResource.mjs';\nimport { Resource } from './resources/Resource.mjs';\nconst defaultBufferOptions = {\n  scaleMode: SCALE_MODES.NEAREST,\n  format: FORMATS.RGBA,\n  alphaMode: ALPHA_MODES.NPM\n};\nconst _BaseTexture = class extends EventEmitter {\n  constructor() {\n    let resource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super();\n    options = Object.assign({}, _BaseTexture.defaultOptions, options);\n    const {\n      alphaMode,\n      mipmap,\n      anisotropicLevel,\n      scaleMode,\n      width,\n      height,\n      wrapMode,\n      format,\n      type,\n      target,\n      resolution,\n      resourceOptions\n    } = options;\n    if (resource && !(resource instanceof Resource)) {\n      resource = autoDetectResource(resource, resourceOptions);\n      resource.internal = true;\n    }\n    this.resolution = resolution || settings.RESOLUTION;\n    this.width = Math.round((width || 0) * this.resolution) / this.resolution;\n    this.height = Math.round((height || 0) * this.resolution) / this.resolution;\n    this._mipmap = mipmap;\n    this.anisotropicLevel = anisotropicLevel;\n    this._wrapMode = wrapMode;\n    this._scaleMode = scaleMode;\n    this.format = format;\n    this.type = type;\n    this.target = target;\n    this.alphaMode = alphaMode;\n    this.uid = uid();\n    this.touched = 0;\n    this.isPowerOfTwo = false;\n    this._refreshPOT();\n    this._glTextures = {};\n    this.dirtyId = 0;\n    this.dirtyStyleId = 0;\n    this.cacheId = null;\n    this.valid = width > 0 && height > 0;\n    this.textureCacheIds = [];\n    this.destroyed = false;\n    this.resource = null;\n    this._batchEnabled = 0;\n    this._batchLocation = 0;\n    this.parentTextureArray = null;\n    this.setResource(resource);\n  }\n  get realWidth() {\n    return Math.round(this.width * this.resolution);\n  }\n  get realHeight() {\n    return Math.round(this.height * this.resolution);\n  }\n  get mipmap() {\n    return this._mipmap;\n  }\n  set mipmap(value) {\n    if (this._mipmap !== value) {\n      this._mipmap = value;\n      this.dirtyStyleId++;\n    }\n  }\n  get scaleMode() {\n    return this._scaleMode;\n  }\n  set scaleMode(value) {\n    if (this._scaleMode !== value) {\n      this._scaleMode = value;\n      this.dirtyStyleId++;\n    }\n  }\n  get wrapMode() {\n    return this._wrapMode;\n  }\n  set wrapMode(value) {\n    if (this._wrapMode !== value) {\n      this._wrapMode = value;\n      this.dirtyStyleId++;\n    }\n  }\n  setStyle(scaleMode, mipmap) {\n    let dirty;\n    if (scaleMode !== void 0 && scaleMode !== this.scaleMode) {\n      this.scaleMode = scaleMode;\n      dirty = true;\n    }\n    if (mipmap !== void 0 && mipmap !== this.mipmap) {\n      this.mipmap = mipmap;\n      dirty = true;\n    }\n    if (dirty) {\n      this.dirtyStyleId++;\n    }\n    return this;\n  }\n  setSize(desiredWidth, desiredHeight, resolution) {\n    resolution = resolution || this.resolution;\n    return this.setRealSize(desiredWidth * resolution, desiredHeight * resolution, resolution);\n  }\n  setRealSize(realWidth, realHeight, resolution) {\n    this.resolution = resolution || this.resolution;\n    this.width = Math.round(realWidth) / this.resolution;\n    this.height = Math.round(realHeight) / this.resolution;\n    this._refreshPOT();\n    this.update();\n    return this;\n  }\n  _refreshPOT() {\n    this.isPowerOfTwo = isPow2(this.realWidth) && isPow2(this.realHeight);\n  }\n  setResolution(resolution) {\n    const oldResolution = this.resolution;\n    if (oldResolution === resolution) {\n      return this;\n    }\n    this.resolution = resolution;\n    if (this.valid) {\n      this.width = Math.round(this.width * oldResolution) / resolution;\n      this.height = Math.round(this.height * oldResolution) / resolution;\n      this.emit(\"update\", this);\n    }\n    this._refreshPOT();\n    return this;\n  }\n  setResource(resource) {\n    if (this.resource === resource) {\n      return this;\n    }\n    if (this.resource) {\n      throw new Error(\"Resource can be set only once\");\n    }\n    resource.bind(this);\n    this.resource = resource;\n    return this;\n  }\n  update() {\n    if (!this.valid) {\n      if (this.width > 0 && this.height > 0) {\n        this.valid = true;\n        this.emit(\"loaded\", this);\n        this.emit(\"update\", this);\n      }\n    } else {\n      this.dirtyId++;\n      this.dirtyStyleId++;\n      this.emit(\"update\", this);\n    }\n  }\n  onError(event) {\n    this.emit(\"error\", this, event);\n  }\n  destroy() {\n    if (this.resource) {\n      this.resource.unbind(this);\n      if (this.resource.internal) {\n        this.resource.destroy();\n      }\n      this.resource = null;\n    }\n    if (this.cacheId) {\n      delete BaseTextureCache[this.cacheId];\n      delete TextureCache[this.cacheId];\n      this.cacheId = null;\n    }\n    this.dispose();\n    _BaseTexture.removeFromCache(this);\n    this.textureCacheIds = null;\n    this.destroyed = true;\n  }\n  dispose() {\n    this.emit(\"dispose\", this);\n  }\n  castToBaseTexture() {\n    return this;\n  }\n  static from(source, options) {\n    let strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : settings.STRICT_TEXTURE_CACHE;\n    const isFrame = typeof source === \"string\";\n    let cacheId = null;\n    if (isFrame) {\n      cacheId = source;\n    } else {\n      if (!source._pixiId) {\n        const prefix = options?.pixiIdPrefix || \"pixiid\";\n        source._pixiId = `${prefix}_${uid()}`;\n      }\n      cacheId = source._pixiId;\n    }\n    let baseTexture = BaseTextureCache[cacheId];\n    if (isFrame && strict && !baseTexture) {\n      throw new Error(`The cacheId \"${cacheId}\" does not exist in BaseTextureCache.`);\n    }\n    if (!baseTexture) {\n      baseTexture = new _BaseTexture(source, options);\n      baseTexture.cacheId = cacheId;\n      _BaseTexture.addToCache(baseTexture, cacheId);\n    }\n    return baseTexture;\n  }\n  static fromBuffer(buffer, width, height, options) {\n    buffer = buffer || new Float32Array(width * height * 4);\n    const resource = new BufferResource(buffer, {\n      width,\n      height\n    });\n    const type = buffer instanceof Float32Array ? TYPES.FLOAT : TYPES.UNSIGNED_BYTE;\n    return new _BaseTexture(resource, Object.assign({}, defaultBufferOptions, {\n      type\n    }, options));\n  }\n  static addToCache(baseTexture, id) {\n    if (id) {\n      if (!baseTexture.textureCacheIds.includes(id)) {\n        baseTexture.textureCacheIds.push(id);\n      }\n      if (BaseTextureCache[id] && BaseTextureCache[id] !== baseTexture) {\n        console.warn(`BaseTexture added to the cache with an id [${id}] that already had an entry`);\n      }\n      BaseTextureCache[id] = baseTexture;\n    }\n  }\n  static removeFromCache(baseTexture) {\n    if (typeof baseTexture === \"string\") {\n      const baseTextureFromCache = BaseTextureCache[baseTexture];\n      if (baseTextureFromCache) {\n        const index = baseTextureFromCache.textureCacheIds.indexOf(baseTexture);\n        if (index > -1) {\n          baseTextureFromCache.textureCacheIds.splice(index, 1);\n        }\n        delete BaseTextureCache[baseTexture];\n        return baseTextureFromCache;\n      }\n    } else if (baseTexture?.textureCacheIds) {\n      for (let i = 0; i < baseTexture.textureCacheIds.length; ++i) {\n        delete BaseTextureCache[baseTexture.textureCacheIds[i]];\n      }\n      baseTexture.textureCacheIds.length = 0;\n      return baseTexture;\n    }\n    return null;\n  }\n};\nlet BaseTexture = _BaseTexture;\nBaseTexture.defaultOptions = {\n  mipmap: MIPMAP_MODES.POW2,\n  anisotropicLevel: 0,\n  scaleMode: SCALE_MODES.LINEAR,\n  wrapMode: WRAP_MODES.CLAMP,\n  alphaMode: ALPHA_MODES.UNPACK,\n  target: TARGETS.TEXTURE_2D,\n  format: FORMATS.RGBA,\n  type: TYPES.UNSIGNED_BYTE\n};\nBaseTexture._globalBatch = 0;\nexport { BaseTexture };","map":{"version":3,"names":["defaultBufferOptions","scaleMode","SCALE_MODES","NEAREST","format","FORMATS","RGBA","alphaMode","ALPHA_MODES","NPM","_BaseTexture","EventEmitter","constructor","resource","arguments","length","undefined","options","Object","assign","defaultOptions","mipmap","anisotropicLevel","width","height","wrapMode","type","target","resolution","resourceOptions","Resource","autoDetectResource","internal","settings","RESOLUTION","Math","round","_mipmap","_wrapMode","_scaleMode","uid","touched","isPowerOfTwo","_refreshPOT","_glTextures","dirtyId","dirtyStyleId","cacheId","valid","textureCacheIds","destroyed","_batchEnabled","_batchLocation","parentTextureArray","setResource","realWidth","realHeight","value","setStyle","dirty","setSize","desiredWidth","desiredHeight","setRealSize","update","isPow2","setResolution","oldResolution","emit","Error","bind","onError","event","destroy","unbind","BaseTextureCache","TextureCache","dispose","removeFromCache","castToBaseTexture","from","source","strict","STRICT_TEXTURE_CACHE","isFrame","_pixiId","prefix","pixiIdPrefix","baseTexture","addToCache","fromBuffer","buffer","Float32Array","BufferResource","TYPES","FLOAT","UNSIGNED_BYTE","id","includes","push","console","warn","baseTextureFromCache","index","indexOf","splice","i","BaseTexture","MIPMAP_MODES","POW2","LINEAR","WRAP_MODES","CLAMP","UNPACK","TARGETS","TEXTURE_2D","_globalBatch"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\textures\\BaseTexture.ts"],"sourcesContent":["import { ALPHA_MODES, FORMATS, MIPMAP_MODES, SCALE_MODES, TARGETS, TYPES, WRAP_MODES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\nimport { BaseTextureCache, EventEmitter, isPow2, TextureCache, uid } from '@pixi/utils';\nimport { autoDetectResource } from './resources/autoDetectResource';\nimport { BufferResource } from './resources/BufferResource';\nimport { Resource } from './resources/Resource';\n\nimport type { MSAA_QUALITY } from '@pixi/constants';\nimport type { ICanvas } from '@pixi/settings';\nimport type { GLTexture } from './GLTexture';\nimport type { IAutoDetectOptions } from './resources/autoDetectResource';\n\nconst defaultBufferOptions = {\n    scaleMode: SCALE_MODES.NEAREST,\n    format: FORMATS.RGBA,\n    alphaMode: ALPHA_MODES.NPM,\n};\n\nexport type ImageSource = HTMLImageElement | HTMLVideoElement | ImageBitmap | ICanvas;\n\nexport interface IBaseTextureOptions<RO = any>\n{\n    alphaMode?: ALPHA_MODES;\n    mipmap?: MIPMAP_MODES;\n    anisotropicLevel?: number;\n    scaleMode?: SCALE_MODES;\n    width?: number;\n    height?: number;\n    wrapMode?: WRAP_MODES;\n    format?: FORMATS;\n    type?: TYPES;\n    target?: TARGETS;\n    resolution?: number;\n    multisample?: MSAA_QUALITY;\n    resourceOptions?: RO;\n    pixiIdPrefix?: string;\n}\n\nexport interface BaseTexture extends GlobalMixins.BaseTexture, EventEmitter {}\n\n/**\n * A Texture stores the information that represents an image.\n * All textures have a base texture, which contains information about the source.\n * Therefore you can have many textures all using a single BaseTexture\n * @memberof PIXI\n * @typeParam R - The BaseTexture's Resource type.\n * @typeParam RO - The options for constructing resource.\n */\nexport class BaseTexture<R extends Resource = Resource, RO = IAutoDetectOptions> extends EventEmitter\n{\n    /**\n     * The width of the base texture set when the image has loaded\n     * @readonly\n     */\n    public width: number;\n\n    /**\n     * The height of the base texture set when the image has loaded\n     * @readonly\n     */\n    public height: number;\n\n    /**\n     * The resolution / device pixel ratio of the texture\n     * @readonly\n     * @default PIXI.settings.RESOLUTION\n     */\n    public resolution: number;\n\n    /**\n     * How to treat premultiplied alpha, see {@link PIXI.ALPHA_MODES}.\n     * @member {PIXI.ALPHA_MODES}\n     * @default PIXI.ALPHA_MODES.UNPACK\n     */\n    public alphaMode?: ALPHA_MODES;\n\n    /**\n     * Anisotropic filtering level of texture\n     * @member {number}\n     * @default 0\n     */\n    public anisotropicLevel?: number;\n\n    /**\n     * The pixel format of the texture\n     * @default PIXI.FORMATS.RGBA\n     */\n    public format?: FORMATS;\n\n    /**\n     * The type of resource data\n     * @default PIXI.TYPES.UNSIGNED_BYTE\n     */\n    public type?: TYPES;\n\n    /**\n     * The target type\n     * @default PIXI.TARGETS.TEXTURE_2D\n     */\n    public target?: TARGETS;\n\n    /**\n     * Global unique identifier for this BaseTexture\n     * @protected\n     */\n    public readonly uid: number;\n\n    /**\n     * Used by automatic texture Garbage Collection, stores last GC tick when it was bound\n     * @protected\n     */\n    touched: number;\n\n    /**\n     * Whether or not the texture is a power of two, try to use power of two textures as much\n     * as you can\n     * @readonly\n     * @default false\n     */\n    isPowerOfTwo: boolean;\n\n    /**\n     * The map of render context textures where this is bound\n     * @private\n     */\n    _glTextures: { [key: number]: GLTexture };\n\n    /**\n     * Used by TextureSystem to only update texture to the GPU when needed.\n     * Please call `update()` to increment it.\n     * @readonly\n     */\n    dirtyId: number;\n\n    /**\n     * Used by TextureSystem to only update texture style when needed.\n     * @protected\n     */\n    dirtyStyleId: number;\n\n    /**\n     * Currently default cache ID.\n     * @member {string}\n     */\n    public cacheId: string;\n\n    /**\n     * Generally speaking means when resource is loaded.\n     * @readonly\n     * @member {boolean}\n     */\n    public valid: boolean;\n\n    /**\n     * The collection of alternative cache ids, since some BaseTextures\n     * can have more than one ID, short name and longer full URL\n     * @member {Array<string>}\n     * @readonly\n     */\n    public textureCacheIds: Array<string>;\n\n    /**\n     * Flag if BaseTexture has been destroyed.\n     * @member {boolean}\n     * @readonly\n     */\n    public destroyed: boolean;\n\n    /**\n     * The resource used by this BaseTexture, there can only\n     * be one resource per BaseTexture, but textures can share\n     * resources.\n     * @member {PIXI.Resource}\n     * @readonly\n     */\n    public resource: R;\n\n    /**\n     * Number of the texture batch, used by multi-texture renderers\n     * @member {number}\n     */\n    _batchEnabled: number;\n\n    /**\n     * Location inside texture batch, used by multi-texture renderers\n     * @member {number}\n     */\n    _batchLocation: number;\n\n    /**\n     * Whether its a part of another texture, handled by ArrayResource or CubeResource\n     * @member {PIXI.BaseTexture}\n     */\n    parentTextureArray: BaseTexture;\n\n    private _mipmap?: MIPMAP_MODES;\n    private _scaleMode?: SCALE_MODES;\n    private _wrapMode?: WRAP_MODES;\n\n    /**\n     * Default options used when creating BaseTexture objects.\n     * @static\n     * @memberof PIXI.BaseTexture\n     * @type {PIXI.IBaseTextureOptions}\n     */\n    public static defaultOptions: IBaseTextureOptions = {\n        /**\n         * If mipmapping is enabled for texture.\n         * @type {PIXI.MIPMAP_MODES}\n         * @default PIXI.MIPMAP_MODES.POW2\n         */\n        mipmap: MIPMAP_MODES.POW2,\n        /** Anisotropic filtering level of texture */\n        anisotropicLevel: 0,\n        /**\n         * Default scale mode, linear, nearest.\n         * @type {PIXI.SCALE_MODES}\n         * @default PIXI.SCALE_MODES.LINEAR\n         */\n        scaleMode: SCALE_MODES.LINEAR,\n        /**\n         * Wrap mode for textures.\n         * @type {PIXI.WRAP_MODES}\n         * @default PIXI.WRAP_MODES.CLAMP\n         */\n        wrapMode: WRAP_MODES.CLAMP,\n        /**\n         * Pre multiply the image alpha\n         * @type {PIXI.ALPHA_MODES}\n         * @default PIXI.ALPHA_MODES.UNPACK\n         */\n        alphaMode: ALPHA_MODES.UNPACK,\n        /**\n         * GL texture target\n         * @type {PIXI.TARGETS}\n         * @default PIXI.TARGETS.TEXTURE_2D\n         */\n        target: TARGETS.TEXTURE_2D,\n        /**\n         * GL format type\n         * @type {PIXI.FORMATS}\n         * @default PIXI.FORMATS.RGBA\n         */\n        format: FORMATS.RGBA,\n        /**\n         * GL data type\n         * @type {PIXI.TYPES}\n         * @default PIXI.TYPES.UNSIGNED_BYTE\n         */\n        type: TYPES.UNSIGNED_BYTE,\n    };\n\n    /**\n     * @param {PIXI.Resource|HTMLImageElement|HTMLVideoElement|ImageBitmap|ICanvas|string} [resource=null] -\n     *        The current resource to use, for things that aren't Resource objects, will be converted\n     *        into a Resource.\n     * @param options - Collection of options, default options inherited from {@link PIXI.BaseTexture.defaultOptions}.\n     * @param {PIXI.MIPMAP_MODES} [options.mipmap] - If mipmapping is enabled for texture\n     * @param {number} [options.anisotropicLevel] - Anisotropic filtering level of texture\n     * @param {PIXI.WRAP_MODES} [options.wrapMode] - Wrap mode for textures\n     * @param {PIXI.SCALE_MODES} [options.scaleMode] - Default scale mode, linear, nearest\n     * @param {PIXI.FORMATS} [options.format] - GL format type\n     * @param {PIXI.TYPES} [options.type] - GL data type\n     * @param {PIXI.TARGETS} [options.target] - GL texture target\n     * @param {PIXI.ALPHA_MODES} [options.alphaMode] - Pre multiply the image alpha\n     * @param {number} [options.width=0] - Width of the texture\n     * @param {number} [options.height=0] - Height of the texture\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - Resolution of the base texture\n     * @param {object} [options.resourceOptions] - Optional resource options,\n     *        see {@link PIXI.autoDetectResource autoDetectResource}\n     */\n    constructor(resource: R | ImageSource | string | any = null, options: IBaseTextureOptions<RO> = null)\n    {\n        super();\n\n        options = Object.assign({}, BaseTexture.defaultOptions, options);\n\n        const {\n            alphaMode, mipmap, anisotropicLevel, scaleMode, width, height,\n            wrapMode, format, type, target, resolution, resourceOptions\n        } = options;\n\n        // Convert the resource to a Resource object\n        if (resource && !(resource instanceof Resource))\n        {\n            resource = autoDetectResource<R, RO>(resource, resourceOptions);\n            resource.internal = true;\n        }\n\n        this.resolution = resolution || settings.RESOLUTION;\n        this.width = Math.round((width || 0) * this.resolution) / this.resolution;\n        this.height = Math.round((height || 0) * this.resolution) / this.resolution;\n        this._mipmap = mipmap;\n        this.anisotropicLevel = anisotropicLevel;\n        this._wrapMode = wrapMode;\n        this._scaleMode = scaleMode;\n        this.format = format;\n        this.type = type;\n        this.target = target;\n        this.alphaMode = alphaMode;\n\n        this.uid = uid();\n        this.touched = 0;\n        this.isPowerOfTwo = false;\n        this._refreshPOT();\n\n        this._glTextures = {};\n        this.dirtyId = 0;\n        this.dirtyStyleId = 0;\n        this.cacheId = null;\n        this.valid = width > 0 && height > 0;\n        this.textureCacheIds = [];\n        this.destroyed = false;\n        this.resource = null;\n\n        this._batchEnabled = 0;\n        this._batchLocation = 0;\n        this.parentTextureArray = null;\n\n        /**\n         * Fired when a not-immediately-available source finishes loading.\n         * @protected\n         * @event PIXI.BaseTexture#loaded\n         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.\n         */\n\n        /**\n         * Fired when a not-immediately-available source fails to load.\n         * @protected\n         * @event PIXI.BaseTexture#error\n         * @param {PIXI.BaseTexture} baseTexture - Resource errored.\n         * @param {ErrorEvent} event - Load error event.\n         */\n\n        /**\n         * Fired when BaseTexture is updated.\n         * @protected\n         * @event PIXI.BaseTexture#loaded\n         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.\n         */\n\n        /**\n         * Fired when BaseTexture is updated.\n         * @protected\n         * @event PIXI.BaseTexture#update\n         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being updated.\n         */\n\n        /**\n         * Fired when BaseTexture is destroyed.\n         * @protected\n         * @event PIXI.BaseTexture#dispose\n         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being destroyed.\n         */\n\n        // Set the resource\n        this.setResource(resource);\n    }\n\n    /**\n     * Pixel width of the source of this texture\n     * @readonly\n     */\n    get realWidth(): number\n    {\n        return Math.round(this.width * this.resolution);\n    }\n\n    /**\n     * Pixel height of the source of this texture\n     * @readonly\n     */\n    get realHeight(): number\n    {\n        return Math.round(this.height * this.resolution);\n    }\n\n    /**\n     * Mipmap mode of the texture, affects downscaled images\n     * @default PIXI.MIPMAP_MODES.POW2\n     */\n    get mipmap(): MIPMAP_MODES\n    {\n        return this._mipmap;\n    }\n    set mipmap(value: MIPMAP_MODES)\n    {\n        if (this._mipmap !== value)\n        {\n            this._mipmap = value;\n            this.dirtyStyleId++;\n        }\n    }\n\n    /**\n     * The scale mode to apply when scaling this texture\n     * @default PIXI.SCALE_MODES.LINEAR\n     */\n    get scaleMode(): SCALE_MODES\n    {\n        return this._scaleMode;\n    }\n    set scaleMode(value: SCALE_MODES)\n    {\n        if (this._scaleMode !== value)\n        {\n            this._scaleMode = value;\n            this.dirtyStyleId++;\n        }\n    }\n\n    /**\n     * How the texture wraps\n     * @default PIXI.WRAP_MODES.CLAMP\n     */\n    get wrapMode(): WRAP_MODES\n    {\n        return this._wrapMode;\n    }\n    set wrapMode(value: WRAP_MODES)\n    {\n        if (this._wrapMode !== value)\n        {\n            this._wrapMode = value;\n            this.dirtyStyleId++;\n        }\n    }\n\n    /**\n     * Changes style options of BaseTexture\n     * @param scaleMode - Pixi scalemode\n     * @param mipmap - enable mipmaps\n     * @returns - this\n     */\n    setStyle(scaleMode?: SCALE_MODES, mipmap?: MIPMAP_MODES): this\n    {\n        let dirty;\n\n        if (scaleMode !== undefined && scaleMode !== this.scaleMode)\n        {\n            this.scaleMode = scaleMode;\n            dirty = true;\n        }\n\n        if (mipmap !== undefined && mipmap !== this.mipmap)\n        {\n            this.mipmap = mipmap;\n            dirty = true;\n        }\n\n        if (dirty)\n        {\n            this.dirtyStyleId++;\n        }\n\n        return this;\n    }\n\n    /**\n     * Changes w/h/resolution. Texture becomes valid if width and height are greater than zero.\n     * @param desiredWidth - Desired visual width\n     * @param desiredHeight - Desired visual height\n     * @param resolution - Optionally set resolution\n     * @returns - this\n     */\n    setSize(desiredWidth: number, desiredHeight: number, resolution?: number): this\n    {\n        resolution = resolution || this.resolution;\n\n        return this.setRealSize(desiredWidth * resolution, desiredHeight * resolution, resolution);\n    }\n\n    /**\n     * Sets real size of baseTexture, preserves current resolution.\n     * @param realWidth - Full rendered width\n     * @param realHeight - Full rendered height\n     * @param resolution - Optionally set resolution\n     * @returns - this\n     */\n    setRealSize(realWidth: number, realHeight: number, resolution?: number): this\n    {\n        this.resolution = resolution || this.resolution;\n        this.width = Math.round(realWidth) / this.resolution;\n        this.height = Math.round(realHeight) / this.resolution;\n        this._refreshPOT();\n        this.update();\n\n        return this;\n    }\n\n    /**\n     * Refresh check for isPowerOfTwo texture based on size\n     * @private\n     */\n    protected _refreshPOT(): void\n    {\n        this.isPowerOfTwo = isPow2(this.realWidth) && isPow2(this.realHeight);\n    }\n\n    /**\n     * Changes resolution\n     * @param resolution - res\n     * @returns - this\n     */\n    setResolution(resolution: number): this\n    {\n        const oldResolution = this.resolution;\n\n        if (oldResolution === resolution)\n        {\n            return this;\n        }\n\n        this.resolution = resolution;\n\n        if (this.valid)\n        {\n            this.width = Math.round(this.width * oldResolution) / resolution;\n            this.height = Math.round(this.height * oldResolution) / resolution;\n            this.emit('update', this);\n        }\n\n        this._refreshPOT();\n\n        return this;\n    }\n\n    /**\n     * Sets the resource if it wasn't set. Throws error if resource already present\n     * @param resource - that is managing this BaseTexture\n     * @returns - this\n     */\n    setResource(resource: R): this\n    {\n        if (this.resource === resource)\n        {\n            return this;\n        }\n\n        if (this.resource)\n        {\n            throw new Error('Resource can be set only once');\n        }\n\n        resource.bind(this);\n\n        this.resource = resource;\n\n        return this;\n    }\n\n    /** Invalidates the object. Texture becomes valid if width and height are greater than zero. */\n    update(): void\n    {\n        if (!this.valid)\n        {\n            if (this.width > 0 && this.height > 0)\n            {\n                this.valid = true;\n                this.emit('loaded', this);\n                this.emit('update', this);\n            }\n        }\n        else\n        {\n            this.dirtyId++;\n            this.dirtyStyleId++;\n            this.emit('update', this);\n        }\n    }\n\n    /**\n     * Handle errors with resources.\n     * @private\n     * @param event - Error event emitted.\n     */\n    onError(event: ErrorEvent): void\n    {\n        this.emit('error', this, event);\n    }\n\n    /**\n     * Destroys this base texture.\n     * The method stops if resource doesn't want this texture to be destroyed.\n     * Removes texture from all caches.\n     */\n    destroy(): void\n    {\n        // remove and destroy the resource\n        if (this.resource)\n        {\n            this.resource.unbind(this);\n            // only destroy resourced created internally\n            if (this.resource.internal)\n            {\n                this.resource.destroy();\n            }\n            this.resource = null;\n        }\n\n        if (this.cacheId)\n        {\n            delete BaseTextureCache[this.cacheId];\n            delete TextureCache[this.cacheId];\n\n            this.cacheId = null;\n        }\n\n        // finally let the WebGL renderer know..\n        this.dispose();\n\n        BaseTexture.removeFromCache(this);\n        this.textureCacheIds = null;\n\n        this.destroyed = true;\n    }\n\n    /**\n     * Frees the texture from WebGL memory without destroying this texture object.\n     * This means you can still use the texture later which will upload it to GPU\n     * memory again.\n     * @fires PIXI.BaseTexture#dispose\n     */\n    dispose(): void\n    {\n        this.emit('dispose', this);\n    }\n\n    /** Utility function for BaseTexture|Texture cast. */\n    castToBaseTexture(): BaseTexture\n    {\n        return this;\n    }\n\n    /**\n     * Helper function that creates a base texture based on the source you provide.\n     * The source can be - image url, image element, canvas element. If the\n     * source is an image url or an image element and not in the base texture\n     * cache, it will be created and loaded.\n     * @static\n     * @param {HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas|string|string[]} source - The\n     *        source to create base texture from.\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id\n     * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.\n     * @returns {PIXI.BaseTexture} The new base texture.\n     */\n    static from<R extends Resource = Resource, RO = IAutoDetectOptions>(source: ImageSource | string | string[],\n        options?: IBaseTextureOptions<RO>, strict = settings.STRICT_TEXTURE_CACHE): BaseTexture<R>\n    {\n        const isFrame = typeof source === 'string';\n        let cacheId = null;\n\n        if (isFrame)\n        {\n            cacheId = source;\n        }\n        else\n        {\n            if (!(source as any)._pixiId)\n            {\n                const prefix = options?.pixiIdPrefix || 'pixiid';\n\n                (source as any)._pixiId = `${prefix}_${uid()}`;\n            }\n\n            cacheId = (source as any)._pixiId;\n        }\n\n        let baseTexture = BaseTextureCache[cacheId] as BaseTexture<R>;\n\n        // Strict-mode rejects invalid cacheIds\n        if (isFrame && strict && !baseTexture)\n        {\n            throw new Error(`The cacheId \"${cacheId}\" does not exist in BaseTextureCache.`);\n        }\n\n        if (!baseTexture)\n        {\n            baseTexture = new BaseTexture<R>(source, options);\n            baseTexture.cacheId = cacheId;\n            BaseTexture.addToCache(baseTexture, cacheId);\n        }\n\n        return baseTexture;\n    }\n\n    /**\n     * Create a new BaseTexture with a BufferResource from a Float32Array.\n     * RGBA values are floats from 0 to 1.\n     * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data\n     *        is provided, a new Float32Array is created.\n     * @param width - Width of the resource\n     * @param height - Height of the resource\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     *        Default properties are different from the constructor's defaults.\n     * @param {PIXI.FORMATS} [options.format=PIXI.FORMATS.RGBA] - GL format type\n     * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.NPM] - Image alpha, not premultiplied by default\n     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.SCALE_MODES.NEAREST] - Scale mode, pixelating by default\n     * @returns - The resulting new BaseTexture\n     */\n    static fromBuffer(buffer: Float32Array | Uint8Array,\n        width: number, height: number, options?: IBaseTextureOptions): BaseTexture<BufferResource>\n    {\n        buffer = buffer || new Float32Array(width * height * 4);\n\n        const resource = new BufferResource(buffer, { width, height });\n        const type = buffer instanceof Float32Array ? TYPES.FLOAT : TYPES.UNSIGNED_BYTE;\n\n        return new BaseTexture(resource, Object.assign({}, defaultBufferOptions, { type }, options));\n    }\n\n    /**\n     * Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.\n     * @param {PIXI.BaseTexture} baseTexture - The BaseTexture to add to the cache.\n     * @param {string} id - The id that the BaseTexture will be stored against.\n     */\n    static addToCache(baseTexture: BaseTexture, id: string): void\n    {\n        if (id)\n        {\n            if (!baseTexture.textureCacheIds.includes(id))\n            {\n                baseTexture.textureCacheIds.push(id);\n            }\n\n            // only throw a warning if there is a different base texture mapped to this id.\n            if (BaseTextureCache[id] && BaseTextureCache[id] !== baseTexture)\n            {\n                // eslint-disable-next-line no-console\n                console.warn(`BaseTexture added to the cache with an id [${id}] that already had an entry`);\n            }\n\n            BaseTextureCache[id] = baseTexture;\n        }\n    }\n\n    /**\n     * Remove a BaseTexture from the global BaseTextureCache.\n     * @param {string|PIXI.BaseTexture} baseTexture - id of a BaseTexture to be removed, or a BaseTexture instance itself.\n     * @returns {PIXI.BaseTexture|null} The BaseTexture that was removed.\n     */\n    static removeFromCache(baseTexture: string | BaseTexture): BaseTexture | null\n    {\n        if (typeof baseTexture === 'string')\n        {\n            const baseTextureFromCache = BaseTextureCache[baseTexture];\n\n            if (baseTextureFromCache)\n            {\n                const index = baseTextureFromCache.textureCacheIds.indexOf(baseTexture);\n\n                if (index > -1)\n                {\n                    baseTextureFromCache.textureCacheIds.splice(index, 1);\n                }\n\n                delete BaseTextureCache[baseTexture];\n\n                return baseTextureFromCache;\n            }\n        }\n        else if (baseTexture?.textureCacheIds)\n        {\n            for (let i = 0; i < baseTexture.textureCacheIds.length; ++i)\n            {\n                delete BaseTextureCache[baseTexture.textureCacheIds[i]];\n            }\n\n            baseTexture.textureCacheIds.length = 0;\n\n            return baseTexture;\n        }\n\n        return null;\n    }\n\n    /** Global number of the texture batch, used by multi-texture renderers. */\n    static _globalBatch = 0;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}