{"ast":null,"code":"import { SHAPES } from '../const.mjs';\nclass Polygon {\n  constructor() {\n    for (var _len = arguments.length, points = new Array(_len), _key = 0; _key < _len; _key++) {\n      points[_key] = arguments[_key];\n    }\n    let flat = Array.isArray(points[0]) ? points[0] : points;\n    if (typeof flat[0] !== \"number\") {\n      const p = [];\n      for (let i = 0, il = flat.length; i < il; i++) {\n        p.push(flat[i].x, flat[i].y);\n      }\n      flat = p;\n    }\n    this.points = flat;\n    this.type = SHAPES.POLY;\n    this.closeStroke = true;\n  }\n  clone() {\n    const points = this.points.slice();\n    const polygon = new Polygon(points);\n    polygon.closeStroke = this.closeStroke;\n    return polygon;\n  }\n  contains(x, y) {\n    let inside = false;\n    const length = this.points.length / 2;\n    for (let i = 0, j = length - 1; i < length; j = i++) {\n      const xi = this.points[i * 2];\n      const yi = this.points[i * 2 + 1];\n      const xj = this.points[j * 2];\n      const yj = this.points[j * 2 + 1];\n      const intersect = yi > y !== yj > y && x < (xj - xi) * ((y - yi) / (yj - yi)) + xi;\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n    return inside;\n  }\n  toString() {\n    return `[@pixi/math:PolygoncloseStroke=${this.closeStroke}points=${this.points.reduce((pointsDesc, currentPoint) => `${pointsDesc}, ${currentPoint}`, \"\")}]`;\n  }\n}\nexport { Polygon };","map":{"version":3,"names":["Polygon","constructor","_len","arguments","length","points","Array","_key","flat","isArray","p","i","il","push","x","y","type","SHAPES","POLY","closeStroke","clone","slice","polygon","contains","inside","j","xi","yi","xj","yj","intersect","toString","reduce","pointsDesc","currentPoint"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\math\\src\\shapes\\Polygon.ts"],"sourcesContent":["import { SHAPES } from '../const';\n\nimport type { IPointData } from '../IPointData';\n\n/**\n * A class to define a shape via user defined coordinates.\n * @memberof PIXI\n */\nexport class Polygon\n{\n    /** An array of the points of this polygon. */\n    public points: number[];\n\n    /** `false` after moveTo, `true` after `closePath`. In all other cases it is `true`. */\n    public closeStroke: boolean;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.POLY\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.POLY;\n\n    constructor(points: IPointData[] | number[]);\n    constructor(...points: IPointData[] | number[]);\n\n    /**\n     * @param {PIXI.IPointData[]|number[]} points - This can be an array of Points\n     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n     *  the arguments passed can be all the points of the polygon e.g.\n     *  `new Polygon(new Point(), new Point(), ...)`, or the arguments passed can be flat\n     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n     */\n    constructor(...points: any[])\n    {\n        let flat: IPointData[] | number[] = Array.isArray(points[0]) ? points[0] : points;\n\n        // if this is an array of points, convert it to a flat array of numbers\n        if (typeof flat[0] !== 'number')\n        {\n            const p: number[] = [];\n\n            for (let i = 0, il = flat.length; i < il; i++)\n            {\n                p.push((flat[i] as IPointData).x, (flat[i] as IPointData).y);\n            }\n\n            flat = p;\n        }\n\n        this.points = flat as number[];\n        this.type = SHAPES.POLY;\n        this.closeStroke = true;\n    }\n\n    /**\n     * Creates a clone of this polygon.\n     * @returns - A copy of the polygon.\n     */\n    clone(): Polygon\n    {\n        const points = this.points.slice();\n        const polygon = new Polygon(points);\n\n        polygon.closeStroke = this.closeStroke;\n\n        return polygon;\n    }\n\n    /**\n     * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this polygon.\n     */\n    contains(x: number, y: number): boolean\n    {\n        let inside = false;\n\n        // use some raycasting to test hits\n        // https://github.com/substack/point-in-polygon/blob/master/index.js\n        const length = this.points.length / 2;\n\n        for (let i = 0, j = length - 1; i < length; j = i++)\n        {\n            const xi = this.points[i * 2];\n            const yi = this.points[(i * 2) + 1];\n            const xj = this.points[j * 2];\n            const yj = this.points[(j * 2) + 1];\n            const intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);\n\n            if (intersect)\n            {\n                inside = !inside;\n            }\n        }\n\n        return inside;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Polygon`\n            + `closeStroke=${this.closeStroke}`\n            + `points=${this.points.reduce((pointsDesc, currentPoint) => `${pointsDesc}, ${currentPoint}`, '')}]`;\n    }\n    // #endif\n}\n"],"mappings":";AAQO,MAAMA,OACb;EAwBIC,YAAA,EACA;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EADeC,MACf,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MADeF,MACf,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IACI,IAAIC,IAAA,GAAgCF,KAAM,CAAAG,OAAA,CAAQJ,MAAA,CAAO,CAAE,KAAIA,MAAA,CAAO,CAAK,IAAAA,MAAA;IAGvE,WAAOG,IAAK,QAAO,QACvB;MACI,MAAME,CAAA,GAAc,EAAC;MAErB,SAASC,CAAA,GAAI,CAAG,EAAAC,EAAA,GAAKJ,IAAA,CAAKJ,MAAQ,EAAAO,CAAA,GAAIC,EAAA,EAAID,CAC1C;QACID,CAAA,CAAEG,IAAA,CAAML,IAAK,CAAAG,CAAA,EAAkBG,CAAI,EAAAN,IAAA,CAAKG,CAAA,EAAkBI,CAAC;MAAA;MAGxDP,IAAA,GAAAE,CAAA;IAAA;IAGX,KAAKL,MAAS,GAAAG,IAAA;IACd,KAAKQ,IAAA,GAAOC,MAAO,CAAAC,IAAA;IACnB,KAAKC,WAAc;EAAA;EAOvBC,KACAA,CAAA;IACU,MAAAf,MAAA,GAAS,IAAK,CAAAA,MAAA,CAAOgB,KAAM;IAC3B,MAAAC,OAAA,GAAU,IAAItB,OAAA,CAAQK,MAAM;IAElCiB,OAAA,CAAQH,WAAA,GAAc,IAAK,CAAAA,WAAA;IAEpB,OAAAG,OAAA;EAAA;EASXC,SAAST,CAAA,EAAWC,CACpB;IACI,IAAIS,MAAS;IAIP,MAAApB,MAAA,GAAS,IAAK,CAAAC,MAAA,CAAOD,MAAS;IAE3B,SAAAO,CAAA,GAAI,GAAGc,CAAI,GAAArB,MAAA,GAAS,GAAGO,CAAI,GAAAP,MAAA,EAAQqB,CAAA,GAAId,CAChD;MACU,MAAAe,EAAA,GAAK,IAAK,CAAArB,MAAA,CAAOM,CAAI;MAC3B,MAAMgB,EAAK,QAAKtB,MAAQ,CAAAM,CAAA,GAAI,CAAK;MAC3B,MAAAiB,EAAA,GAAK,IAAK,CAAAvB,MAAA,CAAOoB,CAAI;MAC3B,MAAMI,EAAK,QAAKxB,MAAQ,CAAAoB,CAAA,GAAI,CAAK;MAC3B,MAAAK,SAAA,GAAcH,EAAK,GAAAZ,CAAA,KAAQc,EAAK,GAAAd,CAAA,IAAQD,CAAM,IAAAc,EAAA,GAAKF,EAAQ,MAAAX,CAAA,GAAIY,EAAO,KAAAE,EAAA,GAAKF,EAAQ,KAAAD,EAAA;MAEzF,IAAII,SACJ;QACIN,MAAA,GAAS,CAACA,MAAA;MAAA;IACd;IAGG,OAAAA,MAAA;EAAA;EAIXO,QACAA,CAAA;IACI,OACqB,uCAAKZ,WACV,eAAKd,MAAO,CAAA2B,MAAA,CAAO,CAACC,UAAA,EAAYC,YAAiB,QAAGD,UAAe,KAAAC,YAAA,IAAgB,EAAE;EAAA;AAG7G"},"metadata":{},"sourceType":"module","externalDependencies":[]}