{"ast":null,"code":"import { settings, Texture, Rectangle, utils, Color } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { TEXT_GRADIENT } from './const.mjs';\nimport { TextMetrics } from './TextMetrics.mjs';\nimport { TextStyle } from './TextStyle.mjs';\nconst defaultDestroyOptions = {\n  texture: true,\n  children: false,\n  baseTexture: true\n};\nconst _Text = class extends Sprite {\n  constructor(text, style, canvas) {\n    let ownCanvas = false;\n    if (!canvas) {\n      canvas = settings.ADAPTER.createCanvas();\n      ownCanvas = true;\n    }\n    canvas.width = 3;\n    canvas.height = 3;\n    const texture = Texture.from(canvas);\n    texture.orig = new Rectangle();\n    texture.trim = new Rectangle();\n    super(texture);\n    this._ownCanvas = ownCanvas;\n    this.canvas = canvas;\n    this.context = canvas.getContext(\"2d\", {\n      willReadFrequently: true\n    });\n    this._resolution = _Text.defaultResolution ?? settings.RESOLUTION;\n    this._autoResolution = _Text.defaultAutoResolution;\n    this._text = null;\n    this._style = null;\n    this._styleListener = null;\n    this._font = \"\";\n    this.text = text;\n    this.style = style;\n    this.localStyleID = -1;\n  }\n  static get experimentalLetterSpacing() {\n    return TextMetrics.experimentalLetterSpacing;\n  }\n  static set experimentalLetterSpacing(value) {\n    utils.deprecation(\"7.1.0\", \"Text.experimentalLetterSpacing is deprecated, use TextMetrics.experimentalLetterSpacing\");\n    TextMetrics.experimentalLetterSpacing = value;\n  }\n  updateText(respectDirty) {\n    const style = this._style;\n    if (this.localStyleID !== style.styleID) {\n      this.dirty = true;\n      this.localStyleID = style.styleID;\n    }\n    if (!this.dirty && respectDirty) {\n      return;\n    }\n    this._font = this._style.toFontString();\n    const context = this.context;\n    const measured = TextMetrics.measureText(this._text || \" \", this._style, this._style.wordWrap, this.canvas);\n    const width = measured.width;\n    const height = measured.height;\n    const lines = measured.lines;\n    const lineHeight = measured.lineHeight;\n    const lineWidths = measured.lineWidths;\n    const maxLineWidth = measured.maxLineWidth;\n    const fontProperties = measured.fontProperties;\n    this.canvas.width = Math.ceil(Math.ceil(Math.max(1, width) + style.padding * 2) * this._resolution);\n    this.canvas.height = Math.ceil(Math.ceil(Math.max(1, height) + style.padding * 2) * this._resolution);\n    context.scale(this._resolution, this._resolution);\n    context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    context.font = this._font;\n    context.lineWidth = style.strokeThickness;\n    context.textBaseline = style.textBaseline;\n    context.lineJoin = style.lineJoin;\n    context.miterLimit = style.miterLimit;\n    let linePositionX;\n    let linePositionY;\n    const passesCount = style.dropShadow ? 2 : 1;\n    for (let i = 0; i < passesCount; ++i) {\n      const isShadowPass = style.dropShadow && i === 0;\n      const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + style.padding * 2) : 0;\n      const dsOffsetShadow = dsOffsetText * this._resolution;\n      if (isShadowPass) {\n        context.fillStyle = \"black\";\n        context.strokeStyle = \"black\";\n        const dropShadowColor = style.dropShadowColor;\n        const dropShadowBlur = style.dropShadowBlur * this._resolution;\n        const dropShadowDistance = style.dropShadowDistance * this._resolution;\n        context.shadowColor = Color.shared.setValue(dropShadowColor).setAlpha(style.dropShadowAlpha).toRgbaString();\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(style.dropShadowAngle) * dropShadowDistance + dsOffsetShadow;\n      } else {\n        context.fillStyle = this._generateFillStyle(style, lines, measured);\n        context.strokeStyle = style.stroke;\n        context.shadowColor = \"black\";\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n      }\n      let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n      if (lineHeight - fontProperties.fontSize < 0) {\n        linePositionYShift = 0;\n      }\n      for (let i2 = 0; i2 < lines.length; i2++) {\n        linePositionX = style.strokeThickness / 2;\n        linePositionY = style.strokeThickness / 2 + i2 * lineHeight + fontProperties.ascent + linePositionYShift;\n        if (style.align === \"right\") {\n          linePositionX += maxLineWidth - lineWidths[i2];\n        } else if (style.align === \"center\") {\n          linePositionX += (maxLineWidth - lineWidths[i2]) / 2;\n        }\n        if (style.stroke && style.strokeThickness) {\n          this.drawLetterSpacing(lines[i2], linePositionX + style.padding, linePositionY + style.padding - dsOffsetText, true);\n        }\n        if (style.fill) {\n          this.drawLetterSpacing(lines[i2], linePositionX + style.padding, linePositionY + style.padding - dsOffsetText);\n        }\n      }\n    }\n    this.updateTexture();\n  }\n  drawLetterSpacing(text, x, y) {\n    let isStroke = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const style = this._style;\n    const letterSpacing = style.letterSpacing;\n    let useExperimentalLetterSpacing = false;\n    if (TextMetrics.experimentalLetterSpacingSupported) {\n      if (TextMetrics.experimentalLetterSpacing) {\n        this.context.letterSpacing = `${letterSpacing}px`;\n        this.context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        this.context.letterSpacing = \"0px\";\n        this.context.textLetterSpacing = \"0px\";\n      }\n    }\n    if (letterSpacing === 0 || useExperimentalLetterSpacing) {\n      if (isStroke) {\n        this.context.strokeText(text, x, y);\n      } else {\n        this.context.fillText(text, x, y);\n      }\n      return;\n    }\n    let currentPosition = x;\n    const stringArray = TextMetrics.graphemeSegmenter(text);\n    let previousWidth = this.context.measureText(text).width;\n    let currentWidth = 0;\n    for (let i = 0; i < stringArray.length; ++i) {\n      const currentChar = stringArray[i];\n      if (isStroke) {\n        this.context.strokeText(currentChar, currentPosition, y);\n      } else {\n        this.context.fillText(currentChar, currentPosition, y);\n      }\n      let textStr = \"\";\n      for (let j = i + 1; j < stringArray.length; ++j) {\n        textStr += stringArray[j];\n      }\n      currentWidth = this.context.measureText(textStr).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  }\n  updateTexture() {\n    const canvas = this.canvas;\n    if (this._style.trim) {\n      const trimmed = utils.trimCanvas(canvas);\n      if (trimmed.data) {\n        canvas.width = trimmed.width;\n        canvas.height = trimmed.height;\n        this.context.putImageData(trimmed.data, 0, 0);\n      }\n    }\n    const texture = this._texture;\n    const style = this._style;\n    const padding = style.trim ? 0 : style.padding;\n    const baseTexture = texture.baseTexture;\n    texture.trim.width = texture._frame.width = canvas.width / this._resolution;\n    texture.trim.height = texture._frame.height = canvas.height / this._resolution;\n    texture.trim.x = -padding;\n    texture.trim.y = -padding;\n    texture.orig.width = texture._frame.width - padding * 2;\n    texture.orig.height = texture._frame.height - padding * 2;\n    this._onTextureUpdate();\n    baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n    texture.updateUvs();\n    this.dirty = false;\n  }\n  _render(renderer) {\n    if (this._autoResolution && this._resolution !== renderer.resolution) {\n      this._resolution = renderer.resolution;\n      this.dirty = true;\n    }\n    this.updateText(true);\n    super._render(renderer);\n  }\n  updateTransform() {\n    this.updateText(true);\n    super.updateTransform();\n  }\n  getBounds(skipUpdate, rect) {\n    this.updateText(true);\n    if (this._textureID === -1) {\n      skipUpdate = false;\n    }\n    return super.getBounds(skipUpdate, rect);\n  }\n  getLocalBounds(rect) {\n    this.updateText(true);\n    return super.getLocalBounds.call(this, rect);\n  }\n  _calculateBounds() {\n    this.calculateVertices();\n    this._bounds.addQuad(this.vertexData);\n  }\n  _generateFillStyle(style, lines, metrics) {\n    const fillStyle = style.fill;\n    if (!Array.isArray(fillStyle)) {\n      return fillStyle;\n    } else if (fillStyle.length === 1) {\n      return fillStyle[0];\n    }\n    let gradient;\n    const dropShadowCorrection = style.dropShadow ? style.dropShadowDistance : 0;\n    const padding = style.padding || 0;\n    const width = this.canvas.width / this._resolution - dropShadowCorrection - padding * 2;\n    const height = this.canvas.height / this._resolution - dropShadowCorrection - padding * 2;\n    const fill = fillStyle.slice();\n    const fillGradientStops = style.fillGradientStops.slice();\n    if (!fillGradientStops.length) {\n      const lengthPlus1 = fill.length + 1;\n      for (let i = 1; i < lengthPlus1; ++i) {\n        fillGradientStops.push(i / lengthPlus1);\n      }\n    }\n    fill.unshift(fillStyle[0]);\n    fillGradientStops.unshift(0);\n    fill.push(fillStyle[fillStyle.length - 1]);\n    fillGradientStops.push(1);\n    if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL) {\n      gradient = this.context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n      const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n      for (let i = 0; i < lines.length; i++) {\n        const lastLineBottom = metrics.lineHeight * (i - 1) + textHeight;\n        const thisLineTop = metrics.lineHeight * i;\n        let thisLineGradientStart = thisLineTop;\n        if (i > 0 && lastLineBottom > thisLineTop) {\n          thisLineGradientStart = (thisLineTop + lastLineBottom) / 2;\n        }\n        const thisLineBottom = thisLineTop + textHeight;\n        const nextLineTop = metrics.lineHeight * (i + 1);\n        let thisLineGradientEnd = thisLineBottom;\n        if (i + 1 < lines.length && nextLineTop < thisLineBottom) {\n          thisLineGradientEnd = (thisLineBottom + nextLineTop) / 2;\n        }\n        const gradStopLineHeight = (thisLineGradientEnd - thisLineGradientStart) / height;\n        for (let j = 0; j < fill.length; j++) {\n          let lineStop = 0;\n          if (typeof fillGradientStops[j] === \"number\") {\n            lineStop = fillGradientStops[j];\n          } else {\n            lineStop = j / fill.length;\n          }\n          let globalStop = Math.min(1, Math.max(0, thisLineGradientStart / height + lineStop * gradStopLineHeight));\n          globalStop = Number(globalStop.toFixed(5));\n          gradient.addColorStop(globalStop, fill[j]);\n        }\n      }\n    } else {\n      gradient = this.context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n      const totalIterations = fill.length + 1;\n      let currentIteration = 1;\n      for (let i = 0; i < fill.length; i++) {\n        let stop;\n        if (typeof fillGradientStops[i] === \"number\") {\n          stop = fillGradientStops[i];\n        } else {\n          stop = currentIteration / totalIterations;\n        }\n        gradient.addColorStop(stop, fill[i]);\n        currentIteration++;\n      }\n    }\n    return gradient;\n  }\n  destroy(options) {\n    if (typeof options === \"boolean\") {\n      options = {\n        children: options\n      };\n    }\n    options = Object.assign({}, defaultDestroyOptions, options);\n    super.destroy(options);\n    if (this._ownCanvas) {\n      this.canvas.height = this.canvas.width = 0;\n    }\n    this.context = null;\n    this.canvas = null;\n    this._style = null;\n  }\n  get width() {\n    this.updateText(true);\n    return Math.abs(this.scale.x) * this._texture.orig.width;\n  }\n  set width(value) {\n    this.updateText(true);\n    const s = utils.sign(this.scale.x) || 1;\n    this.scale.x = s * value / this._texture.orig.width;\n    this._width = value;\n  }\n  get height() {\n    this.updateText(true);\n    return Math.abs(this.scale.y) * this._texture.orig.height;\n  }\n  set height(value) {\n    this.updateText(true);\n    const s = utils.sign(this.scale.y) || 1;\n    this.scale.y = s * value / this._texture.orig.height;\n    this._height = value;\n  }\n  get style() {\n    return this._style;\n  }\n  set style(style) {\n    style = style || {};\n    if (style instanceof TextStyle) {\n      this._style = style;\n    } else {\n      this._style = new TextStyle(style);\n    }\n    this.localStyleID = -1;\n    this.dirty = true;\n  }\n  get text() {\n    return this._text;\n  }\n  set text(text) {\n    text = String(text === null || text === void 0 ? \"\" : text);\n    if (this._text === text) {\n      return;\n    }\n    this._text = text;\n    this.dirty = true;\n  }\n  get resolution() {\n    return this._resolution;\n  }\n  set resolution(value) {\n    this._autoResolution = false;\n    if (this._resolution === value) {\n      return;\n    }\n    this._resolution = value;\n    this.dirty = true;\n  }\n};\nlet Text = _Text;\nText.defaultAutoResolution = true;\nexport { Text };","map":{"version":3,"names":["defaultDestroyOptions","texture","children","baseTexture","_Text","Sprite","constructor","text","style","canvas","ownCanvas","settings","ADAPTER","createCanvas","width","height","Texture","from","orig","Rectangle","trim","_ownCanvas","context","getContext","willReadFrequently","_resolution","defaultResolution","RESOLUTION","_autoResolution","defaultAutoResolution","_text","_style","_styleListener","_font","localStyleID","experimentalLetterSpacing","TextMetrics","value","utils","deprecation","updateText","respectDirty","styleID","dirty","toFontString","measured","measureText","wordWrap","lines","lineHeight","lineWidths","maxLineWidth","fontProperties","Math","ceil","max","padding","scale","clearRect","font","lineWidth","strokeThickness","textBaseline","lineJoin","miterLimit","linePositionX","linePositionY","passesCount","dropShadow","i","isShadowPass","dsOffsetText","dsOffsetShadow","fillStyle","strokeStyle","dropShadowColor","dropShadowBlur","dropShadowDistance","shadowColor","Color","shared","setValue","setAlpha","dropShadowAlpha","toRgbaString","shadowBlur","shadowOffsetX","cos","dropShadowAngle","shadowOffsetY","sin","_generateFillStyle","stroke","linePositionYShift","fontSize","i2","length","ascent","align","drawLetterSpacing","fill","updateTexture","x","y","isStroke","arguments","undefined","letterSpacing","useExperimentalLetterSpacing","experimentalLetterSpacingSupported","textLetterSpacing","strokeText","fillText","currentPosition","stringArray","graphemeSegmenter","previousWidth","currentWidth","currentChar","textStr","j","trimmed","trimCanvas","data","putImageData","_texture","_frame","_onTextureUpdate","setRealSize","updateUvs","_render","renderer","resolution","updateTransform","getBounds","skipUpdate","rect","_textureID","getLocalBounds","call","_calculateBounds","calculateVertices","_bounds","addQuad","vertexData","metrics","Array","isArray","gradient","dropShadowCorrection","slice","fillGradientStops","lengthPlus1","push","unshift","fillGradientType","TEXT_GRADIENT","LINEAR_VERTICAL","createLinearGradient","textHeight","lastLineBottom","thisLineTop","thisLineGradientStart","thisLineBottom","nextLineTop","thisLineGradientEnd","gradStopLineHeight","lineStop","globalStop","min","Number","toFixed","addColorStop","totalIterations","currentIteration","stop","destroy","options","Object","assign","abs","s","sign","_width","_height","TextStyle","String","Text"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\text\\src\\Text.ts"],"sourcesContent":["/* eslint max-depth: [2, 8] */\nimport { Color, Rectangle, settings, Texture, utils } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { TEXT_GRADIENT } from './const';\nimport { TextMetrics } from './TextMetrics';\nimport { TextStyle } from './TextStyle';\n\nimport type { ICanvas, ICanvasRenderingContext2D, Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { ITextStyle } from './TextStyle';\n\nconst defaultDestroyOptions: IDestroyOptions = {\n    texture: true,\n    children: false,\n    baseTexture: true,\n};\n\n/**\n * A Text Object will create a line or multiple lines of text.\n *\n * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n *\n * The primary advantage of this class over BitmapText is that you have great control over the style of the text,\n * which you can change at runtime.\n *\n * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n * @example\n * import { Text } from 'pixi.js';\n *\n * const text = new Text('This is a PixiJS text', {\n *     fontFamily: 'Arial',\n *     fontSize: 24,\n *     fill: 0xff1010,\n *     align: 'center',\n * });\n * @memberof PIXI\n */\nexport class Text extends Sprite\n{\n    /**\n     * Override whether or not the resolution of the text is automatically adjusted to match the resolution of the renderer.\n     * Setting this to false can allow you to get crisper text at lower render resolutions.\n     * @example\n     * // renderer has a resolution of 1\n     * const app = new Application();\n     *\n     * Text.defaultResolution = 2;\n     * Text.defaultAutoResolution = false;\n     * // text has a resolution of 2\n     * const text = new Text('This is a PixiJS text');\n     */\n    public static defaultAutoResolution = true;\n\n    /**\n     * If {@link PIXI.Text.defaultAutoResolution} is false, this will be the default resolution of the text.\n     * If not set it will default to {@link PIXI.settings.RESOLUTION}.\n     * @example\n     * Text.defaultResolution = 2;\n     * Text.defaultAutoResolution = false;\n     *\n     * // text has a resolution of 2\n     * const text = new Text('This is a PixiJS text');\n     */\n    public static defaultResolution: number;\n\n    /**\n     * @see PIXI.TextMetrics.experimentalLetterSpacing\n     * @deprecated since 7.1.0\n     */\n    public static get experimentalLetterSpacing()\n    {\n        return TextMetrics.experimentalLetterSpacing;\n    }\n    public static set experimentalLetterSpacing(value)\n    {\n        // #if _DEBUG\n        utils.deprecation('7.1.0',\n            'Text.experimentalLetterSpacing is deprecated, use TextMetrics.experimentalLetterSpacing');\n        // #endif\n\n        TextMetrics.experimentalLetterSpacing = value;\n    }\n\n    /** The canvas element that everything is drawn to. */\n    public canvas: ICanvas;\n    /** The canvas 2d context that everything is drawn with. */\n    public context: ICanvasRenderingContext2D;\n    public localStyleID: number;\n    public dirty: boolean;\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default PIXI.settings.RESOLUTION\n     */\n    _resolution: number;\n    _autoResolution: boolean;\n\n    /**\n     * Private tracker for the current text.\n     * @private\n     */\n    protected _text: string;\n\n    /**\n     * Private tracker for the current font.\n     * @private\n     */\n    protected _font: string;\n\n    /**\n     * Private tracker for the current style.\n     * @private\n     */\n    protected _style: TextStyle;\n\n    /**\n     * Private listener to track style changes.\n     * @private\n     */\n    protected _styleListener: () => void;\n\n    /**\n     * Keep track if this Text object created it's own canvas\n     * element (`true`) or uses the constructor argument (`false`).\n     * Used to workaround a GC issues with Safari < 13 when\n     * destroying Text. See `destroy` for more info.\n     */\n    private _ownCanvas: boolean;\n\n    /**\n     * @param text - The string that you would like the text to display\n     * @param style - The style parameters\n     * @param canvas - The canvas element for drawing text\n     */\n    constructor(text?: string | number, style?: Partial<ITextStyle> | TextStyle, canvas?: ICanvas)\n    {\n        let ownCanvas = false;\n\n        if (!canvas)\n        {\n            canvas = settings.ADAPTER.createCanvas();\n            ownCanvas = true;\n        }\n\n        canvas.width = 3;\n        canvas.height = 3;\n\n        const texture = Texture.from(canvas);\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        this._ownCanvas = ownCanvas;\n        this.canvas = canvas;\n        this.context = canvas.getContext('2d', {\n            // required for trimming to work without warnings\n            willReadFrequently: true,\n        });\n\n        this._resolution = Text.defaultResolution ?? settings.RESOLUTION;\n        this._autoResolution = Text.defaultAutoResolution;\n        this._text = null;\n        this._style = null;\n        this._styleListener = null;\n        this._font = '';\n\n        this.text = text;\n        this.style = style;\n\n        this.localStyleID = -1;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     * @param respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n     */\n    public updateText(respectDirty: boolean): void\n    {\n        const style = this._style;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        this._font = this._style.toFontString();\n\n        const context = this.context;\n        const measured = TextMetrics.measureText(this._text || ' ', this._style, this._style.wordWrap, this.canvas);\n        const width = measured.width;\n        const height = measured.height;\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        this.canvas.width = Math.ceil(Math.ceil((Math.max(1, width) + (style.padding * 2))) * this._resolution);\n        this.canvas.height = Math.ceil(Math.ceil((Math.max(1, height) + (style.padding * 2))) * this._resolution);\n\n        context.scale(this._resolution, this._resolution);\n\n        context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        context.font = this._font;\n        context.lineWidth = style.strokeThickness;\n        context.textBaseline = style.textBaseline;\n        context.lineJoin = style.lineJoin;\n        context.miterLimit = style.miterLimit;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * this._resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const dropShadowColor = style.dropShadowColor;\n                const dropShadowBlur = style.dropShadowBlur * this._resolution;\n                const dropShadowDistance = style.dropShadowDistance * this._resolution;\n\n                context.shadowColor = Color.shared\n                    .setValue(dropShadowColor)\n                    .setAlpha(style.dropShadowAlpha)\n                    .toRgbaString();\n                context.shadowBlur = dropShadowBlur;\n                context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(style.dropShadowAngle) * dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                // set canvas text styles\n                context.fillStyle = this._generateFillStyle(style, lines, measured);\n                // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n                //       the setter converts to string. See this thread for more details:\n                //       https://github.com/microsoft/TypeScript/issues/2521\n                context.strokeStyle = style.stroke as string;\n\n                context.shadowColor = 'black';\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = style.strokeThickness / 2;\n                linePositionY = ((style.strokeThickness / 2) + (i * lineHeight)) + fontProperties.ascent\n                    + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style.stroke && style.strokeThickness)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style.fill)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n\n        this.updateTexture();\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param text - The text to draw\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    private drawLetterSpacing(text: string, x: number, y: number, isStroke = false): void\n    {\n        const style = this._style;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        let useExperimentalLetterSpacing = false;\n\n        if (TextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (TextMetrics.experimentalLetterSpacing)\n            {\n                this.context.letterSpacing = `${letterSpacing}px`;\n                this.context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                this.context.letterSpacing = '0px';\n                this.context.textLetterSpacing = '0px';\n            }\n        }\n\n        if (letterSpacing === 0 || useExperimentalLetterSpacing)\n        {\n            if (isStroke)\n            {\n                this.context.strokeText(text, x, y);\n            }\n            else\n            {\n                this.context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        const stringArray = TextMetrics.graphemeSegmenter(text);\n        let previousWidth = this.context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                this.context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                this.context.fillText(currentChar, currentPosition, y);\n            }\n            let textStr = '';\n\n            for (let j = i + 1; j < stringArray.length; ++j)\n            {\n                textStr += stringArray[j];\n            }\n            currentWidth = this.context.measureText(textStr).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    /** Updates texture size based on canvas size. */\n    private updateTexture(): void\n    {\n        const canvas = this.canvas;\n\n        if (this._style.trim)\n        {\n            const trimmed = utils.trimCanvas(canvas);\n\n            if (trimmed.data)\n            {\n                canvas.width = trimmed.width;\n                canvas.height = trimmed.height;\n                this.context.putImageData(trimmed.data, 0, 0);\n            }\n        }\n\n        const texture = this._texture;\n        const style = this._style;\n        const padding = style.trim ? 0 : style.padding;\n        const baseTexture = texture.baseTexture;\n\n        texture.trim.width = texture._frame.width = canvas.width / this._resolution;\n        texture.trim.height = texture._frame.height = canvas.height / this._resolution;\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n\n        texture.updateUvs();\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     * @param renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /** Updates the transform on all children of this container for rendering. */\n    public updateTransform(): void\n    {\n        this.updateText(true);\n\n        super.updateTransform();\n    }\n\n    public getBounds(skipUpdate?: boolean, rect?: Rectangle): Rectangle\n    {\n        this.updateText(true);\n\n        if (this._textureID === -1)\n        {\n            // texture was updated: recalculate transforms\n            skipUpdate = false;\n        }\n\n        return super.getBounds(skipUpdate, rect);\n    }\n\n    /**\n     * Gets the local bounds of the text object.\n     * @param rect - The output rectangle.\n     * @returns The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /** Calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account. */\n    protected _calculateBounds(): void\n    {\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        this._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n     * @param style - The style.\n     * @param lines - The lines of text.\n     * @param metrics\n     * @returns The fill style\n     */\n    private _generateFillStyle(\n        style: TextStyle, lines: string[], metrics: TextMetrics\n    ): string | CanvasGradient | CanvasPattern\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const fillStyle: string | string[] | CanvasGradient | CanvasPattern = style.fill as any;\n\n        if (!Array.isArray(fillStyle))\n        {\n            return fillStyle;\n        }\n        else if (fillStyle.length === 1)\n        {\n            return fillStyle[0];\n        }\n\n        // the gradient will be evenly spaced out according to how large the array is.\n        // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n        let gradient: string[] | CanvasGradient;\n\n        // a dropshadow will enlarge the canvas and result in the gradient being\n        // generated with the incorrect dimensions\n        const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n        // should also take padding into account, padding can offset the gradient\n        const padding = style.padding || 0;\n\n        const width = (this.canvas.width / this._resolution) - dropShadowCorrection - (padding * 2);\n        const height = (this.canvas.height / this._resolution) - dropShadowCorrection - (padding * 2);\n\n        // make a copy of the style settings, so we can manipulate them later\n        const fill = fillStyle.slice();\n        const fillGradientStops = style.fillGradientStops.slice();\n\n        // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n        if (!fillGradientStops.length)\n        {\n            const lengthPlus1 = fill.length + 1;\n\n            for (let i = 1; i < lengthPlus1; ++i)\n            {\n                fillGradientStops.push(i / lengthPlus1);\n            }\n        }\n\n        // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n        // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n        fill.unshift(fillStyle[0]);\n        fillGradientStops.unshift(0);\n\n        fill.push(fillStyle[fillStyle.length - 1]);\n        fillGradientStops.push(1);\n\n        if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n        {\n            // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n            gradient = this.context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n            // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n            // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n            // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n            const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n            for (let i = 0; i < lines.length; i++)\n            {\n                const lastLineBottom = (metrics.lineHeight * (i - 1)) + textHeight;\n                const thisLineTop = metrics.lineHeight * i;\n                let thisLineGradientStart = thisLineTop;\n\n                // Handle case where last & this line overlap\n                if (i > 0 && lastLineBottom > thisLineTop)\n                {\n                    thisLineGradientStart = (thisLineTop + lastLineBottom) / 2;\n                }\n\n                const thisLineBottom = thisLineTop + textHeight;\n                const nextLineTop = metrics.lineHeight * (i + 1);\n                let thisLineGradientEnd = thisLineBottom;\n\n                // Handle case where this & next line overlap\n                if (i + 1 < lines.length && nextLineTop < thisLineBottom)\n                {\n                    thisLineGradientEnd = (thisLineBottom + nextLineTop) / 2;\n                }\n\n                // textHeight, but as a 0-1 size in global gradient stop space\n                const gradStopLineHeight = (thisLineGradientEnd - thisLineGradientStart) / height;\n\n                for (let j = 0; j < fill.length; j++)\n                {\n                    // 0-1 stop point for the current line, multiplied to global space afterwards\n                    let lineStop = 0;\n\n                    if (typeof fillGradientStops[j] === 'number')\n                    {\n                        lineStop = fillGradientStops[j];\n                    }\n                    else\n                    {\n                        lineStop = j / fill.length;\n                    }\n\n                    let globalStop = Math.min(1, Math.max(0,\n                        (thisLineGradientStart / height) + (lineStop * gradStopLineHeight)));\n\n                    // There's potential for floating point precision issues at the seams between gradient repeats.\n                    globalStop = Number(globalStop.toFixed(5));\n                    gradient.addColorStop(globalStop, fill[j]);\n                }\n            }\n        }\n        else\n        {\n            // start the gradient at the center left of the canvas, and end at the center right of the canvas\n            gradient = this.context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n            // can just evenly space out the gradients in this case, as multiple lines makes no difference\n            // to an even left to right gradient\n            const totalIterations = fill.length + 1;\n            let currentIteration = 1;\n\n            for (let i = 0; i < fill.length; i++)\n            {\n                let stop: number;\n\n                if (typeof fillGradientStops[i] === 'number')\n                {\n                    stop = fillGradientStops[i];\n                }\n                else\n                {\n                    stop = currentIteration / totalIterations;\n                }\n                gradient.addColorStop(stop, fill[i]);\n                currentIteration++;\n            }\n        }\n\n        return gradient;\n    }\n\n    /**\n     * Destroys this text object.\n     *\n     * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n     * the majority of the time the texture will not be shared with any other Sprites.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        if (typeof options === 'boolean')\n        {\n            options = { children: options };\n        }\n\n        options = Object.assign({}, defaultDestroyOptions, options);\n\n        super.destroy(options);\n\n        // set canvas width and height to 0 to workaround memory leak in Safari < 13\n        // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n        if (this._ownCanvas)\n        {\n            this.canvas.height = this.canvas.width = 0;\n        }\n\n        // make sure to reset the context and canvas.. dont want this hanging around in memory!\n        this.context = null;\n        this.canvas = null;\n\n        this._style = null;\n    }\n\n    /** The width of the Text, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        this.updateText(true);\n\n        const s = utils.sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /** The height of the Text, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        this.updateText(true);\n\n        const s = utils.sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * Set the style of the text.\n     *\n     * Set up an event listener to listen for changes on the style object and mark the text as dirty.\n     *\n     * If setting the `style` can also be partial {@link PIXI.ITextStyle}.\n     */\n    get style(): TextStyle\n    {\n        return this._style;\n    }\n\n    set style(style: TextStyle | Partial<ITextStyle>)\n    {\n        style = style || {};\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /** Set the copy for the text object. To split a line you can use '\\n'. */\n    get text(): string\n    {\n        return this._text;\n    }\n\n    set text(text: string | number)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default 1\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}