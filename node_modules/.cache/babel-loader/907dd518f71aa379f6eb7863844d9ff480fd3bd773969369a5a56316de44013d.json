{"ast":null,"code":"import { extend, colord } from 'colord';\nimport namesPlugin from 'colord/plugins/names';\nextend([namesPlugin]);\nconst _Color = class {\n  constructor() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16777215;\n    this._value = null;\n    this._components = new Float32Array(4);\n    this._components.fill(1);\n    this._int = 16777215;\n    this.value = value;\n  }\n  get red() {\n    return this._components[0];\n  }\n  get green() {\n    return this._components[1];\n  }\n  get blue() {\n    return this._components[2];\n  }\n  get alpha() {\n    return this._components[3];\n  }\n  setValue(value) {\n    this.value = value;\n    return this;\n  }\n  set value(value) {\n    if (value instanceof _Color) {\n      this._value = this.cloneSource(value._value);\n      this._int = value._int;\n      this._components.set(value._components);\n    } else if (value === null) {\n      throw new Error(\"Cannot set PIXI.Color#value to null\");\n    } else if (this._value === null || !this.isSourceEqual(this._value, value)) {\n      this.normalize(value);\n      this._value = this.cloneSource(value);\n    }\n  }\n  get value() {\n    return this._value;\n  }\n  cloneSource(value) {\n    if (typeof value === \"string\" || typeof value === \"number\" || value instanceof Number || value === null) {\n      return value;\n    } else if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n      return value.slice(0);\n    } else if (typeof value === \"object\" && value !== null) {\n      return {\n        ...value\n      };\n    }\n    return value;\n  }\n  isSourceEqual(value1, value2) {\n    const type1 = typeof value1;\n    const type2 = typeof value2;\n    if (type1 !== type2) {\n      return false;\n    } else if (type1 === \"number\" || type1 === \"string\" || value1 instanceof Number) {\n      return value1 === value2;\n    } else if (Array.isArray(value1) && Array.isArray(value2) || ArrayBuffer.isView(value1) && ArrayBuffer.isView(value2)) {\n      if (value1.length !== value2.length) {\n        return false;\n      }\n      return value1.every((v, i) => v === value2[i]);\n    } else if (value1 !== null && value2 !== null) {\n      const keys1 = Object.keys(value1);\n      const keys2 = Object.keys(value2);\n      if (keys1.length !== keys2.length) {\n        return false;\n      }\n      return keys1.every(key => value1[key] === value2[key]);\n    }\n    return value1 === value2;\n  }\n  toRgba() {\n    const [r, g, b, a] = this._components;\n    return {\n      r,\n      g,\n      b,\n      a\n    };\n  }\n  toRgb() {\n    const [r, g, b] = this._components;\n    return {\n      r,\n      g,\n      b\n    };\n  }\n  toRgbaString() {\n    const [r, g, b] = this.toUint8RgbArray();\n    return `rgba(${r},${g},${b},${this.alpha})`;\n  }\n  toUint8RgbArray(out) {\n    const [r, g, b] = this._components;\n    out = out ?? [];\n    out[0] = Math.round(r * 255);\n    out[1] = Math.round(g * 255);\n    out[2] = Math.round(b * 255);\n    return out;\n  }\n  toRgbArray(out) {\n    out = out ?? [];\n    const [r, g, b] = this._components;\n    out[0] = r;\n    out[1] = g;\n    out[2] = b;\n    return out;\n  }\n  toNumber() {\n    return this._int;\n  }\n  toLittleEndianNumber() {\n    const value = this._int;\n    return (value >> 16) + (value & 65280) + ((value & 255) << 16);\n  }\n  multiply(value) {\n    const [r, g, b, a] = _Color.temp.setValue(value)._components;\n    this._components[0] *= r;\n    this._components[1] *= g;\n    this._components[2] *= b;\n    this._components[3] *= a;\n    this.refreshInt();\n    this._value = null;\n    return this;\n  }\n  premultiply(alpha) {\n    let applyToRGB = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (applyToRGB) {\n      this._components[0] *= alpha;\n      this._components[1] *= alpha;\n      this._components[2] *= alpha;\n    }\n    this._components[3] = alpha;\n    this.refreshInt();\n    this._value = null;\n    return this;\n  }\n  toPremultiplied(alpha) {\n    let applyToRGB = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (alpha === 1) {\n      return (255 << 24) + this._int;\n    }\n    if (alpha === 0) {\n      return applyToRGB ? 0 : this._int;\n    }\n    let r = this._int >> 16 & 255;\n    let g = this._int >> 8 & 255;\n    let b = this._int & 255;\n    if (applyToRGB) {\n      r = r * alpha + 0.5 | 0;\n      g = g * alpha + 0.5 | 0;\n      b = b * alpha + 0.5 | 0;\n    }\n    return (alpha * 255 << 24) + (r << 16) + (g << 8) + b;\n  }\n  toHex() {\n    const hexString = this._int.toString(16);\n    return `#${\"000000\".substring(0, 6 - hexString.length) + hexString}`;\n  }\n  toHexa() {\n    const alphaValue = Math.round(this._components[3] * 255);\n    const alphaString = alphaValue.toString(16);\n    return this.toHex() + \"00\".substring(0, 2 - alphaString.length) + alphaString;\n  }\n  setAlpha(alpha) {\n    this._components[3] = this._clamp(alpha);\n    return this;\n  }\n  round(steps) {\n    const [r, g, b] = this._components;\n    this._components[0] = Math.round(r * steps) / steps;\n    this._components[1] = Math.round(g * steps) / steps;\n    this._components[2] = Math.round(b * steps) / steps;\n    this.refreshInt();\n    this._value = null;\n    return this;\n  }\n  toArray(out) {\n    out = out ?? [];\n    const [r, g, b, a] = this._components;\n    out[0] = r;\n    out[1] = g;\n    out[2] = b;\n    out[3] = a;\n    return out;\n  }\n  normalize(value) {\n    let r;\n    let g;\n    let b;\n    let a;\n    if ((typeof value === \"number\" || value instanceof Number) && value >= 0 && value <= 16777215) {\n      const int = value;\n      r = (int >> 16 & 255) / 255;\n      g = (int >> 8 & 255) / 255;\n      b = (int & 255) / 255;\n      a = 1;\n    } else if ((Array.isArray(value) || value instanceof Float32Array) && value.length >= 3 && value.length <= 4) {\n      value = this._clamp(value);\n      [r, g, b, a = 1] = value;\n    } else if ((value instanceof Uint8Array || value instanceof Uint8ClampedArray) && value.length >= 3 && value.length <= 4) {\n      value = this._clamp(value, 0, 255);\n      [r, g, b, a = 255] = value;\n      r /= 255;\n      g /= 255;\n      b /= 255;\n      a /= 255;\n    } else if (typeof value === \"string\" || typeof value === \"object\") {\n      if (typeof value === \"string\") {\n        const match = _Color.HEX_PATTERN.exec(value);\n        if (match) {\n          value = `#${match[2]}`;\n        }\n      }\n      const color = colord(value);\n      if (color.isValid()) {\n        ({\n          r,\n          g,\n          b,\n          a\n        } = color.rgba);\n        r /= 255;\n        g /= 255;\n        b /= 255;\n      }\n    }\n    if (r !== void 0) {\n      this._components[0] = r;\n      this._components[1] = g;\n      this._components[2] = b;\n      this._components[3] = a;\n      this.refreshInt();\n    } else {\n      throw new Error(`Unable to convert color ${value}`);\n    }\n  }\n  refreshInt() {\n    this._clamp(this._components);\n    const [r, g, b] = this._components;\n    this._int = (r * 255 << 16) + (g * 255 << 8) + (b * 255 | 0);\n  }\n  _clamp(value) {\n    let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    if (typeof value === \"number\") {\n      return Math.min(Math.max(value, min), max);\n    }\n    value.forEach((v, i) => {\n      value[i] = Math.min(Math.max(v, min), max);\n    });\n    return value;\n  }\n};\nlet Color = _Color;\nColor.shared = new _Color();\nColor.temp = new _Color();\nColor.HEX_PATTERN = /^(#|0x)?(([a-f0-9]{3}){1,2}([a-f0-9]{2})?)$/i;\nexport { Color };","map":{"version":3,"names":["extend","namesPlugin","_Color","constructor","value","arguments","length","undefined","_value","_components","Float32Array","fill","_int","red","green","blue","alpha","setValue","cloneSource","set","Error","isSourceEqual","normalize","Number","Array","isArray","ArrayBuffer","isView","slice","value1","value2","type1","type2","every","v","i","keys1","Object","keys","keys2","key","toRgba","r","g","b","a","toRgb","toRgbaString","toUint8RgbArray","out","Math","round","toRgbArray","toNumber","toLittleEndianNumber","multiply","temp","refreshInt","premultiply","applyToRGB","toPremultiplied","toHex","hexString","toString","substring","toHexa","alphaValue","alphaString","setAlpha","_clamp","steps","toArray","int","Uint8Array","Uint8ClampedArray","match","HEX_PATTERN","exec","color","colord","isValid","rgba","min","max","forEach","Color","shared"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\color\\src\\Color.ts"],"sourcesContent":["import { colord, extend } from 'colord';\nimport namesPlugin from 'colord/plugins/names';\n\nimport type {\n    AnyColor,\n    HslaColor,\n    HslColor,\n    HsvaColor,\n    HsvColor,\n    RgbaColor,\n    RgbColor\n} from 'colord/types';\n\nextend([namesPlugin]);\n\n/**\n * Value types for the constructor of {@link PIXI.Color}.\n * These types are extended from [colord](https://www.npmjs.com/package/colord) with some PixiJS-specific extensions.\n *\n * Possible value types are:\n * - [Color names](https://www.w3.org/TR/css-color-4/#named-colors):\n *   `'red'`, `'green'`, `'blue'`, `'white'`, etc.\n * - RGB hex integers (`0xRRGGBB`):\n *   `0xff0000`, `0x00ff00`, `0x0000ff`, etc.\n * - [RGB(A) hex strings](https://www.w3.org/TR/css-color-4/#hex-notation):\n *   - 6 digits (`RRGGBB`): `'ff0000'`, `'#00ff00'`, `'0x0000ff'`, etc.\n *   - 3 digits (`RGB`): `'f00'`, `'#0f0'`, `'0x00f'`, etc.\n *   - 8 digits (`RRGGBBAA`): `'ff000080'`, `'#00ff0080'`, `'0x0000ff80'`, etc.\n *   - 4 digits (`RGBA`): `'f008'`, `'#0f08'`, `'0x00f8'`, etc.\n * - RGB(A) objects:\n *   `{ r: 255, g: 0, b: 0 }`, `{ r: 255, g: 0, b: 0, a: 0.5 }`, etc.\n * - [RGB(A) strings](https://www.w3.org/TR/css-color-4/#rgb-functions):\n *   `'rgb(255, 0, 0)'`, `'rgb(100% 0% 0%)'`, `'rgba(255, 0, 0, 0.5)'`, `'rgba(100% 0% 0% / 50%)'`, etc.\n * - RGB(A) arrays:\n *   `[1, 0, 0]`, `[1, 0, 0, 0.5]`, etc.\n * - RGB(A) Float32Array:\n *   `new Float32Array([1, 0, 0])`, `new Float32Array([1, 0, 0, 0.5])`, etc.\n * - RGB(A) Uint8Array:\n *   `new Uint8Array([255, 0, 0])`, `new Uint8Array([255, 0, 0, 128])`, etc.\n * - RGB(A) Uint8ClampedArray:\n *   `new Uint8ClampedArray([255, 0, 0])`, `new Uint8ClampedArray([255, 0, 0, 128])`, etc.\n * - HSL(A) objects:\n *   `{ h: 0, s: 100, l: 50 }`, `{ h: 0, s: 100, l: 50, a: 0.5 }`, etc.\n * - [HSL(A) strings](https://www.w3.org/TR/css-color-4/#the-hsl-notation):\n *   `'hsl(0, 100%, 50%)'`, `'hsl(0deg 100% 50%)'`, `'hsla(0, 100%, 50%, 0.5)'`, `'hsla(0deg 100% 50% / 50%)'`, etc.\n * - HSV(A) objects:\n *   `{ h: 0, s: 100, v: 100 }`, `{ h: 0, s: 100, v: 100, a: 0.5 }`, etc.\n * - {@link PIXI.Color} objects.\n * @memberof PIXI\n * @since 7.2.0\n */\nexport type ColorSource = string | number | number[] | Float32Array | Uint8Array | Uint8ClampedArray\n| HslColor | HslaColor | HsvColor | HsvaColor | RgbColor | RgbaColor | Color |\n// eslint-disable-next-line @typescript-eslint/ban-types\nNumber;\n\ntype ColorSourceTypedArray = Float32Array | Uint8Array | Uint8ClampedArray;\n\n/**\n * Color utility class.\n * @example\n * import { Color } from 'pixi.js';\n * new Color('red').toArray(); // [1, 0, 0, 1]\n * new Color(0xff0000).toArray(); // [1, 0, 0, 1]\n * new Color('ff0000').toArray(); // [1, 0, 0, 1]\n * new Color('#f00').toArray(); // [1, 0, 0, 1]\n * new Color('0xff0000ff').toArray(); // [1, 0, 0, 1]\n * new Color('#f00f').toArray(); // [1, 0, 0, 1]\n * new Color({ r: 255, g: 0, b: 0, a: 0.5 }).toArray(); // [1, 0, 0, 0.5]\n * new Color('rgb(255, 0, 0, 0.5)').toArray(); // [1, 0, 0, 0.5]\n * new Color([1, 1, 1]).toArray(); // [1, 1, 1, 1]\n * new Color([1, 0, 0, 0.5]).toArray(); // [1, 0, 0, 0.5]\n * new Color(new Float32Array([1, 0, 0, 0.5])).toArray(); // [1, 0, 0, 0.5]\n * new Color(new Uint8Array([255, 0, 0, 255])).toArray(); // [1, 0, 0, 1]\n * new Color(new Uint8ClampedArray([255, 0, 0, 255])).toArray(); // [1, 0, 0, 1]\n * new Color({ h: 0, s: 100, l: 50, a: 0.5 }).toArray(); // [1, 0, 0, 0.5]\n * new Color('hsl(0, 100%, 50%, 50%)').toArray(); // [1, 0, 0, 0.5]\n * new Color({ h: 0, s: 100, v: 100, a: 0.5 }).toArray(); // [1, 0, 0, 0.5]\n * @memberof PIXI\n * @since 7.2.0\n */\nexport class Color\n{\n    /**\n     * Default Color object for static uses\n     * @example\n     * import { Color } from 'pixi.js';\n     * Color.shared.setValue(0xffffff).toHex(); // '#ffffff'\n     */\n    static readonly shared = new Color();\n\n    /**\n     * Temporary Color object for static uses internally.\n     * As to not conflict with Color.shared.\n     * @ignore\n     */\n    private static readonly temp = new Color();\n\n    /** Pattern for hex strings */\n    private static readonly HEX_PATTERN = /^(#|0x)?(([a-f0-9]{3}){1,2}([a-f0-9]{2})?)$/i;\n\n    /** Internal color source, from constructor or set value */\n    private _value: Exclude<ColorSource, Color> | null;\n\n    /** Normalized rgba component, floats from 0-1 */\n    private _components: Float32Array;\n\n    /** Cache color as number */\n    private _int: number;\n\n    /**\n     * @param {PIXI.ColorSource} value - Optional value to use, if not provided, white is used.\n     */\n    constructor(value: ColorSource = 0xffffff)\n    {\n        this._value = null;\n        this._components = new Float32Array(4);\n        this._components.fill(1);\n        this._int = 0xffffff;\n        this.value = value;\n    }\n\n    /** Get red component (0 - 1) */\n    get red(): number\n    {\n        return this._components[0];\n    }\n\n    /** Get green component (0 - 1) */\n    get green(): number\n    {\n        return this._components[1];\n    }\n\n    /** Get blue component (0 - 1) */\n    get blue(): number\n    {\n        return this._components[2];\n    }\n\n    /** Get alpha component (0 - 1) */\n    get alpha(): number\n    {\n        return this._components[3];\n    }\n\n    /**\n     * Set the value, suitable for chaining\n     * @param value\n     * @see PIXI.Color.value\n     */\n    setValue(value: ColorSource): this\n    {\n        this.value = value;\n\n        return this;\n    }\n\n    /**\n     * The current color source.\n     *\n     * When setting:\n     * - Setting to an instance of `Color` will copy its color source and components.\n     * - Otherwise, `Color` will try to normalize the color source and set the components.\n     *   If the color source is invalid, an `Error` will be thrown and the `Color` will left unchanged.\n     *\n     * Note: The `null` in the setter's parameter type is added to match the TypeScript rule: return type of getter\n     * must be assignable to its setter's parameter type. Setting `value` to `null` will throw an `Error`.\n     *\n     * When getting:\n     * - A return value of `null` means the previous value was overridden (e.g., {@link PIXI.Color.multiply multiply},\n     *   {@link PIXI.Color.premultiply premultiply} or {@link PIXI.Color.round round}).\n     * - Otherwise, the color source used when setting is returned.\n     * @type {PIXI.ColorSource}\n     */\n    set value(value: ColorSource | null)\n    {\n        // Support copying from other Color objects\n        if (value instanceof Color)\n        {\n            this._value = this.cloneSource(value._value);\n            this._int = value._int;\n            this._components.set(value._components);\n        }\n        else if (value === null)\n        {\n            throw new Error('Cannot set PIXI.Color#value to null');\n        }\n        else if (this._value === null || !this.isSourceEqual(this._value, value))\n        {\n            this.normalize(value);\n            this._value = this.cloneSource(value);\n        }\n    }\n    get value(): Exclude<ColorSource, Color> | null\n    {\n        return this._value;\n    }\n\n    /**\n     * Copy a color source internally.\n     * @param value - Color source\n     */\n    private cloneSource(value: Exclude<ColorSource, Color> | null): Exclude<ColorSource, Color> | null\n    {\n        if (typeof value === 'string' || typeof value === 'number' || value instanceof Number || value === null)\n        {\n            return value;\n        }\n        else if (Array.isArray(value) || ArrayBuffer.isView(value))\n        {\n            return value.slice(0);\n        }\n        else if (typeof value === 'object' && value !== null)\n        {\n            return { ...value };\n        }\n\n        return value;\n    }\n\n    /**\n     * Equality check for color sources.\n     * @param value1 - First color source\n     * @param value2 - Second color source\n     * @returns `true` if the color sources are equal, `false` otherwise.\n     */\n    private isSourceEqual(value1: Exclude<ColorSource, Color>, value2: Exclude<ColorSource, Color>): boolean\n    {\n        const type1 = typeof value1;\n        const type2 = typeof value2;\n\n        // Mismatched types\n        if (type1 !== type2)\n        {\n            return false;\n        }\n        // Handle numbers/strings and things that extend Number\n        // important to do the instanceof Number first, as this is \"object\" type\n        else if (type1 === 'number' || type1 === 'string' || value1 instanceof Number)\n        {\n            return value1 === value2;\n        }\n        // Handle Arrays and TypedArrays\n        else if ((Array.isArray(value1) && Array.isArray(value2))\n            || (ArrayBuffer.isView(value1) && ArrayBuffer.isView(value2)))\n        {\n            if (value1.length !== value2.length)\n            {\n                return false;\n            }\n\n            return value1.every((v, i) => v === value2[i]);\n        }\n        // Handle Objects\n        else if (value1 !== null && value2 !== null)\n        {\n            const keys1 = Object.keys(value1) as (keyof typeof value1)[];\n            const keys2 = Object.keys(value2) as (keyof typeof value2)[];\n\n            if (keys1.length !== keys2.length)\n            {\n                return false;\n            }\n\n            return keys1.every((key) => value1[key] === value2[key]);\n        }\n\n        return value1 === value2;\n    }\n\n    /**\n     * Convert to a RGBA color object.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1, a: 1 }\n     */\n    toRgba(): RgbaColor\n    {\n        const [r, g, b, a] = this._components;\n\n        return { r, g, b, a };\n    }\n\n    /**\n     * Convert to a RGB color object.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1 }\n     */\n    toRgb(): RgbColor\n    {\n        const [r, g, b] = this._components;\n\n        return { r, g, b };\n    }\n\n    /** Convert to a CSS-style rgba string: `rgba(255,255,255,1.0)`. */\n    toRgbaString(): string\n    {\n        const [r, g, b] = this.toUint8RgbArray();\n\n        return `rgba(${r},${g},${b},${this.alpha})`;\n    }\n\n    /**\n     * Convert to an [R, G, B] array of clamped uint8 values (0 to 255).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toUint8RgbArray(); // returns [255, 255, 255]\n     * @param {number[]|Uint8Array|Uint8ClampedArray} [out] - Output array\n     */\n    toUint8RgbArray(): number[];\n    toUint8RgbArray<T extends (number[] | Uint8Array | Uint8ClampedArray)>(out: T): T;\n    toUint8RgbArray<T extends (number[] | Uint8Array | Uint8ClampedArray)>(out?: T): T\n    {\n        const [r, g, b] = this._components;\n\n        out = out ?? [] as number[] as T;\n\n        out[0] = Math.round(r * 255);\n        out[1] = Math.round(g * 255);\n        out[2] = Math.round(b * 255);\n\n        return out;\n    }\n\n    /**\n     * Convert to an [R, G, B] array of normalized floats (numbers from 0.0 to 1.0).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toRgbArray(); // returns [1, 1, 1]\n     * @param {number[]|Float32Array} [out] - Output array\n     */\n    toRgbArray(): number[];\n    toRgbArray<T extends (number[] | Float32Array)>(out: T): T;\n    toRgbArray<T extends (number[] | Float32Array)>(out?: T): T\n    {\n        out = out ?? [] as number[] as T;\n        const [r, g, b] = this._components;\n\n        out[0] = r;\n        out[1] = g;\n        out[2] = b;\n\n        return out;\n    }\n\n    /**\n     * Convert to a hexadecimal number.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toNumber(); // returns 16777215\n     */\n    toNumber(): number\n    {\n        return this._int;\n    }\n\n    /**\n     * Convert to a hexadecimal number in little endian format (e.g., BBGGRR).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color(0xffcc99).toLittleEndianNumber(); // returns 0x99ccff\n     * @returns {number} - The color as a number in little endian format.\n     */\n    toLittleEndianNumber(): number\n    {\n        const value = this._int;\n\n        return (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n\n    /**\n     * Multiply with another color. This action is destructive, and will\n     * override the previous `value` property to be `null`.\n     * @param {PIXI.ColorSource} value - The color to multiply by.\n     */\n    multiply(value: ColorSource): this\n    {\n        const [r, g, b, a] = Color.temp.setValue(value)._components;\n\n        this._components[0] *= r;\n        this._components[1] *= g;\n        this._components[2] *= b;\n        this._components[3] *= a;\n\n        this.refreshInt();\n        this._value = null;\n\n        return this;\n    }\n\n    /**\n     * Converts color to a premultiplied alpha format. This action is destructive, and will\n     * override the previous `value` property to be `null`.\n     * @param alpha - The alpha to multiply by.\n     * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n     * @returns {PIXI.Color} - Itself.\n     */\n    premultiply(alpha: number, applyToRGB = true): this\n    {\n        if (applyToRGB)\n        {\n            this._components[0] *= alpha;\n            this._components[1] *= alpha;\n            this._components[2] *= alpha;\n        }\n        this._components[3] = alpha;\n\n        this.refreshInt();\n        this._value = null;\n\n        return this;\n    }\n\n    /**\n     * Premultiplies alpha with current color.\n     * @param {number} alpha - The alpha to multiply by.\n     * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n     * @returns {number} tint multiplied by alpha\n     */\n    toPremultiplied(alpha: number, applyToRGB = true): number\n    {\n        if (alpha === 1.0)\n        {\n            return (0xFF << 24) + this._int;\n        }\n        if (alpha === 0.0)\n        {\n            return applyToRGB ? 0 : this._int;\n        }\n        let r = ((this._int >> 16) & 0xFF);\n        let g = ((this._int >> 8) & 0xFF);\n        let b = (this._int & 0xFF);\n\n        if (applyToRGB)\n        {\n            r = ((r * alpha) + 0.5) | 0;\n            g = ((g * alpha) + 0.5) | 0;\n            b = ((b * alpha) + 0.5) | 0;\n        }\n\n        return (alpha * 255 << 24) + (r << 16) + (g << 8) + b;\n    }\n\n    /**\n     * Convert to a hexidecimal string.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toHex(); // returns \"#ffffff\"\n     */\n    toHex(): string\n    {\n        const hexString = this._int.toString(16);\n\n        return `#${'000000'.substring(0, 6 - hexString.length) + hexString}`;\n    }\n\n    /**\n     * Convert to a hexidecimal string with alpha.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toHexa(); // returns \"#ffffffff\"\n     */\n    toHexa(): string\n    {\n        const alphaValue = Math.round(this._components[3] * 255);\n        const alphaString = alphaValue.toString(16);\n\n        return this.toHex() + '00'.substring(0, 2 - alphaString.length) + alphaString;\n    }\n\n    /**\n     * Set alpha, suitable for chaining.\n     * @param alpha\n     */\n    setAlpha(alpha: number): this\n    {\n        this._components[3] = this._clamp(alpha);\n\n        return this;\n    }\n\n    /**\n     * Rounds the specified color according to the step. This action is destructive, and will\n     * override the previous `value` property to be `null`. The alpha component is not rounded.\n     * @param steps - Number of steps which will be used as a cap when rounding colors\n     */\n    round(steps: number): this\n    {\n        const [r, g, b] = this._components;\n\n        this._components[0] = Math.round(r * steps) / steps;\n        this._components[1] = Math.round(g * steps) / steps;\n        this._components[2] = Math.round(b * steps) / steps;\n        this.refreshInt();\n        this._value = null;\n\n        return this;\n    }\n\n    /**\n     * Convert to an [R, G, B, A] array of normalized floats (numbers from 0.0 to 1.0).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toArray(); // returns [1, 1, 1, 1]\n     * @param {number[]|Float32Array} [out] - Output array\n     */\n    toArray(): number[];\n    toArray<T extends (number[] | Float32Array)>(out: T): T;\n    toArray<T extends (number[] | Float32Array)>(out?: T): T\n    {\n        out = out ?? [] as number[] as T;\n        const [r, g, b, a] = this._components;\n\n        out[0] = r;\n        out[1] = g;\n        out[2] = b;\n        out[3] = a;\n\n        return out;\n    }\n\n    /**\n     * Normalize the input value into rgba\n     * @param value - Input value\n     */\n    private normalize(value: Exclude<ColorSource, Color>): void\n    {\n        let r: number | undefined;\n        let g: number | undefined;\n        let b: number | undefined;\n        let a: number | undefined;\n\n        // Number is a primative so typeof works fine, but in the case\n        // that someone creates a class that extends Number, we also\n        // need to check for instanceof Number\n        if ((typeof value === 'number' || value instanceof Number) && value >= 0 && value <= 0xffffff)\n        {\n            const int = value as number; // cast required because instanceof Number is ambiguous for TS\n\n            r = ((int >> 16) & 0xFF) / 255;\n            g = ((int >> 8) & 0xFF) / 255;\n            b = (int & 0xFF) / 255;\n            a = 1.0;\n        }\n        else if ((Array.isArray(value) || value instanceof Float32Array)\n            // Can be rgb or rgba\n            && value.length >= 3 && value.length <= 4)\n        {\n            // make sure all values are 0 - 1\n            value = this._clamp(value);\n            [r, g, b, a = 1.0] = value;\n        }\n        else if ((value instanceof Uint8Array || value instanceof Uint8ClampedArray)\n            // Can be rgb or rgba\n            && value.length >= 3 && value.length <= 4)\n        {\n            // make sure all values are 0 - 255\n            value = this._clamp(value, 0, 255);\n            [r, g, b, a = 255] = value;\n            r /= 255;\n            g /= 255;\n            b /= 255;\n            a /= 255;\n        }\n        else if (typeof value === 'string' || typeof value === 'object')\n        {\n            if (typeof value === 'string')\n            {\n                const match = Color.HEX_PATTERN.exec(value);\n\n                if (match)\n                {\n                    // Normalize hex string, remove 0x or # prefix\n                    value = `#${match[2]}`;\n                }\n            }\n\n            const color = colord(value as AnyColor);\n\n            if (color.isValid())\n            {\n                ({ r, g, b, a } = color.rgba);\n                r /= 255;\n                g /= 255;\n                b /= 255;\n            }\n        }\n\n        // Cache normalized values for rgba and hex integer\n        if (r !== undefined)\n        {\n            this._components[0] = r as number;\n            this._components[1] = g as number;\n            this._components[2] = b as number;\n            this._components[3] = a as number;\n            this.refreshInt();\n        }\n        else\n        {\n            throw new Error(`Unable to convert color ${value}`);\n        }\n    }\n\n    /** Refresh the internal color rgb number */\n    private refreshInt(): void\n    {\n        // Clamp values to 0 - 1\n        this._clamp(this._components);\n\n        const [r, g, b] = this._components;\n\n        this._int = (((r * 255) << 16) + ((g * 255) << 8) + (b * 255 | 0));\n    }\n\n    /**\n     * Clamps values to a range. Will override original values\n     * @param value - Value(s) to clamp\n     * @param min - Minimum value\n     * @param max - Maximum value\n     */\n    private _clamp<T extends number | number[] | ColorSourceTypedArray>(value: T, min = 0, max = 1): T\n    {\n        if (typeof value === 'number')\n        {\n            return Math.min(Math.max(value, min), max) as T;\n        }\n\n        value.forEach((v, i) =>\n        {\n            value[i] = Math.min(Math.max(v, min), max);\n        });\n\n        return value;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}