{"ast":null,"code":"import { Texture } from '@pixi/core';\nimport { SimplePlane } from './SimplePlane.mjs';\nconst DEFAULT_BORDER_SIZE = 10;\nclass NineSlicePlane extends SimplePlane {\n  constructor(texture, leftWidth, topHeight, rightWidth, bottomHeight) {\n    super(Texture.WHITE, 4, 4);\n    this._origWidth = texture.orig.width;\n    this._origHeight = texture.orig.height;\n    this._width = this._origWidth;\n    this._height = this._origHeight;\n    this._leftWidth = leftWidth ?? texture.defaultBorders?.left ?? DEFAULT_BORDER_SIZE;\n    this._rightWidth = rightWidth ?? texture.defaultBorders?.right ?? DEFAULT_BORDER_SIZE;\n    this._topHeight = topHeight ?? texture.defaultBorders?.top ?? DEFAULT_BORDER_SIZE;\n    this._bottomHeight = bottomHeight ?? texture.defaultBorders?.bottom ?? DEFAULT_BORDER_SIZE;\n    this.texture = texture;\n  }\n  textureUpdated() {\n    this._textureID = this.shader.texture._updateID;\n    this._refresh();\n  }\n  get vertices() {\n    return this.geometry.getBuffer(\"aVertexPosition\").data;\n  }\n  set vertices(value) {\n    this.geometry.getBuffer(\"aVertexPosition\").data = value;\n  }\n  updateHorizontalVertices() {\n    const vertices = this.vertices;\n    const scale = this._getMinScale();\n    vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n    vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - this._bottomHeight * scale;\n    vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n  }\n  updateVerticalVertices() {\n    const vertices = this.vertices;\n    const scale = this._getMinScale();\n    vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n    vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - this._rightWidth * scale;\n    vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n  }\n  _getMinScale() {\n    const w = this._leftWidth + this._rightWidth;\n    const scaleW = this._width > w ? 1 : this._width / w;\n    const h = this._topHeight + this._bottomHeight;\n    const scaleH = this._height > h ? 1 : this._height / h;\n    const scale = Math.min(scaleW, scaleH);\n    return scale;\n  }\n  get width() {\n    return this._width;\n  }\n  set width(value) {\n    this._width = value;\n    this._refresh();\n  }\n  get height() {\n    return this._height;\n  }\n  set height(value) {\n    this._height = value;\n    this._refresh();\n  }\n  get leftWidth() {\n    return this._leftWidth;\n  }\n  set leftWidth(value) {\n    this._leftWidth = value;\n    this._refresh();\n  }\n  get rightWidth() {\n    return this._rightWidth;\n  }\n  set rightWidth(value) {\n    this._rightWidth = value;\n    this._refresh();\n  }\n  get topHeight() {\n    return this._topHeight;\n  }\n  set topHeight(value) {\n    this._topHeight = value;\n    this._refresh();\n  }\n  get bottomHeight() {\n    return this._bottomHeight;\n  }\n  set bottomHeight(value) {\n    this._bottomHeight = value;\n    this._refresh();\n  }\n  _refresh() {\n    const texture = this.texture;\n    const uvs = this.geometry.buffers[1].data;\n    this._origWidth = texture.orig.width;\n    this._origHeight = texture.orig.height;\n    const _uvw = 1 / this._origWidth;\n    const _uvh = 1 / this._origHeight;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.updateHorizontalVertices();\n    this.updateVerticalVertices();\n    this.geometry.buffers[0].update();\n    this.geometry.buffers[1].update();\n  }\n}\nexport { NineSlicePlane };","map":{"version":3,"names":["DEFAULT_BORDER_SIZE","NineSlicePlane","SimplePlane","constructor","texture","leftWidth","topHeight","rightWidth","bottomHeight","Texture","WHITE","_origWidth","orig","width","_origHeight","height","_width","_height","_leftWidth","defaultBorders","left","_rightWidth","right","_topHeight","top","_bottomHeight","bottom","textureUpdated","_textureID","shader","_updateID","_refresh","vertices","geometry","getBuffer","data","value","updateHorizontalVertices","scale","_getMinScale","updateVerticalVertices","w","scaleW","h","scaleH","Math","min","uvs","buffers","_uvw","_uvh","update"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\mesh-extras\\src\\NineSlicePlane.ts"],"sourcesContent":["import { Texture } from '@pixi/core';\nimport { SimplePlane } from './SimplePlane';\n\nimport type { ITypedArray } from '@pixi/core';\n\nconst DEFAULT_BORDER_SIZE = 10;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface NineSlicePlane extends GlobalMixins.NineSlicePlane {}\n\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n * @example\n * import { NineSlicePlane, Texture } from 'pixi.js';\n *\n * const plane9 = new NineSlicePlane(Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n * @memberof PIXI\n */\nexport class NineSlicePlane extends SimplePlane\n{\n    private _origWidth: number;\n    private _origHeight: number;\n\n    /**\n     * The width of the left column (a).\n     * @private\n     */\n    _leftWidth: number;\n\n    /**\n     * The width of the right column (b)\n     * @private\n     */\n    _rightWidth: number;\n\n    /**\n     * The height of the top row (c)\n     * @private\n     */\n    _topHeight: number;\n\n    /**\n     * The height of the bottom row (d)\n     * @private\n     */\n    _bottomHeight: number;\n\n    /**\n     * @param texture - The texture to use on the NineSlicePlane.\n     * @param {number} [leftWidth=10] - size of the left vertical bar (A)\n     * @param {number} [topHeight=10] - size of the top horizontal bar (C)\n     * @param {number} [rightWidth=10] - size of the right vertical bar (B)\n     * @param {number} [bottomHeight=10] - size of the bottom horizontal bar (D)\n     */\n    constructor(\n        texture: Texture,\n        leftWidth?: number,\n        topHeight?: number,\n        rightWidth?: number,\n        bottomHeight?: number\n    )\n    {\n        super(Texture.WHITE, 4, 4);\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        this._width = this._origWidth;\n\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        this._height = this._origHeight;\n\n        this._leftWidth = leftWidth ?? texture.defaultBorders?.left ?? DEFAULT_BORDER_SIZE;\n        this._rightWidth = rightWidth ?? texture.defaultBorders?.right ?? DEFAULT_BORDER_SIZE;\n        this._topHeight = topHeight ?? texture.defaultBorders?.top ?? DEFAULT_BORDER_SIZE;\n        this._bottomHeight = bottomHeight ?? texture.defaultBorders?.bottom ?? DEFAULT_BORDER_SIZE;\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n    }\n\n    public textureUpdated(): void\n    {\n        this._textureID = this.shader.texture._updateID;\n        this._refresh();\n    }\n\n    get vertices(): ITypedArray\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n\n    set vertices(value: ITypedArray)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    /** Updates the horizontal vertices. */\n    public updateHorizontalVertices(): void\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n        vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - (this._bottomHeight * scale);\n        vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n    }\n\n    /** Updates the vertical vertices. */\n    public updateVerticalVertices(): void\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n        vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - (this._rightWidth * scale);\n        vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n    }\n\n    /**\n     * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n     * @returns Smaller number of vertical and horizontal scale.\n     */\n    private _getMinScale(): number\n    {\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this._width > w ? 1.0 : this._width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this._height > h ? 1.0 : this._height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        return scale;\n    }\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    set width(value: number)\n    {\n        this._width = value;\n        this._refresh();\n    }\n\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    set height(value: number)\n    {\n        this._height = value;\n        this._refresh();\n    }\n\n    /** The width of the left column. */\n    get leftWidth(): number\n    {\n        return this._leftWidth;\n    }\n\n    set leftWidth(value: number)\n    {\n        this._leftWidth = value;\n        this._refresh();\n    }\n\n    /** The width of the right column. */\n    get rightWidth(): number\n    {\n        return this._rightWidth;\n    }\n\n    set rightWidth(value: number)\n    {\n        this._rightWidth = value;\n        this._refresh();\n    }\n\n    /** The height of the top row. */\n    get topHeight(): number\n    {\n        return this._topHeight;\n    }\n\n    set topHeight(value: number)\n    {\n        this._topHeight = value;\n        this._refresh();\n    }\n\n    /** The height of the bottom row. */\n    get bottomHeight(): number\n    {\n        return this._bottomHeight;\n    }\n\n    set bottomHeight(value: number)\n    {\n        this._bottomHeight = value;\n        this._refresh();\n    }\n\n    /** Refreshes NineSlicePlane coords. All of them. */\n    private _refresh(): void\n    {\n        const texture = this.texture;\n\n        const uvs = this.geometry.buffers[1].data;\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        const _uvw = 1.0 / this._origWidth;\n        const _uvh = 1.0 / this._origHeight;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.updateHorizontalVertices();\n        this.updateVerticalVertices();\n\n        this.geometry.buffers[0].update();\n        this.geometry.buffers[1].update();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}