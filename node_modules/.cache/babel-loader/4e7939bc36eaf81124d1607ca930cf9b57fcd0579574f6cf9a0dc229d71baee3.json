{"ast":null,"code":"var LINE_JOIN = /* @__PURE__ */(LINE_JOIN2 => {\n  LINE_JOIN2[\"MITER\"] = \"miter\";\n  LINE_JOIN2[\"BEVEL\"] = \"bevel\";\n  LINE_JOIN2[\"ROUND\"] = \"round\";\n  return LINE_JOIN2;\n})(LINE_JOIN || {});\nvar LINE_CAP = /* @__PURE__ */(LINE_CAP2 => {\n  LINE_CAP2[\"BUTT\"] = \"butt\";\n  LINE_CAP2[\"ROUND\"] = \"round\";\n  LINE_CAP2[\"SQUARE\"] = \"square\";\n  return LINE_CAP2;\n})(LINE_CAP || {});\nconst curves = {\n  adaptive: true,\n  maxLength: 10,\n  minSegments: 8,\n  maxSegments: 2048,\n  epsilon: 1e-4,\n  _segmentsCount(length) {\n    let defaultSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n    if (!this.adaptive || !length || isNaN(length)) {\n      return defaultSegments;\n    }\n    let result = Math.ceil(length / this.maxLength);\n    if (result < this.minSegments) {\n      result = this.minSegments;\n    } else if (result > this.maxSegments) {\n      result = this.maxSegments;\n    }\n    return result;\n  }\n};\nconst GRAPHICS_CURVES = curves;\nexport { GRAPHICS_CURVES, LINE_CAP, LINE_JOIN, curves };","map":{"version":3,"names":["LINE_JOIN","LINE_JOIN2","LINE_CAP","LINE_CAP2","curves","adaptive","maxLength","minSegments","maxSegments","epsilon","_segmentsCount","length","defaultSegments","arguments","undefined","isNaN","result","Math","ceil","GRAPHICS_CURVES"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\graphics\\src\\const.ts"],"sourcesContent":["/**\n * Supported line joints in `PIXI.LineStyle` for graphics.\n * @see PIXI.Graphics#lineStyle\n * @see https://graphicdesign.stackexchange.com/questions/59018/what-is-a-bevel-join-of-two-lines-exactly-illustrator\n * @memberof PIXI\n * @static\n * @enum {string}\n */\nexport enum LINE_JOIN\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * 'miter': make a sharp corner where outer part of lines meet\n     * @default miter\n     */\n    MITER = 'miter',\n    /**\n     * 'bevel': add a square butt at each end of line segment and fill the triangle at turn\n     * @default bevel\n     */\n    BEVEL = 'bevel',\n    /**\n     * 'round': add an arc at the joint\n     * @default round\n     */\n    ROUND = 'round'\n}\n\n/**\n * Support line caps in `PIXI.LineStyle` for graphics.\n * @see PIXI.Graphics#lineStyle\n * @memberof PIXI\n * @static\n * @enum {string}\n */\nexport enum LINE_CAP\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * 'butt': don't add any cap at line ends (leaves orthogonal edges)\n     * @default butt\n     */\n    BUTT = 'butt',\n    /**\n     * 'round': add semicircle at ends\n     * @default round\n     */\n    ROUND = 'round',\n    /**\n     * 'square': add square at end (like `BUTT` except more length at end)\n     * @default square\n     */\n    SQUARE = 'square'\n}\n\n/**\n * @memberof PIXI\n * @deprecated\n */\nexport interface IGraphicsCurvesSettings\n{\n    adaptive: boolean;\n    maxLength: number;\n    minSegments: number;\n    maxSegments: number;\n\n    epsilon: number;\n\n    _segmentsCount(length: number, defaultSegments?: number): number;\n}\n\n/**\n * @private\n */\nexport const curves = {\n    adaptive: true,\n    maxLength: 10,\n    minSegments: 8,\n    maxSegments:  2048,\n\n    epsilon: 0.0001,\n\n    _segmentsCount(length: number, defaultSegments = 20)\n    {\n        if (!this.adaptive || !length || isNaN(length))\n        {\n            return defaultSegments;\n        }\n\n        let result = Math.ceil(length / this.maxLength);\n\n        if (result < this.minSegments)\n        {\n            result = this.minSegments;\n        }\n        else if (result > this.maxSegments)\n        {\n            result = this.maxSegments;\n        }\n\n        return result;\n    },\n};\n\n/**\n * @static\n * @readonly\n * @memberof PIXI\n * @name GRAPHICS_CURVES\n * @type {object}\n * @deprecated since 7.1.0\n * @see PIXI.Graphics.curves\n */\nexport const GRAPHICS_CURVES = curves;\n"],"mappings":"AAQY,IAAAA,SAAA,mBAAAC,UAAL;EAOKA,UAAA;EAKAA,UAAA;EAKAA,UAAA;EAjBA,OAAAA,UAAA;AAAA,GAAAD,SAAA;AA2BA,IAAAE,QAAA,mBAAAC,SAAL;EAOIA,SAAA;EAKCA,SAAA;EAKCA,SAAA;EAjBD,OAAAA,SAAA;AAAA,GAAAD,QAAA;AAuCL,MAAME,MAAS;EAClBC,QAAU;EACVC,SAAW;EACXC,WAAa;EACbC,WAAc;EAEdC,OAAS;EAETC,eAAeC,MAAgB,EAC/B;IAAA,IAD+BC,eAAA,GAAAC,SAAA,CAAAF,MAAA,QAAAE,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAkB,EACjD;IACI,IAAI,CAAC,IAAK,CAAAR,QAAA,IAAY,CAACM,MAAU,IAAAI,KAAA,CAAMJ,MAAM,CAC7C;MACW,OAAAC,eAAA;IAAA;IAGX,IAAII,MAAS,GAAAC,IAAA,CAAKC,IAAK,CAAAP,MAAA,GAAS,KAAKL,SAAS;IAE1C,IAAAU,MAAA,GAAS,KAAKT,WAClB;MACIS,MAAA,GAAS,IAAK,CAAAT,WAAA;IAAA,CAClB,UACSS,MAAS,QAAKR,WACvB;MACIQ,MAAA,GAAS,IAAK,CAAAR,WAAA;IAAA;IAGX,OAAAQ,MAAA;EAAA;AAEf;AAWO,MAAMG,eAAkB,GAAAf,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}