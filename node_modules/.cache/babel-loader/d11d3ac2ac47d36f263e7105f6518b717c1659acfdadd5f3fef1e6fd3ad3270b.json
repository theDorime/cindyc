{"ast":null,"code":"import { utils, ExtensionType, settings, extensions } from '@pixi/core';\nimport { checkDataUrl } from '../../utils/checkDataUrl.mjs';\nimport { checkExtension } from '../../utils/checkExtension.mjs';\nimport { LoaderParserPriority } from './LoaderParser.mjs';\nconst validWeights = [\"normal\", \"bold\", \"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"700\", \"800\", \"900\"];\nconst validFontExtensions = [\".ttf\", \".otf\", \".woff\", \".woff2\"];\nconst validFontMIMEs = [\"font/ttf\", \"font/otf\", \"font/woff\", \"font/woff2\"];\nconst CSS_IDENT_TOKEN_REGEX = /^(--|-?[A-Z_])[0-9A-Z_-]*$/i;\nfunction getFontFamilyName(url) {\n  const ext = utils.path.extname(url);\n  const name = utils.path.basename(url, ext);\n  const nameWithSpaces = name.replace(/(-|_)/g, \" \");\n  const nameTokens = nameWithSpaces.toLowerCase().split(\" \").map(word => word.charAt(0).toUpperCase() + word.slice(1));\n  let valid = nameTokens.length > 0;\n  for (const token of nameTokens) {\n    if (!token.match(CSS_IDENT_TOKEN_REGEX)) {\n      valid = false;\n      break;\n    }\n  }\n  let fontFamilyName = nameTokens.join(\" \");\n  if (!valid) {\n    fontFamilyName = `\"${fontFamilyName.replace(/[\\\\\"]/g, \"\\\\$&\")}\"`;\n  }\n  return fontFamilyName;\n}\nconst loadWebFont = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.Low\n  },\n  name: \"loadWebFont\",\n  test(url) {\n    return checkDataUrl(url, validFontMIMEs) || checkExtension(url, validFontExtensions);\n  },\n  async load(url, options) {\n    const fonts = settings.ADAPTER.getFontFaceSet();\n    if (fonts) {\n      const fontFaces = [];\n      const name = options.data?.family ?? getFontFamilyName(url);\n      const weights = options.data?.weights?.filter(weight => validWeights.includes(weight)) ?? [\"normal\"];\n      const data = options.data ?? {};\n      for (let i = 0; i < weights.length; i++) {\n        const weight = weights[i];\n        const font = new FontFace(name, `url(${encodeURI(url)})`, {\n          ...data,\n          weight\n        });\n        await font.load();\n        fonts.add(font);\n        fontFaces.push(font);\n      }\n      return fontFaces.length === 1 ? fontFaces[0] : fontFaces;\n    }\n    console.warn(\"[loadWebFont] FontFace API is not supported. Skipping loading font\");\n    return null;\n  },\n  unload(font) {\n    (Array.isArray(font) ? font : [font]).forEach(t => settings.ADAPTER.getFontFaceSet().delete(t));\n  }\n};\nextensions.add(loadWebFont);\nexport { getFontFamilyName, loadWebFont };","map":{"version":3,"names":["validWeights","validFontExtensions","validFontMIMEs","CSS_IDENT_TOKEN_REGEX","getFontFamilyName","url","ext","utils","path","extname","name","basename","nameWithSpaces","replace","nameTokens","toLowerCase","split","map","word","charAt","toUpperCase","slice","valid","length","token","match","fontFamilyName","join","loadWebFont","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","Low","test","checkDataUrl","checkExtension","load","options","fonts","settings","ADAPTER","getFontFaceSet","fontFaces","data","family","weights","filter","weight","includes","i","font","FontFace","encodeURI","add","push","console","warn","unload","Array","isArray","forEach","t","delete","extensions"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\assets\\src\\loader\\parsers\\loadWebFont.ts"],"sourcesContent":["import { extensions, ExtensionType, settings, utils } from '@pixi/core';\nimport { checkDataUrl } from '../../utils/checkDataUrl';\nimport { checkExtension } from '../../utils/checkExtension';\nimport { LoaderParserPriority } from './LoaderParser';\n\nimport type { LoadAsset } from '../types';\nimport type { LoaderParser } from './LoaderParser';\n\nconst validWeights = [\n    'normal', 'bold',\n    '100', '200', '300', '400', '500', '600', '700', '800', '900',\n];\nconst validFontExtensions = ['.ttf', '.otf', '.woff', '.woff2'];\nconst validFontMIMEs = [\n    'font/ttf',\n    'font/otf',\n    'font/woff',\n    'font/woff2',\n];\n\n/**\n * Loader plugin for handling web fonts\n * @memberof PIXI\n */\nexport type LoadFontData = {\n    family: string;\n    display: string;\n    featureSettings: string;\n    stretch: string;\n    style: string;\n    unicodeRange: string;\n    variant: string;\n    weights: string[];\n};\n\n/**\n * RegExp for matching CSS <ident-token>. It doesn't consider escape and non-ASCII characters, but enough for us.\n * @see {@link https://www.w3.org/TR/css-syntax-3/#ident-token-diagram}\n */\nconst CSS_IDENT_TOKEN_REGEX = /^(--|-?[A-Z_])[0-9A-Z_-]*$/i;\n\n/**\n * Return font face name from a file name\n * Ex.: 'fonts/tital-one.woff' turns into 'Titan One'\n * @param url - File url\n */\nexport function getFontFamilyName(url: string): string\n{\n    const ext = utils.path.extname(url);\n    const name = utils.path.basename(url, ext);\n\n    // Replace dashes by white spaces\n    const nameWithSpaces = name.replace(/(-|_)/g, ' ');\n\n    // Upper case first character of each word\n    const nameTokens = nameWithSpaces.toLowerCase()\n        .split(' ')\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1));\n\n    let valid = nameTokens.length > 0;\n\n    for (const token of nameTokens)\n    {\n        if (!token.match(CSS_IDENT_TOKEN_REGEX))\n        {\n            valid = false;\n            break;\n        }\n    }\n\n    let fontFamilyName = nameTokens.join(' ');\n\n    if (!valid)\n    {\n        fontFamilyName = `\"${fontFamilyName.replace(/[\\\\\"]/g, '\\\\$&')}\"`;\n    }\n\n    return fontFamilyName;\n}\n\n/** Web font loader plugin */\nexport const loadWebFont = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.Low,\n    },\n\n    name: 'loadWebFont',\n\n    test(url: string): boolean\n    {\n        return checkDataUrl(url, validFontMIMEs) || checkExtension(url, validFontExtensions);\n    },\n\n    async load(url: string, options?: LoadAsset<LoadFontData>): Promise<FontFace | FontFace[]>\n    {\n        const fonts = settings.ADAPTER.getFontFaceSet();\n\n        if (fonts)\n        {\n            const fontFaces: FontFace[] = [];\n            const name = options.data?.family ?? getFontFamilyName(url);\n            const weights = options.data?.weights?.filter((weight) => validWeights.includes(weight)) ?? ['normal'];\n            const data = options.data ?? {};\n\n            for (let i = 0; i < weights.length; i++)\n            {\n                const weight = weights[i];\n\n                const font = new FontFace(name, `url(${encodeURI(url)})`, {\n                    ...data,\n                    weight,\n                });\n\n                await font.load();\n\n                fonts.add(font);\n\n                fontFaces.push(font);\n            }\n\n            return fontFaces.length === 1 ? fontFaces[0] : fontFaces;\n        }\n\n        // #if _DEBUG\n        console.warn('[loadWebFont] FontFace API is not supported. Skipping loading font');\n        // #endif\n\n        return null;\n    },\n\n    unload(font: FontFace | FontFace[]): void\n    {\n        (Array.isArray(font) ? font : [font])\n            .forEach((t) => settings.ADAPTER.getFontFaceSet().delete(t));\n    }\n} as LoaderParser<FontFace | FontFace[]>;\n\nextensions.add(loadWebFont);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}