{"ast":null,"code":"import { ExtensionType, extensions } from '@pixi/core';\nclass ResizePlugin {\n  static init(options) {\n    Object.defineProperty(this, \"resizeTo\", {\n      set(dom) {\n        globalThis.removeEventListener(\"resize\", this.queueResize);\n        this._resizeTo = dom;\n        if (dom) {\n          globalThis.addEventListener(\"resize\", this.queueResize);\n          this.resize();\n        }\n      },\n      get() {\n        return this._resizeTo;\n      }\n    });\n    this.queueResize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this.cancelResize();\n      this._resizeId = requestAnimationFrame(() => this.resize());\n    };\n    this.cancelResize = () => {\n      if (this._resizeId) {\n        cancelAnimationFrame(this._resizeId);\n        this._resizeId = null;\n      }\n    };\n    this.resize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this.cancelResize();\n      let width;\n      let height;\n      if (this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } else {\n        const {\n          clientWidth,\n          clientHeight\n        } = this._resizeTo;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      this.renderer.resize(width, height);\n      this.render();\n    };\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  }\n  static destroy() {\n    globalThis.removeEventListener(\"resize\", this.queueResize);\n    this.cancelResize();\n    this.cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  }\n}\nResizePlugin.extension = ExtensionType.Application;\nextensions.add(ResizePlugin);\nexport { ResizePlugin };","map":{"version":3,"names":["ResizePlugin","init","options","Object","defineProperty","set","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","get","cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","width","height","window","innerWidth","innerHeight","clientWidth","clientHeight","renderer","render","resizeTo","destroy","extension","ExtensionType","Application","extensions","add"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\app\\src\\ResizePlugin.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/core';\n\nimport type { ExtensionMetadata, Renderer } from '@pixi/core';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\nexport interface ResizePluginOptions\n{\n    /**\n     * Element to automatically resize stage to.\n     * @memberof PIXI.IApplicationOptions\n     */\n    resizeTo?: Window | HTMLElement;\n}\n\n/**\n * Middleware for for Application's resize functionality\n * @private\n * @class\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static resizeTo: Window | HTMLElement;\n    public static resize: () => void;\n    public static renderer: ResizeableRenderer;\n    public static queueResize: () => void;\n    public static render: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window | HTMLElement;\n    private static cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    static init(options: ResizePluginOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            /**\n             * The HTML element or window to automatically resize the\n             * renderer's view element to match width and height.\n             * @member {Window|HTMLElement}\n             * @name resizeTo\n             * @memberof PIXI.Application#\n             */\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @memberof PIXI.Application#\n         * @method queueResize\n         * @private\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this.cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         * @memberof PIXI.Application#\n         * @method cancelResize\n         * @private\n         */\n        this.cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @memberof PIXI.Application#\n         * @method resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this.cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n            this.render();\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this.cancelResize();\n        this.cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n\nextensions.add(ResizePlugin);\n"],"mappings":";AAoBO,MAAMA,YACb;EAmBI,OAAOC,KAAKC,OACZ;IACWC,MAAA,CAAAC,cAAA,CAAe,MAAM,UAQxB;MACIC,IAAIC,GACJ;QACeC,UAAA,CAAAC,mBAAA,CAAoB,QAAU,OAAKC,WAAW;QACzD,KAAKC,SAAY,GAAAJ,GAAA;QACjB,IAAIA,GACJ;UACeC,UAAA,CAAAI,gBAAA,CAAiB,QAAU,OAAKF,WAAW;UACtD,KAAKG,MAAO;QAAA;MAChB,CACJ;MACAC,GACAA,CAAA;QACI,OAAO,IAAK,CAAAH,SAAA;MAAA;IAChB,CACH;IASL,KAAKD,WAAA,GAAc,MACnB;MACQ,KAAC,KAAKC,SACV;QACI;MAAA;MAGJ,KAAKI,YAAa;MAGlB,KAAKC,SAAY,GAAAC,qBAAA,CAAsB,MAAM,KAAKJ,MAAA,EAAQ;IAAA,CAC9D;IAQA,KAAKE,YAAA,GAAe,MACpB;MACI,IAAI,KAAKC,SACT;QACIE,oBAAA,CAAqB,KAAKF,SAAS;QACnC,KAAKA,SAAY;MAAA;IACrB,CACJ;IASA,KAAKH,MAAA,GAAS,MACd;MACQ,KAAC,KAAKF,SACV;QACI;MAAA;MAIJ,KAAKI,YAAa;MAEd,IAAAI,KAAA;MACA,IAAAC,MAAA;MAGA,SAAKT,SAAc,KAAAH,UAAA,CAAWa,MAClC;QACIF,KAAA,GAAQX,UAAW,CAAAc,UAAA;QACnBF,MAAA,GAASZ,UAAW,CAAAe,WAAA;MAAA,CAIxB;QACU;UAAEC,WAAa;UAAAC;QAAA,IAAiB,IAAK,CAAAd,SAAA;QAEnCQ,KAAA,GAAAK,WAAA;QACCJ,MAAA,GAAAK,YAAA;MAAA;MAGR,KAAAC,QAAA,CAASb,MAAO,CAAAM,KAAA,EAAOC,MAAM;MAClC,KAAKO,MAAO;IAAA,CAChB;IAGA,KAAKX,SAAY;IACjB,KAAKL,SAAY;IACZ,KAAAiB,QAAA,GAAWzB,OAAA,CAAQyB,QAAY;EAAA;EAQxC,OAAOC,OACPA,CAAA;IACerB,UAAA,CAAAC,mBAAA,CAAoB,QAAU,OAAKC,WAAW;IACzD,KAAKK,YAAa;IAClB,KAAKA,YAAe;IACpB,KAAKL,WAAc;IACnB,KAAKkB,QAAW;IAChB,KAAKf,MAAS;EAAA;AAEtB;AA1IIZ,YAHS,CAGF6B,SAAA,GAA+BC,aAAc,CAAAC,WAAA;AA4IxDC,UAAA,CAAWC,GAAA,CAAIjC,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}