{"ast":null,"code":"class ObservablePoint {\n  constructor(cb, scope) {\n    let x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    this._x = x;\n    this._y = y;\n    this.cb = cb;\n    this.scope = scope;\n  }\n  clone() {\n    let cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.cb;\n    let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scope;\n    return new ObservablePoint(cb, scope, this._x, this._y);\n  }\n  set() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n    if (this._x !== x || this._y !== y) {\n      this._x = x;\n      this._y = y;\n      this.cb.call(this.scope);\n    }\n    return this;\n  }\n  copyFrom(p) {\n    if (this._x !== p.x || this._y !== p.y) {\n      this._x = p.x;\n      this._y = p.y;\n      this.cb.call(this.scope);\n    }\n    return this;\n  }\n  copyTo(p) {\n    p.set(this._x, this._y);\n    return p;\n  }\n  equals(p) {\n    return p.x === this._x && p.y === this._y;\n  }\n  toString() {\n    return `[@pixi/math:ObservablePoint x=${0} y=${0} scope=${this.scope}]`;\n  }\n  get x() {\n    return this._x;\n  }\n  set x(value) {\n    if (this._x !== value) {\n      this._x = value;\n      this.cb.call(this.scope);\n    }\n  }\n  get y() {\n    return this._y;\n  }\n  set y(value) {\n    if (this._y !== value) {\n      this._y = value;\n      this.cb.call(this.scope);\n    }\n  }\n}\nexport { ObservablePoint };","map":{"version":3,"names":["ObservablePoint","constructor","cb","scope","x","arguments","length","undefined","y","_x","_y","clone","set","call","copyFrom","p","copyTo","equals","toString","value"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\math\\src\\ObservablePoint.ts"],"sourcesContent":["import type { IPoint } from './IPoint';\nimport type { IPointData } from './IPointData';\n\nexport interface ObservablePoint extends GlobalMixins.Point, IPoint {}\n\n/**\n * The ObservablePoint object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis.\n *\n * An `ObservablePoint` is a point that triggers a callback when the point's position is changed.\n * @memberof PIXI\n */\nexport class ObservablePoint<T = any> implements IPoint\n{\n    /** The callback function triggered when `x` and/or `y` are changed */\n    public cb: (this: T) => any;\n\n    /** The owner of the callback */\n    public scope: any;\n\n    _x: number;\n    _y: number;\n\n    /**\n     * Creates a new `ObservablePoint`\n     * @param cb - callback function triggered when `x` and/or `y` are changed\n     * @param scope - owner of callback\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(cb: (this: T) => any, scope: T, x = 0, y = 0)\n    {\n        this._x = x;\n        this._y = y;\n\n        this.cb = cb;\n        this.scope = scope;\n    }\n\n    /**\n     * Creates a clone of this point.\n     * The callback and scope params can be overridden otherwise they will default\n     * to the clone object's values.\n     * @override\n     * @param cb - The callback function triggered when `x` and/or `y` are changed\n     * @param scope - The owner of the callback\n     * @returns a copy of this observable point\n     */\n    clone(cb = this.cb, scope = this.scope): ObservablePoint\n    {\n        return new ObservablePoint(cb, scope, this._x, this._y);\n    }\n\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=x] - position of the point on the y axis\n     * @returns The observable point instance itself\n     */\n    set(x = 0, y = x): this\n    {\n        if (this._x !== x || this._y !== y)\n        {\n            this._x = x;\n            this._y = y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies x and y from the given point (`p`)\n     * @param p - The point to copy from. Can be any of type that is or extends `IPointData`\n     * @returns The observable point instance itself\n     */\n    copyFrom(p: IPointData): this\n    {\n        if (this._x !== p.x || this._y !== p.y)\n        {\n            this._x = p.x;\n            this._y = p.y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies this point's x and y into that of the given point (`p`)\n     * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n     * @returns The point (`p`) with values updated\n     */\n    copyTo<T extends IPoint>(p: T): T\n    {\n        p.set(this._x, this._y);\n\n        return p;\n    }\n\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    equals(p: IPointData): boolean\n    {\n        return (p.x === this._x) && (p.y === this._y);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:ObservablePoint x=${0} y=${0} scope=${this.scope}]`;\n    }\n    // #endif\n\n    /** Position of the observable point on the x axis. */\n    get x(): number\n    {\n        return this._x;\n    }\n\n    set x(value: number)\n    {\n        if (this._x !== value)\n        {\n            this._x = value;\n            this.cb.call(this.scope);\n        }\n    }\n\n    /** Position of the observable point on the y axis. */\n    get y(): number\n    {\n        return this._y;\n    }\n\n    set y(value: number)\n    {\n        if (this._y !== value)\n        {\n            this._y = value;\n            this.cb.call(this.scope);\n        }\n    }\n}\n"],"mappings":"AAYO,MAAMA,eACb;EAiBIC,YAAYC,EAAsB,EAAAC,KAAA,EAClC;IAAA,IAD4CC,CAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;IAAA,IAAGG,CAAA,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAI,CACvD;IACI,KAAKI,EAAK,GAAAL,CAAA;IACV,KAAKM,EAAK,GAAAF,CAAA;IAEV,KAAKN,EAAK,GAAAA,EAAA;IACV,KAAKC,KAAQ,GAAAA,KAAA;EAAA;EAYjBQ,MAAA,EACA;IAAA,IADMT,EAAK,GAAAG,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,WAAKH,EAAI;IAAA,IAAAC,KAAA,GAAAE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAQ,KAAKF,KACjC;IACI,OAAO,IAAIH,eAAgB,CAAAE,EAAA,EAAIC,KAAA,EAAO,IAAK,CAAAM,EAAA,EAAI,KAAKC,EAAE;EAAA;EAU1DE,GAAIA,CAAA,EACJ;IAAA,IADIR,CAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAI,CAAG;IAAA,IAAAG,CAAA,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAID,CACf;IACI,IAAI,IAAK,CAAAK,EAAA,KAAOL,CAAK,SAAKM,EAAA,KAAOF,CACjC;MACI,KAAKC,EAAK,GAAAL,CAAA;MACV,KAAKM,EAAK,GAAAF,CAAA;MACL,KAAAN,EAAA,CAAGW,IAAK,MAAKV,KAAK;IAAA;IAGpB;EAAA;EAQXW,SAASC,CACT;IACI,IAAI,KAAKN,EAAO,KAAAM,CAAA,CAAEX,CAAA,IAAK,IAAK,CAAAM,EAAA,KAAOK,CAAA,CAAEP,CACrC;MACI,KAAKC,EAAA,GAAKM,CAAE,CAAAX,CAAA;MACZ,KAAKM,EAAA,GAAKK,CAAE,CAAAP,CAAA;MACP,KAAAN,EAAA,CAAGW,IAAK,MAAKV,KAAK;IAAA;IAGpB;EAAA;EAQXa,OAAyBD,CACzB;IACIA,CAAA,CAAEH,GAAI,MAAKH,EAAI,OAAKC,EAAE;IAEf,OAAAK,CAAA;EAAA;EAQXE,OAAOF,CACP;IACI,OAAQA,CAAA,CAAEX,CAAM,UAAKK,EAAQ,IAAAM,CAAA,CAAEP,CAAA,KAAM,IAAK,CAAAE,EAAA;EAAA;EAI9CQ,QACAA,CAAA;IACW,wCAAiC,CAAO,iBAAW,IAAK,CAAAf,KAAA;EAAA;EAKnE,IAAIC,CACJA,CAAA;IACI,OAAO,IAAK,CAAAK,EAAA;EAAA;EAGhB,IAAIL,EAAEe,KACN;IACQ,SAAKV,EAAA,KAAOU,KAChB;MACI,KAAKV,EAAK,GAAAU,KAAA;MACL,KAAAjB,EAAA,CAAGW,IAAK,MAAKV,KAAK;IAAA;EAC3B;EAIJ,IAAIK,CACJA,CAAA;IACI,OAAO,IAAK,CAAAE,EAAA;EAAA;EAGhB,IAAIF,EAAEW,KACN;IACQ,SAAKT,EAAA,KAAOS,KAChB;MACI,KAAKT,EAAK,GAAAS,KAAA;MACL,KAAAjB,EAAA,CAAGW,IAAK,MAAKV,KAAK;IAAA;EAC3B;AAER"},"metadata":{},"sourceType":"module","externalDependencies":[]}