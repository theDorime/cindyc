{"ast":null,"code":"class TimeLimiter {\n  constructor(maxMilliseconds) {\n    this.maxMilliseconds = maxMilliseconds;\n    this.frameStart = 0;\n  }\n  beginFrame() {\n    this.frameStart = Date.now();\n  }\n  allowedToUpload() {\n    return Date.now() - this.frameStart < this.maxMilliseconds;\n  }\n}\nexport { TimeLimiter };","map":{"version":3,"names":["TimeLimiter","constructor","maxMilliseconds","frameStart","beginFrame","Date","now","allowedToUpload"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\prepare\\src\\TimeLimiter.ts"],"sourcesContent":["/**\n * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of milliseconds per frame.\n * @memberof PIXI\n */\nexport class TimeLimiter\n{\n    /** The maximum milliseconds that can be spent preparing items each frame. */\n    public maxMilliseconds: number;\n\n    /**\n     * The start time of the current frame.\n     * @readonly\n     */\n    public frameStart: number;\n\n    /** @param maxMilliseconds - The maximum milliseconds that can be spent preparing items each frame. */\n    constructor(maxMilliseconds: number)\n    {\n        this.maxMilliseconds = maxMilliseconds;\n        this.frameStart = 0;\n    }\n\n    /** Resets any counting properties to start fresh on a new frame. */\n    beginFrame(): void\n    {\n        this.frameStart = Date.now();\n    }\n\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @returns - If the item is allowed to be uploaded.\n     */\n    allowedToUpload(): boolean\n    {\n        return Date.now() - this.frameStart < this.maxMilliseconds;\n    }\n}\n"],"mappings":"AAKO,MAAMA,WACb;EAWIC,YAAYC,eACZ;IACI,KAAKA,eAAkB,GAAAA,eAAA;IACvB,KAAKC,UAAa;EAAA;EAItBC,UACAA,CAAA;IACS,KAAAD,UAAA,GAAaE,IAAA,CAAKC,GAAI;EAAA;EAO/BC,eACAA,CAAA;IACI,OAAOF,IAAK,CAAAC,GAAA,EAAQ,QAAKH,UAAA,GAAa,IAAK,CAAAD,eAAA;EAAA;AAEnD"},"metadata":{},"sourceType":"module","externalDependencies":[]}