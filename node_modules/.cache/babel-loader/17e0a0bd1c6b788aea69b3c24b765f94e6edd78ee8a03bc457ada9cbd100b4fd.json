{"ast":null,"code":"import { extensions, ExtensionType } from '@pixi/extensions';\nconst renderers = [];\nextensions.handleByList(ExtensionType.Renderer, renderers);\nfunction autoDetectRenderer(options) {\n  for (const RendererType of renderers) {\n    if (RendererType.test(options)) {\n      return new RendererType(options);\n    }\n  }\n  throw new Error(\"Unable to auto-detect a suitable renderer.\");\n}\nexport { autoDetectRenderer };","map":{"version":3,"names":["renderers","extensions","handleByList","ExtensionType","Renderer","autoDetectRenderer","options","RendererType","test","Error"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\autoDetectRenderer.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\n\nimport type { ICanvas } from '@pixi/settings';\nimport type { IRenderer, IRendererOptions } from './IRenderer';\n\n/**\n * Renderer options supplied to `autoDetectRenderer`.\n * @memberof PIXI\n */\nexport interface IRendererOptionsAuto extends IRendererOptions\n{\n    /**\n     * Force CanvasRenderer even if WebGL is supported. Only available with **pixi.js-legacy**.\n     * @default false\n     */\n    forceCanvas?: boolean;\n}\n\nexport interface IRendererConstructor<VIEW extends ICanvas = ICanvas>\n{\n    test(options?: Partial<IRendererOptionsAuto>): boolean;\n    new (options?: Partial<IRendererOptionsAuto>): IRenderer<VIEW>;\n}\n\n/**\n * Collection of installed Renderers.\n * @ignore\n */\nconst renderers: IRendererConstructor<ICanvas>[] = [];\n\nextensions.handleByList(ExtensionType.Renderer, renderers);\n\n/**\n * This helper function will automatically detect which renderer you should be using.\n * WebGL is the preferred renderer as it is a lot faster. If WebGL is not supported by\n * the browser then this function will return a canvas renderer.\n * @memberof PIXI\n * @function autoDetectRenderer\n * @param options - Options to use.\n */\nexport function autoDetectRenderer<VIEW extends ICanvas = ICanvas>(options?: Partial<IRendererOptionsAuto>): IRenderer<VIEW>\n{\n    for (const RendererType of renderers)\n    {\n        if (RendererType.test(options))\n        {\n            return new RendererType(options) as IRenderer<VIEW>;\n        }\n    }\n\n    throw new Error('Unable to auto-detect a suitable renderer.');\n}\n"],"mappings":";AA4BA,MAAMA,SAAA,GAA6C,EAAC;AAEpDC,UAAW,CAAAC,YAAA,CAAaC,aAAc,CAAAC,QAAA,EAAUJ,SAAS;AAUlD,SAAAK,mBAA4DC,OACnE;EACI,WAAWC,YAAA,IAAgBP,SAC3B;IACQ,IAAAO,YAAA,CAAaC,IAAK,CAAAF,OAAO,CAC7B;MACW,WAAIC,YAAA,CAAaD,OAAO;IAAA;EACnC;EAGE,UAAIG,KAAA,CAAM,4CAA4C;AAChE"},"metadata":{},"sourceType":"module","externalDependencies":[]}