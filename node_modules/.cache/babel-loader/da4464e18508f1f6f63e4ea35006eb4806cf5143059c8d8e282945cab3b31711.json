{"ast":null,"code":"import { Texture, BaseTexture, Ticker, UPDATE_PRIORITY } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Text, TextStyle, TextMetrics } from '@pixi/text';\nimport { CountLimiter } from './CountLimiter.mjs';\nfunction findMultipleBaseTextures(item, queue) {\n  let result = false;\n  if (item?._textures?.length) {\n    for (let i = 0; i < item._textures.length; i++) {\n      if (item._textures[i] instanceof Texture) {\n        const baseTexture = item._textures[i].baseTexture;\n        if (!queue.includes(baseTexture)) {\n          queue.push(baseTexture);\n          result = true;\n        }\n      }\n    }\n  }\n  return result;\n}\nfunction findBaseTexture(item, queue) {\n  if (item.baseTexture instanceof BaseTexture) {\n    const texture = item.baseTexture;\n    if (!queue.includes(texture)) {\n      queue.push(texture);\n    }\n    return true;\n  }\n  return false;\n}\nfunction findTexture(item, queue) {\n  if (item._texture && item._texture instanceof Texture) {\n    const texture = item._texture.baseTexture;\n    if (!queue.includes(texture)) {\n      queue.push(texture);\n    }\n    return true;\n  }\n  return false;\n}\nfunction drawText(_helper, item) {\n  if (item instanceof Text) {\n    item.updateText(true);\n    return true;\n  }\n  return false;\n}\nfunction calculateTextStyle(_helper, item) {\n  if (item instanceof TextStyle) {\n    const font = item.toFontString();\n    TextMetrics.measureFont(font);\n    return true;\n  }\n  return false;\n}\nfunction findText(item, queue) {\n  if (item instanceof Text) {\n    if (!queue.includes(item.style)) {\n      queue.push(item.style);\n    }\n    if (!queue.includes(item)) {\n      queue.push(item);\n    }\n    const texture = item._texture.baseTexture;\n    if (!queue.includes(texture)) {\n      queue.push(texture);\n    }\n    return true;\n  }\n  return false;\n}\nfunction findTextStyle(item, queue) {\n  if (item instanceof TextStyle) {\n    if (!queue.includes(item)) {\n      queue.push(item);\n    }\n    return true;\n  }\n  return false;\n}\nconst _BasePrepare = class {\n  constructor(renderer) {\n    this.limiter = new CountLimiter(_BasePrepare.uploadsPerFrame);\n    this.renderer = renderer;\n    this.uploadHookHelper = null;\n    this.queue = [];\n    this.addHooks = [];\n    this.uploadHooks = [];\n    this.completes = [];\n    this.ticking = false;\n    this.delayedTick = () => {\n      if (!this.queue) {\n        return;\n      }\n      this.prepareItems();\n    };\n    this.registerFindHook(findText);\n    this.registerFindHook(findTextStyle);\n    this.registerFindHook(findMultipleBaseTextures);\n    this.registerFindHook(findBaseTexture);\n    this.registerFindHook(findTexture);\n    this.registerUploadHook(drawText);\n    this.registerUploadHook(calculateTextStyle);\n  }\n  upload(item) {\n    return new Promise(resolve => {\n      if (item) {\n        this.add(item);\n      }\n      if (this.queue.length) {\n        this.completes.push(resolve);\n        if (!this.ticking) {\n          this.ticking = true;\n          Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n        }\n      } else {\n        resolve();\n      }\n    });\n  }\n  tick() {\n    setTimeout(this.delayedTick, 0);\n  }\n  prepareItems() {\n    this.limiter.beginFrame();\n    while (this.queue.length && this.limiter.allowedToUpload()) {\n      const item = this.queue[0];\n      let uploaded = false;\n      if (item && !item._destroyed) {\n        for (let i = 0, len = this.uploadHooks.length; i < len; i++) {\n          if (this.uploadHooks[i](this.uploadHookHelper, item)) {\n            this.queue.shift();\n            uploaded = true;\n            break;\n          }\n        }\n      }\n      if (!uploaded) {\n        this.queue.shift();\n      }\n    }\n    if (!this.queue.length) {\n      this.ticking = false;\n      const completes = this.completes.slice(0);\n      this.completes.length = 0;\n      for (let i = 0, len = completes.length; i < len; i++) {\n        completes[i]();\n      }\n    } else {\n      Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n    }\n  }\n  registerFindHook(addHook) {\n    if (addHook) {\n      this.addHooks.push(addHook);\n    }\n    return this;\n  }\n  registerUploadHook(uploadHook) {\n    if (uploadHook) {\n      this.uploadHooks.push(uploadHook);\n    }\n    return this;\n  }\n  add(item) {\n    for (let i = 0, len = this.addHooks.length; i < len; i++) {\n      if (this.addHooks[i](item, this.queue)) {\n        break;\n      }\n    }\n    if (item instanceof Container) {\n      for (let i = item.children.length - 1; i >= 0; i--) {\n        this.add(item.children[i]);\n      }\n    }\n    return this;\n  }\n  destroy() {\n    if (this.ticking) {\n      Ticker.system.remove(this.tick, this);\n    }\n    this.ticking = false;\n    this.addHooks = null;\n    this.uploadHooks = null;\n    this.renderer = null;\n    this.completes = null;\n    this.queue = null;\n    this.limiter = null;\n    this.uploadHookHelper = null;\n  }\n};\nlet BasePrepare = _BasePrepare;\nBasePrepare.uploadsPerFrame = 4;\nexport { BasePrepare };","map":{"version":3,"names":["findMultipleBaseTextures","item","queue","result","_textures","length","i","Texture","baseTexture","includes","push","findBaseTexture","BaseTexture","texture","findTexture","_texture","drawText","_helper","Text","updateText","calculateTextStyle","TextStyle","font","toFontString","TextMetrics","measureFont","findText","style","findTextStyle","_BasePrepare","constructor","renderer","limiter","CountLimiter","uploadsPerFrame","uploadHookHelper","addHooks","uploadHooks","completes","ticking","delayedTick","prepareItems","registerFindHook","registerUploadHook","upload","Promise","resolve","add","Ticker","system","addOnce","tick","UPDATE_PRIORITY","UTILITY","setTimeout","beginFrame","allowedToUpload","uploaded","_destroyed","len","shift","slice","addHook","uploadHook","Container","children","destroy","remove","BasePrepare"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\prepare\\src\\BasePrepare.ts"],"sourcesContent":["import { BaseTexture, Texture, Ticker, UPDATE_PRIORITY } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Text, TextMetrics, TextStyle } from '@pixi/text';\nimport { CountLimiter } from './CountLimiter';\n\nimport type { IRenderer } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\n\ninterface IArrowFunction\n{\n    (): void;\n}\ninterface IUploadHook\n{\n    (helper: IRenderer | BasePrepare, item: IDisplayObjectExtended): boolean;\n}\n\ninterface IFindHook\n{\n    (item: any, queue: Array<any>): boolean;\n}\n\nexport interface IDisplayObjectExtended extends DisplayObject\n{\n    _textures?: Array<Texture>;\n    _texture?: Texture;\n    style?: TextStyle | Partial<TextStyle>;\n}\n\n/**\n * Built-in hook to find multiple textures from objects like AnimatedSprites.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findMultipleBaseTextures(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    let result = false;\n\n    // Objects with multiple textures\n    if (item?._textures?.length)\n    {\n        for (let i = 0; i < item._textures.length; i++)\n        {\n            if (item._textures[i] instanceof Texture)\n            {\n                const baseTexture = item._textures[i].baseTexture;\n\n                if (!queue.includes(baseTexture))\n                {\n                    queue.push(baseTexture);\n                    result = true;\n                }\n            }\n        }\n    }\n\n    return result;\n}\n\n/**\n * Built-in hook to find BaseTextures from Texture.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findBaseTexture(item: Texture, queue: Array<any>): boolean\n{\n    if (item.baseTexture instanceof BaseTexture)\n    {\n        const texture = item.baseTexture;\n\n        if (!queue.includes(texture))\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find textures from objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findTexture(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item._texture && item._texture instanceof Texture)\n    {\n        const texture = item._texture.baseTexture;\n\n        if (!queue.includes(texture))\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to draw PIXI.Text to its texture.\n * @private\n * @param _helper - Not used by this upload handler\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction drawText(_helper: IRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (item instanceof Text)\n    {\n        // updating text will return early if it is not dirty\n        item.updateText(true);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to calculate a text style for a PIXI.Text object.\n * @private\n * @param _helper - Not used by this upload handler\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction calculateTextStyle(_helper: IRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (item instanceof TextStyle)\n    {\n        const font = item.toFontString();\n\n        TextMetrics.measureFont(font);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find Text objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns if a PIXI.Text object was found.\n */\nfunction findText(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item instanceof Text)\n    {\n        // push the text style to prepare it - this can be really expensive\n        if (!queue.includes(item.style))\n        {\n            queue.push(item.style);\n        }\n        // also push the text object so that we can render it (to canvas/texture) if needed\n        if (!queue.includes(item))\n        {\n            queue.push(item);\n        }\n        // also push the Text's texture for upload to GPU\n        const texture = item._texture.baseTexture;\n\n        if (!queue.includes(texture))\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find TextStyle objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.TextStyle object was found.\n */\nfunction findTextStyle(item: TextStyle, queue: Array<any>): boolean\n{\n    if (item instanceof TextStyle)\n    {\n        if (!queue.includes(item))\n        {\n            queue.push(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * BasePrepare handles basic queuing functionality and is extended by\n * {@link PIXI.Prepare} and {@link PIXI.CanvasPrepare}\n * to provide preparation capabilities specific to their respective renderers.\n * @example\n * // Create a sprite\n * const sprite = PIXI.Sprite.from('something.png');\n *\n * // Load object into GPU\n * app.renderer.prepare.upload(sprite, () => {\n *     // Texture(s) has been uploaded to GPU\n *     app.stage.addChild(sprite);\n * });\n * @abstract\n * @memberof PIXI\n */\nexport class BasePrepare\n{\n    /**\n     * The default maximum uploads per frame.\n     * @static\n     */\n    public static uploadsPerFrame = 4;\n\n    /**\n     * The limiter to be used to control how quickly items are prepared.\n     * @type {PIXI.CountLimiter|PIXI.TimeLimiter}\n     */\n    private limiter: CountLimiter;\n\n    /** Reference to the renderer. */\n    protected renderer: IRenderer;\n\n    /**\n     * The only real difference between CanvasPrepare and Prepare is what they pass\n     * to upload hooks. That different parameter is stored here.\n     */\n    protected uploadHookHelper: any;\n\n    /** Collection of items to uploads at once. */\n    protected queue: Array<any>;\n\n    /**\n     * Collection of additional hooks for finding assets.\n     * @type {Array<Function>}\n     */\n    public addHooks: Array<any>;\n\n    /**\n     * Collection of additional hooks for processing assets.\n     * @type {Array<Function>}\n     */\n    public uploadHooks: Array<any>;\n\n    /**\n     * Callback to call after completed.\n     * @type {Array<Function>}\n     */\n    public completes: Array<any>;\n\n    /**\n     * If prepare is ticking (running).\n     * @type {boolean}\n     */\n    public ticking: boolean;\n\n    /**\n     * 'bound' call for prepareItems().\n     * @type {Function}\n     */\n    private delayedTick: IArrowFunction;\n\n    /**\n     * @param {PIXI.IRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: IRenderer)\n    {\n        this.limiter = new CountLimiter(BasePrepare.uploadsPerFrame);\n        this.renderer = renderer;\n        this.uploadHookHelper = null;\n        this.queue = [];\n        this.addHooks = [];\n        this.uploadHooks = [];\n        this.completes = [];\n        this.ticking = false;\n        this.delayedTick = (): void =>\n        {\n            // unlikely, but in case we were destroyed between tick() and delayedTick()\n            if (!this.queue)\n            {\n                return;\n            }\n            this.prepareItems();\n        };\n\n        // hooks to find the correct texture\n        this.registerFindHook(findText);\n        this.registerFindHook(findTextStyle);\n        this.registerFindHook(findMultipleBaseTextures);\n        this.registerFindHook(findBaseTexture);\n        this.registerFindHook(findTexture);\n\n        // upload hooks\n        this.registerUploadHook(drawText);\n        this.registerUploadHook(calculateTextStyle);\n    }\n\n    /**\n     * Upload all the textures and graphics to the GPU.\n     * @method PIXI.BasePrepare#upload\n     * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text} [item] -\n     *        Container or display object to search for items to upload or the items to upload themselves,\n     *        or optionally ommitted, if items have been added using {@link PIXI.BasePrepare#add `prepare.add`}.\n     */\n    upload(item?: IDisplayObjectExtended | Container | BaseTexture | Texture): Promise<void>\n    {\n        return new Promise((resolve) =>\n        {\n            // If a display object, search for items\n            // that we could upload\n            if (item)\n            {\n                this.add(item as IDisplayObjectExtended | Container | BaseTexture | Texture);\n            }\n\n            // Get the items for upload from the display\n            if (this.queue.length)\n            {\n                this.completes.push(resolve);\n\n                if (!this.ticking)\n                {\n                    this.ticking = true;\n                    Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n                }\n            }\n            else\n            {\n                resolve();\n            }\n        });\n    }\n\n    /**\n     * Handle tick update\n     * @private\n     */\n    tick(): void\n    {\n        setTimeout(this.delayedTick, 0);\n    }\n\n    /**\n     * Actually prepare items. This is handled outside of the tick because it will take a while\n     * and we do NOT want to block the current animation frame from rendering.\n     * @private\n     */\n    prepareItems(): void\n    {\n        this.limiter.beginFrame();\n        // Upload the graphics\n        while (this.queue.length && this.limiter.allowedToUpload())\n        {\n            const item = this.queue[0];\n            let uploaded = false;\n\n            if (item && !item._destroyed)\n            {\n                for (let i = 0, len = this.uploadHooks.length; i < len; i++)\n                {\n                    if (this.uploadHooks[i](this.uploadHookHelper, item))\n                    {\n                        this.queue.shift();\n                        uploaded = true;\n                        break;\n                    }\n                }\n            }\n\n            if (!uploaded)\n            {\n                this.queue.shift();\n            }\n        }\n\n        // We're finished\n        if (!this.queue.length)\n        {\n            this.ticking = false;\n\n            const completes = this.completes.slice(0);\n\n            this.completes.length = 0;\n\n            for (let i = 0, len = completes.length; i < len; i++)\n            {\n                completes[i]();\n            }\n        }\n        else\n        {\n            // if we are not finished, on the next rAF do this again\n            Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n        }\n    }\n\n    /**\n     * Adds hooks for finding items.\n     * @param {Function} addHook - Function call that takes two parameters: `item:*, queue:Array`\n     *          function must return `true` if it was able to add item to the queue.\n     * @returns Instance of plugin for chaining.\n     */\n    registerFindHook(addHook: IFindHook): this\n    {\n        if (addHook)\n        {\n            this.addHooks.push(addHook);\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds hooks for uploading items.\n     * @param {Function} uploadHook - Function call that takes two parameters: `prepare:CanvasPrepare, item:*` and\n     *          function must return `true` if it was able to handle upload of item.\n     * @returns Instance of plugin for chaining.\n     */\n    registerUploadHook(uploadHook: IUploadHook): this\n    {\n        if (uploadHook)\n        {\n            this.uploadHooks.push(uploadHook);\n        }\n\n        return this;\n    }\n\n    /**\n     * Manually add an item to the uploading queue.\n     * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text|*} item - Object to\n     *        add to the queue\n     * @returns Instance of plugin for chaining.\n     */\n    add(item: IDisplayObjectExtended | Container | BaseTexture | Texture): this\n    {\n        // Add additional hooks for finding elements on special\n        // types of objects that\n        for (let i = 0, len = this.addHooks.length; i < len; i++)\n        {\n            if (this.addHooks[i](item, this.queue))\n            {\n                break;\n            }\n        }\n\n        // Get children recursively\n        if (item instanceof Container)\n        {\n            for (let i = item.children.length - 1; i >= 0; i--)\n            {\n                this.add(item.children[i]);\n            }\n        }\n\n        return this;\n    }\n\n    /** Destroys the plugin, don't use after this. */\n    destroy(): void\n    {\n        if (this.ticking)\n        {\n            Ticker.system.remove(this.tick, this);\n        }\n        this.ticking = false;\n        this.addHooks = null;\n        this.uploadHooks = null;\n        this.renderer = null;\n        this.completes = null;\n        this.queue = null;\n        this.limiter = null;\n        this.uploadHookHelper = null;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}