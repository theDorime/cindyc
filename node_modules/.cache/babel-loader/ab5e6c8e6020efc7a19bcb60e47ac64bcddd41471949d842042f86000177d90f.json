{"ast":null,"code":"import { ExtensionType, extensions } from '@pixi/extensions';\nimport { settings } from '@pixi/settings';\nimport { AbstractMaskSystem } from './AbstractMaskSystem.mjs';\nclass StencilSystem extends AbstractMaskSystem {\n  constructor(renderer) {\n    super(renderer);\n    this.glConst = settings.ADAPTER.getWebGLRenderingContext().STENCIL_TEST;\n  }\n  getStackLength() {\n    const maskData = this.maskStack[this.maskStack.length - 1];\n    if (maskData) {\n      return maskData._stencilCounter;\n    }\n    return 0;\n  }\n  push(maskData) {\n    const maskObject = maskData.maskObject;\n    const {\n      gl\n    } = this.renderer;\n    const prevMaskCount = maskData._stencilCounter;\n    if (prevMaskCount === 0) {\n      this.renderer.framebuffer.forceStencil();\n      gl.clearStencil(0);\n      gl.clear(gl.STENCIL_BUFFER_BIT);\n      gl.enable(gl.STENCIL_TEST);\n    }\n    maskData._stencilCounter++;\n    const colorMask = maskData._colorMask;\n    if (colorMask !== 0) {\n      maskData._colorMask = 0;\n      gl.colorMask(false, false, false, false);\n    }\n    gl.stencilFunc(gl.EQUAL, prevMaskCount, 4294967295);\n    gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);\n    maskObject.renderable = true;\n    maskObject.render(this.renderer);\n    this.renderer.batch.flush();\n    maskObject.renderable = false;\n    if (colorMask !== 0) {\n      maskData._colorMask = colorMask;\n      gl.colorMask((colorMask & 1) !== 0, (colorMask & 2) !== 0, (colorMask & 4) !== 0, (colorMask & 8) !== 0);\n    }\n    this._useCurrent();\n  }\n  pop(maskObject) {\n    const gl = this.renderer.gl;\n    if (this.getStackLength() === 0) {\n      gl.disable(gl.STENCIL_TEST);\n    } else {\n      const maskData = this.maskStack.length !== 0 ? this.maskStack[this.maskStack.length - 1] : null;\n      const colorMask = maskData ? maskData._colorMask : 15;\n      if (colorMask !== 0) {\n        maskData._colorMask = 0;\n        gl.colorMask(false, false, false, false);\n      }\n      gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);\n      maskObject.renderable = true;\n      maskObject.render(this.renderer);\n      this.renderer.batch.flush();\n      maskObject.renderable = false;\n      if (colorMask !== 0) {\n        maskData._colorMask = colorMask;\n        gl.colorMask((colorMask & 1) !== 0, (colorMask & 2) !== 0, (colorMask & 4) !== 0, (colorMask & 8) !== 0);\n      }\n      this._useCurrent();\n    }\n  }\n  _useCurrent() {\n    const gl = this.renderer.gl;\n    gl.stencilFunc(gl.EQUAL, this.getStackLength(), 4294967295);\n    gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n  }\n}\nStencilSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"stencil\"\n};\nextensions.add(StencilSystem);\nexport { StencilSystem };","map":{"version":3,"names":["StencilSystem","AbstractMaskSystem","constructor","renderer","glConst","settings","ADAPTER","getWebGLRenderingContext","STENCIL_TEST","getStackLength","maskData","maskStack","length","_stencilCounter","push","maskObject","gl","prevMaskCount","framebuffer","forceStencil","clearStencil","clear","STENCIL_BUFFER_BIT","enable","colorMask","_colorMask","stencilFunc","EQUAL","stencilOp","KEEP","INCR","renderable","render","batch","flush","_useCurrent","pop","disable","DECR","extension","type","ExtensionType","RendererSystem","name","extensions","add"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\mask\\StencilSystem.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\nimport { settings } from '@pixi/settings';\nimport { AbstractMaskSystem } from './AbstractMaskSystem';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { Renderer } from '../Renderer';\nimport type { IMaskTarget, MaskData } from './MaskData';\n\n/**\n * System plugin to the renderer to manage stencils (used for masks).\n * @memberof PIXI\n */\nexport class StencilSystem extends AbstractMaskSystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'stencil',\n    };\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        this.glConst = settings.ADAPTER.getWebGLRenderingContext().STENCIL_TEST;\n    }\n\n    getStackLength(): number\n    {\n        const maskData = this.maskStack[this.maskStack.length - 1];\n\n        if (maskData)\n        {\n            return maskData._stencilCounter;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Applies the Mask and adds it to the current stencil stack.\n     * @param maskData - The mask data\n     */\n    push(maskData: MaskData): void\n    {\n        const maskObject = maskData.maskObject;\n        const { gl } = this.renderer;\n        const prevMaskCount = maskData._stencilCounter;\n\n        if (prevMaskCount === 0)\n        {\n            // force use stencil texture in current framebuffer\n            this.renderer.framebuffer.forceStencil();\n            gl.clearStencil(0);\n            gl.clear(gl.STENCIL_BUFFER_BIT);\n            gl.enable(gl.STENCIL_TEST);\n        }\n\n        maskData._stencilCounter++;\n\n        const colorMask = maskData._colorMask;\n\n        if (colorMask !== 0)\n        {\n            maskData._colorMask = 0;\n            gl.colorMask(false, false, false, false);\n        }\n\n        // Increment the reference stencil value where the new mask overlaps with the old ones.\n        gl.stencilFunc(gl.EQUAL, prevMaskCount, 0xFFFFFFFF);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);\n\n        maskObject.renderable = true;\n        maskObject.render(this.renderer);\n        this.renderer.batch.flush();\n        maskObject.renderable = false;\n\n        if (colorMask !== 0)\n        {\n            maskData._colorMask = colorMask;\n            gl.colorMask(\n                (colorMask & 1) !== 0,\n                (colorMask & 2) !== 0,\n                (colorMask & 4) !== 0,\n                (colorMask & 8) !== 0\n            );\n        }\n\n        this._useCurrent();\n    }\n\n    /**\n     * Pops stencil mask. MaskData is already removed from stack\n     * @param {PIXI.DisplayObject} maskObject - object of popped mask data\n     */\n    pop(maskObject: IMaskTarget): void\n    {\n        const gl = this.renderer.gl;\n\n        if (this.getStackLength() === 0)\n        {\n            // the stack is empty!\n            gl.disable(gl.STENCIL_TEST);\n        }\n        else\n        {\n            const maskData = this.maskStack.length !== 0 ? this.maskStack[this.maskStack.length - 1] : null;\n            const colorMask = maskData ? maskData._colorMask : 0xf;\n\n            if (colorMask !== 0)\n            {\n                maskData._colorMask = 0;\n                gl.colorMask(false, false, false, false);\n            }\n\n            // Decrement the reference stencil value where the popped mask overlaps with the other ones\n            gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);\n\n            maskObject.renderable = true;\n            maskObject.render(this.renderer);\n            this.renderer.batch.flush();\n            maskObject.renderable = false;\n\n            if (colorMask !== 0)\n            {\n                maskData._colorMask = colorMask;\n                gl.colorMask(\n                    (colorMask & 0x1) !== 0,\n                    (colorMask & 0x2) !== 0,\n                    (colorMask & 0x4) !== 0,\n                    (colorMask & 0x8) !== 0\n                );\n            }\n\n            this._useCurrent();\n        }\n    }\n\n    /**\n     * Setup renderer to use the current stencil data.\n     * @private\n     */\n    _useCurrent(): void\n    {\n        const gl = this.renderer.gl;\n\n        gl.stencilFunc(gl.EQUAL, this.getStackLength(), 0xFFFFFFFF);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n    }\n}\n\nextensions.add(StencilSystem);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}