{"ast":null,"code":"import { Color } from '@pixi/color';\nimport { MSAA_QUALITY, MIPMAP_MODES } from '@pixi/constants';\nimport { Framebuffer } from '../framebuffer/Framebuffer.mjs';\nimport { BaseTexture } from '../textures/BaseTexture.mjs';\nclass BaseRenderTexture extends BaseTexture {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (typeof options === \"number\") {\n      const width = arguments[0];\n      const height = arguments[1];\n      const scaleMode = arguments[2];\n      const resolution = arguments[3];\n      options = {\n        width,\n        height,\n        scaleMode,\n        resolution\n      };\n    }\n    options.width = options.width || 100;\n    options.height = options.height || 100;\n    options.multisample ?? (options.multisample = MSAA_QUALITY.NONE);\n    super(null, options);\n    this.mipmap = MIPMAP_MODES.OFF;\n    this.valid = true;\n    this._clear = new Color([0, 0, 0, 0]);\n    this.framebuffer = new Framebuffer(this.realWidth, this.realHeight).addColorTexture(0, this);\n    this.framebuffer.multisample = options.multisample;\n    this.maskStack = [];\n    this.filterStack = [{}];\n  }\n  set clearColor(value) {\n    this._clear.setValue(value);\n  }\n  get clearColor() {\n    return this._clear.value;\n  }\n  get clear() {\n    return this._clear;\n  }\n  resize(desiredWidth, desiredHeight) {\n    this.framebuffer.resize(desiredWidth * this.resolution, desiredHeight * this.resolution);\n    this.setRealSize(this.framebuffer.width, this.framebuffer.height);\n  }\n  dispose() {\n    this.framebuffer.dispose();\n    super.dispose();\n  }\n  destroy() {\n    super.destroy();\n    this.framebuffer.destroyDepthTexture();\n    this.framebuffer = null;\n  }\n}\nexport { BaseRenderTexture };","map":{"version":3,"names":["BaseRenderTexture","BaseTexture","constructor","options","arguments","length","undefined","width","height","scaleMode","resolution","multisample","MSAA_QUALITY","NONE","mipmap","MIPMAP_MODES","OFF","valid","_clear","Color","framebuffer","Framebuffer","realWidth","realHeight","addColorTexture","maskStack","filterStack","clearColor","value","setValue","clear","resize","desiredWidth","desiredHeight","setRealSize","dispose","destroy","destroyDepthTexture"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\renderTexture\\BaseRenderTexture.ts"],"sourcesContent":["import { Color } from '@pixi/color';\nimport { MIPMAP_MODES, MSAA_QUALITY } from '@pixi/constants';\nimport { Framebuffer } from '../framebuffer/Framebuffer';\nimport { BaseTexture } from '../textures/BaseTexture';\n\nimport type { ColorSource } from '@pixi/color';\nimport type { MaskData } from '../mask/MaskData';\nimport type { IBaseTextureOptions } from '../textures/BaseTexture';\n\nexport interface BaseRenderTexture extends GlobalMixins.BaseRenderTexture, BaseTexture {}\n\n/**\n * A BaseRenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n *\n * __Hint__: All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded\n * otherwise black rectangles will be drawn instead.\n *\n * A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position\n * and rotation of the given Display Objects is ignored. For example:\n * @example\n * import { autoDetectRenderer, BaseRenderTexture, RenderTexture, Sprite } from 'pixi.js';\n *\n * const renderer = autoDetectRenderer();\n * const baseRenderTexture = new BaseRenderTexture({ width: 800, height: 600 });\n * const renderTexture = new RenderTexture(baseRenderTexture);\n * const sprite = Sprite.from('spinObj_01.png');\n *\n * sprite.position.x = 800 / 2;\n * sprite.position.y = 600 / 2;\n * sprite.anchor.x = 0.5;\n * sprite.anchor.y = 0.5;\n *\n * renderer.render(sprite, { renderTexture });\n *\n * // The Sprite in this case will be rendered using its local transform.\n * // To render this sprite at 0,0 you can clear the transform\n * sprite.setTransform();\n *\n * const baseRenderTexture = new BaseRenderTexture({ width: 100, height: 100 });\n * const renderTexture = new RenderTexture(baseRenderTexture);\n *\n * renderer.render(sprite, { renderTexture }); // Renders to center of RenderTexture\n * @memberof PIXI\n */\nexport class BaseRenderTexture extends BaseTexture\n{\n    public _clear: Color;\n    public framebuffer: Framebuffer;\n\n    /** The data structure for the stencil masks. */\n    maskStack: Array<MaskData>;\n\n    /** The data structure for the filters. */\n    filterStack: Array<any>;\n\n    /**\n     * @param options\n     * @param {number} [options.width=100] - The width of the base render texture.\n     * @param {number} [options.height=100] - The height of the base render texture.\n     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.BaseTexture.defaultOptions.scaleMode] - See {@link PIXI.SCALE_MODES}\n     *   for possible values.\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio\n     *   of the texture being generated.\n     * @param {PIXI.MSAA_QUALITY} [options.multisample=PIXI.MSAA_QUALITY.NONE] - The number of samples of the frame buffer.\n     */\n    constructor(options: IBaseTextureOptions = {})\n    {\n        if (typeof options === 'number')\n        {\n            /* eslint-disable prefer-rest-params */\n            // Backward compatibility of signature\n            const width = arguments[0];\n            const height = arguments[1];\n            const scaleMode = arguments[2];\n            const resolution = arguments[3];\n\n            options = { width, height, scaleMode, resolution };\n            /* eslint-enable prefer-rest-params */\n        }\n\n        options.width = options.width || 100;\n        options.height = options.height || 100;\n        options.multisample ??= MSAA_QUALITY.NONE;\n\n        super(null, options);\n\n        // Set defaults\n        this.mipmap = MIPMAP_MODES.OFF;\n        this.valid = true;\n\n        this._clear = new Color([0, 0, 0, 0]);\n        this.framebuffer = new Framebuffer(this.realWidth, this.realHeight)\n            .addColorTexture(0, this);\n        this.framebuffer.multisample = options.multisample;\n\n        // TODO - could this be added the systems?\n        this.maskStack = [];\n        this.filterStack = [{}];\n    }\n\n    /** Color when clearning the texture. */\n    set clearColor(value: ColorSource)\n    {\n        this._clear.setValue(value);\n    }\n    get clearColor(): ColorSource\n    {\n        return this._clear.value;\n    }\n\n    /**\n     * Color object when clearning the texture.\n     * @readonly\n     * @since 7.2.0\n     */\n    get clear(): Color\n    {\n        return this._clear;\n    }\n\n    /**\n     * Resizes the BaseRenderTexture.\n     * @param desiredWidth - The desired width to resize to.\n     * @param desiredHeight - The desired height to resize to.\n     */\n    resize(desiredWidth: number, desiredHeight: number): void\n    {\n        this.framebuffer.resize(desiredWidth * this.resolution, desiredHeight * this.resolution);\n        this.setRealSize(this.framebuffer.width, this.framebuffer.height);\n    }\n\n    /**\n     * Frees the texture and framebuffer from WebGL memory without destroying this texture object.\n     * This means you can still use the texture later which will upload it to GPU\n     * memory again.\n     * @fires PIXI.BaseTexture#dispose\n     */\n    dispose(): void\n    {\n        this.framebuffer.dispose();\n\n        super.dispose();\n    }\n\n    /** Destroys this texture. */\n    destroy(): void\n    {\n        super.destroy();\n\n        this.framebuffer.destroyDepthTexture();\n        this.framebuffer = null;\n    }\n}\n"],"mappings":";;;;AA4CO,MAAMA,iBAAA,SAA0BC,WACvC;EAoBIC,YAAA,EACA;IAAA,IADYC,OAA+B,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,QAC3C;IACQ,WAAOD,OAAA,KAAY,QACvB;MAGI,MAAMI,KAAA,GAAQH,SAAU;MACxB,MAAMI,MAAA,GAASJ,SAAU;MACzB,MAAMK,SAAA,GAAYL,SAAU;MAC5B,MAAMM,UAAA,GAAaN,SAAU;MAE7BD,OAAA,GAAU;QAAEI,KAAA;QAAOC,MAAQ;QAAAC,SAAA;QAAWC;MAAW;IAAA;IAI7CP,OAAA,CAAAI,KAAA,GAAQJ,OAAA,CAAQI,KAAS;IACzBJ,OAAA,CAAAK,MAAA,GAASL,OAAA,CAAQK,MAAU;IAC3BL,OAAA,CAAAQ,WAAA,KAAAR,OAAA,CAAAQ,WAAA,GAAgBC,YAAa,CAAAC,IAAA;IAErC,MAAM,MAAMV,OAAO;IAGnB,KAAKW,MAAA,GAASC,YAAa,CAAAC,GAAA;IAC3B,KAAKC,KAAQ;IAER,KAAAC,MAAA,GAAS,IAAIC,KAAM,EAAC,GAAG,CAAG,KAAG,CAAC,CAAC;IAC/B,KAAAC,WAAA,GAAc,IAAIC,WAAA,CAAY,IAAK,CAAAC,SAAA,EAAW,KAAKC,UAAU,EAC7DC,eAAgB,IAAG,IAAI;IACvB,KAAAJ,WAAA,CAAYT,WAAA,GAAcR,OAAQ,CAAAQ,WAAA;IAGvC,KAAKc,SAAA,GAAY,EAAC;IACb,KAAAC,WAAA,GAAc,CAAC,EAAE;EAAA;EAI1B,IAAIC,WAAWC,KACf;IACS,KAAAV,MAAA,CAAOW,QAAA,CAASD,KAAK;EAAA;EAE9B,IAAID,UACJA,CAAA;IACI,OAAO,KAAKT,MAAO,CAAAU,KAAA;EAAA;EAQvB,IAAIE,KACJA,CAAA;IACI,OAAO,IAAK,CAAAZ,MAAA;EAAA;EAQhBa,OAAOC,YAAA,EAAsBC,aAC7B;IACI,KAAKb,WAAA,CAAYW,MAAO,CAAAC,YAAA,GAAe,KAAKtB,UAAY,EAAAuB,aAAA,GAAgB,KAAKvB,UAAU;IACvF,KAAKwB,WAAA,CAAY,IAAK,CAAAd,WAAA,CAAYb,KAAO,OAAKa,WAAA,CAAYZ,MAAM;EAAA;EASpE2B,OACAA,CAAA;IACI,KAAKf,WAAA,CAAYe,OAAQ;IAEzB,MAAMA,OAAQ;EAAA;EAIlBC,OACAA,CAAA;IACI,MAAMA,OAAQ;IAEd,KAAKhB,WAAA,CAAYiB,mBAAoB;IACrC,KAAKjB,WAAc;EAAA;AAE3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}