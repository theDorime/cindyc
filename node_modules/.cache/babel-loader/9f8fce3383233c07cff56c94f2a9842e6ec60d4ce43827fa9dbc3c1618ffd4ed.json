{"ast":null,"code":"import { Matrix } from './Matrix.mjs';\nconst ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nconst uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\nconst rotationCayley = [];\nconst rotationMatrices = [];\nconst signum = Math.sign;\nfunction init() {\n  for (let i = 0; i < 16; i++) {\n    const row = [];\n    rotationCayley.push(row);\n    for (let j = 0; j < 16; j++) {\n      const _ux = signum(ux[i] * ux[j] + vx[i] * uy[j]);\n      const _uy = signum(uy[i] * ux[j] + vy[i] * uy[j]);\n      const _vx = signum(ux[i] * vx[j] + vx[i] * vy[j]);\n      const _vy = signum(uy[i] * vx[j] + vy[i] * vy[j]);\n      for (let k = 0; k < 16; k++) {\n        if (ux[k] === _ux && uy[k] === _uy && vx[k] === _vx && vy[k] === _vy) {\n          row.push(k);\n          break;\n        }\n      }\n    }\n  }\n  for (let i = 0; i < 16; i++) {\n    const mat = new Matrix();\n    mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n    rotationMatrices.push(mat);\n  }\n}\ninit();\nconst groupD8 = {\n  E: 0,\n  SE: 1,\n  S: 2,\n  SW: 3,\n  W: 4,\n  NW: 5,\n  N: 6,\n  NE: 7,\n  MIRROR_VERTICAL: 8,\n  MAIN_DIAGONAL: 10,\n  MIRROR_HORIZONTAL: 12,\n  REVERSE_DIAGONAL: 14,\n  uX: ind => ux[ind],\n  uY: ind => uy[ind],\n  vX: ind => vx[ind],\n  vY: ind => vy[ind],\n  inv: rotation => {\n    if (rotation & 8) {\n      return rotation & 15;\n    }\n    return -rotation & 7;\n  },\n  add: (rotationSecond, rotationFirst) => rotationCayley[rotationSecond][rotationFirst],\n  sub: (rotationSecond, rotationFirst) => rotationCayley[rotationSecond][groupD8.inv(rotationFirst)],\n  rotate180: rotation => rotation ^ 4,\n  isVertical: rotation => (rotation & 3) === 2,\n  byDirection: (dx, dy) => {\n    if (Math.abs(dx) * 2 <= Math.abs(dy)) {\n      if (dy >= 0) {\n        return groupD8.S;\n      }\n      return groupD8.N;\n    } else if (Math.abs(dy) * 2 <= Math.abs(dx)) {\n      if (dx > 0) {\n        return groupD8.E;\n      }\n      return groupD8.W;\n    } else if (dy > 0) {\n      if (dx > 0) {\n        return groupD8.SE;\n      }\n      return groupD8.SW;\n    } else if (dx > 0) {\n      return groupD8.NE;\n    }\n    return groupD8.NW;\n  },\n  matrixAppendRotationInv: function (matrix, rotation) {\n    let tx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let ty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    const mat = rotationMatrices[groupD8.inv(rotation)];\n    mat.tx = tx;\n    mat.ty = ty;\n    matrix.append(mat);\n  }\n};\nexport { groupD8 };","map":{"version":3,"names":["ux","uy","vx","vy","rotationCayley","rotationMatrices","signum","Math","sign","init","i","row","push","j","_ux","_uy","_vx","_vy","k","mat","Matrix","set","groupD8","E","SE","S","SW","W","NW","N","NE","MIRROR_VERTICAL","MAIN_DIAGONAL","MIRROR_HORIZONTAL","REVERSE_DIAGONAL","uX","ind","uY","vX","vY","inv","rotation","add","rotationSecond","rotationFirst","sub","rotate180","isVertical","byDirection","dx","dy","abs","matrixAppendRotationInv","matrix","tx","arguments","length","undefined","ty","append"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\math\\src\\groupD8.ts"],"sourcesContent":["// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group\n//\n// This file implements the dihedral group of order 16, also called\n// of degree 8. That's why its called groupD8.\n\nimport { Matrix } from './Matrix';\n\n/*\n * Transform matrix for operation n is:\n * | ux | vx |\n * | uy | vy |\n */\n\nconst ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nconst uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\n\n/**\n * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n * for the composition of each rotation in the dihederal group D8.\n * @type {number[][]}\n * @private\n */\nconst rotationCayley: number[][] = [];\n\n/**\n * Matrices for each `GD8Symmetry` rotation.\n * @type {PIXI.Matrix[]}\n * @private\n */\nconst rotationMatrices: Matrix[] = [];\n\n/*\n * Alias for {@code Math.sign}.\n */\nconst signum = Math.sign;\n\n/*\n * Initializes `rotationCayley` and `rotationMatrices`. It is called\n * only once below.\n */\nfunction init(): void\n{\n    for (let i = 0; i < 16; i++)\n    {\n        const row: number[] = [];\n\n        rotationCayley.push(row);\n\n        for (let j = 0; j < 16; j++)\n        {\n            /* Multiplies rotation matrices i and j. */\n            const _ux = signum((ux[i] * ux[j]) + (vx[i] * uy[j]));\n            const _uy = signum((uy[i] * ux[j]) + (vy[i] * uy[j]));\n            const _vx = signum((ux[i] * vx[j]) + (vx[i] * vy[j]));\n            const _vy = signum((uy[i] * vx[j]) + (vy[i] * vy[j]));\n\n            /* Finds rotation matrix matching the product and pushes it. */\n            for (let k = 0; k < 16; k++)\n            {\n                if (ux[k] === _ux && uy[k] === _uy\n                      && vx[k] === _vx && vy[k] === _vy)\n                {\n                    row.push(k);\n                    break;\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < 16; i++)\n    {\n        const mat = new Matrix();\n\n        mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n        rotationMatrices.push(mat);\n    }\n}\n\ninit();\n\ntype GD8Symmetry = number;\n/**\n * @memberof PIXI\n * @typedef {number} GD8Symmetry\n * @see PIXI.groupD8\n */\n\n/**\n * Implements the dihedral group D8, which is similar to\n * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};\n * D8 is the same but with diagonals, and it is used for texture\n * rotations.\n *\n * The directions the U- and V- axes after rotation\n * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`\n * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.\n *\n * **Origin:**\n *  This is the small part of gameofbombs.com portal system. It works.\n * @see PIXI.groupD8.E\n * @see PIXI.groupD8.SE\n * @see PIXI.groupD8.S\n * @see PIXI.groupD8.SW\n * @see PIXI.groupD8.W\n * @see PIXI.groupD8.NW\n * @see PIXI.groupD8.N\n * @see PIXI.groupD8.NE\n * @author Ivan @ivanpopelyshev\n * @namespace PIXI.groupD8\n * @memberof PIXI\n */\nexport const groupD8 = {\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 0°       | East      |\n     * @readonly\n     */\n    E: 0,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 45°↻     | Southeast |\n     * @readonly\n     */\n    SE: 1,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 90°↻     | South     |\n     * @readonly\n     */\n    S: 2,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 135°↻    | Southwest |\n     * @readonly\n     */\n    SW: 3,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 180°     | West      |\n     * @readonly\n     */\n    W: 4,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -135°/225°↻ | Northwest    |\n     * @readonly\n     */\n    NW: 5,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -90°/270°↻  | North        |\n     * @readonly\n     */\n    N: 6,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -45°/315°↻  | Northeast    |\n     * @readonly\n     */\n    NE: 7,\n\n    /**\n     * Reflection about Y-axis.\n     * @readonly\n     */\n    MIRROR_VERTICAL: 8,\n\n    /**\n     * Reflection about the main diagonal.\n     * @readonly\n     */\n    MAIN_DIAGONAL: 10,\n\n    /**\n     * Reflection about X-axis.\n     * @readonly\n     */\n    MIRROR_HORIZONTAL: 12,\n\n    /**\n     * Reflection about reverse diagonal.\n     * @readonly\n     */\n    REVERSE_DIAGONAL: 14,\n\n    /**\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The X-component of the U-axis\n     *    after rotating the axes.\n     */\n    uX: (ind: GD8Symmetry): GD8Symmetry => ux[ind],\n\n    /**\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The Y-component of the U-axis\n     *    after rotating the axes.\n     */\n    uY: (ind: GD8Symmetry): GD8Symmetry => uy[ind],\n\n    /**\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The X-component of the V-axis\n     *    after rotating the axes.\n     */\n    vX: (ind: GD8Symmetry): GD8Symmetry => vx[ind],\n\n    /**\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The Y-component of the V-axis\n     *    after rotating the axes.\n     */\n    vY: (ind: GD8Symmetry): GD8Symmetry => vy[ind],\n\n    /**\n     * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite\n     *   is needed. Only rotations have opposite symmetries while\n     *   reflections don't.\n     * @returns {PIXI.GD8Symmetry} The opposite symmetry of `rotation`\n     */\n    inv: (rotation: GD8Symmetry): GD8Symmetry =>\n    {\n        if (rotation & 8)// true only if between 8 & 15 (reflections)\n        {\n            return rotation & 15;// or rotation % 16\n        }\n\n        return (-rotation) & 7;// or (8 - rotation) % 8\n    },\n\n    /**\n     * Composes the two D8 operations.\n     *\n     * Taking `^` as reflection:\n     *\n     * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n     * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n     * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n     * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n     * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n     * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n     * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n     * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n     * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n     * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n     *\n     * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which\n     *   is the row in the above cayley table.\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which\n     *   is the column in the above cayley table.\n     * @returns {PIXI.GD8Symmetry} Composed operation\n     */\n    add: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][rotationFirst]\n    ),\n\n    /**\n     * Reverse of `add`.\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation\n     * @returns {PIXI.GD8Symmetry} Result\n     */\n    sub: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][groupD8.inv(rotationFirst)]\n    ),\n\n    /**\n     * Adds 180 degrees to rotation, which is a commutative\n     * operation.\n     * @param {number} rotation - The number to rotate.\n     * @returns {number} Rotated number\n     */\n    rotate180: (rotation: number): number => rotation ^ 4,\n\n    /**\n     * Checks if the rotation angle is vertical, i.e. south\n     * or north. It doesn't work for reflections.\n     * @param {PIXI.GD8Symmetry} rotation - The number to check.\n     * @returns {boolean} Whether or not the direction is vertical\n     */\n    isVertical: (rotation: GD8Symmetry): boolean => (rotation & 3) === 2, // rotation % 4 === 2\n\n    /**\n     * Approximates the vector `V(dx,dy)` into one of the\n     * eight directions provided by `groupD8`.\n     * @param {number} dx - X-component of the vector\n     * @param {number} dy - Y-component of the vector\n     * @returns {PIXI.GD8Symmetry} Approximation of the vector into\n     *  one of the eight symmetries.\n     */\n    byDirection: (dx: number, dy: number): GD8Symmetry =>\n    {\n        if (Math.abs(dx) * 2 <= Math.abs(dy))\n        {\n            if (dy >= 0)\n            {\n                return groupD8.S;\n            }\n\n            return groupD8.N;\n        }\n        else if (Math.abs(dy) * 2 <= Math.abs(dx))\n        {\n            if (dx > 0)\n            {\n                return groupD8.E;\n            }\n\n            return groupD8.W;\n        }\n        else if (dy > 0)\n        {\n            if (dx > 0)\n            {\n                return groupD8.SE;\n            }\n\n            return groupD8.SW;\n        }\n        else if (dx > 0)\n        {\n            return groupD8.NE;\n        }\n\n        return groupD8.NW;\n    },\n\n    /**\n     * Helps sprite to compensate texture packer rotation.\n     * @param {PIXI.Matrix} matrix - sprite world matrix\n     * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.\n     * @param {number} tx - sprite anchoring\n     * @param {number} ty - sprite anchoring\n     */\n    matrixAppendRotationInv: (matrix: Matrix, rotation: GD8Symmetry, tx = 0, ty = 0): void =>\n    {\n        // Packer used \"rotation\", we use \"inv(rotation)\"\n        const mat: Matrix = rotationMatrices[groupD8.inv(rotation)];\n\n        mat.tx = tx;\n        mat.ty = ty;\n        matrix.append(mat);\n    },\n};\n"],"mappings":";AAaA,MAAMA,EAAA,GAAK,CAAC,GAAG,CAAG,KAAG,IAAI,CAAI,OAAI,CAAG,KAAG,GAAG,CAAG,KAAG,IAAI,CAAI,OAAI,GAAG,CAAC;AAChE,MAAMC,EAAA,GAAK,CAAC,GAAG,CAAG,KAAG,GAAG,CAAG,MAAI,CAAI,OAAI,GAAG,CAAG,KAAG,GAAG,CAAG,MAAI,IAAI,CAAE;AAChE,MAAMC,EAAA,GAAK,CAAC,GAAG,CAAI,OAAI,IAAI,CAAG,KAAG,CAAG,KAAG,GAAG,CAAG,KAAG,GAAG,CAAG,MAAI,IAAI,CAAE;AAChE,MAAMC,EAAA,GAAK,CAAC,GAAG,CAAG,KAAG,IAAI,CAAI,OAAI,CAAG,KAAG,IAAI,CAAI,MAAG,GAAG,CAAG,KAAG,GAAG,CAAE;AAQhE,MAAMC,cAAA,GAA6B,EAAC;AAOpC,MAAMC,gBAAA,GAA6B,EAAC;AAKpC,MAAMC,MAAA,GAASC,IAAK,CAAAC,IAAA;AAMpB,SACAC,KAAA;EACI,SAASC,CAAI,MAAGA,CAAI,OAAIA,CACxB;IACI,MAAMC,GAAA,GAAgB,EAAC;IAEvBP,cAAA,CAAeQ,IAAA,CAAKD,GAAG;IAEvB,SAASE,CAAI,MAAGA,CAAI,OAAIA,CACxB;MAEU,MAAAC,GAAA,GAAMR,MAAA,CAAQN,EAAG,CAAAU,CAAA,IAAKV,EAAA,CAAGa,CAAO,IAAAX,EAAA,CAAGQ,CAAK,IAAAT,EAAA,CAAGY,CAAG;MAC9C,MAAAE,GAAA,GAAMT,MAAA,CAAQL,EAAG,CAAAS,CAAA,IAAKV,EAAA,CAAGa,CAAO,IAAAV,EAAA,CAAGO,CAAK,IAAAT,EAAA,CAAGY,CAAG;MAC9C,MAAAG,GAAA,GAAMV,MAAA,CAAQN,EAAG,CAAAU,CAAA,IAAKR,EAAA,CAAGW,CAAO,IAAAX,EAAA,CAAGQ,CAAK,IAAAP,EAAA,CAAGU,CAAG;MAC9C,MAAAI,GAAA,GAAMX,MAAA,CAAQL,EAAG,CAAAS,CAAA,IAAKR,EAAA,CAAGW,CAAO,IAAAV,EAAA,CAAGO,CAAK,IAAAP,EAAA,CAAGU,CAAG;MAGpD,SAASK,CAAI,MAAGA,CAAI,OAAIA,CACxB;QACQ,IAAAlB,EAAA,CAAGkB,CAAO,MAAAJ,GAAA,IAAOb,EAAG,CAAAiB,CAAA,MAAOH,GACtB,IAAAb,EAAA,CAAGgB,CAAO,MAAAF,GAAA,IAAOb,EAAG,CAAAe,CAAA,MAAOD,GACpC;UACIN,GAAA,CAAIC,IAAA,CAAKM,CAAC;UACV;QAAA;MACJ;IACJ;EACJ;EAGJ,SAASR,CAAI,MAAGA,CAAI,OAAIA,CACxB;IACU,MAAAS,GAAA,GAAM,IAAIC,MAAO;IAEnBD,GAAA,CAAAE,GAAA,CAAIrB,EAAG,CAAAU,CAAA,GAAIT,EAAG,CAAAS,CAAA,GAAIR,EAAA,CAAGQ,CAAI,GAAAP,EAAA,CAAGO,CAAI,MAAG,CAAC;IACxCL,gBAAA,CAAiBO,IAAA,CAAKO,GAAG;EAAA;AAEjC;AAEAV,IAAK;AAiCE,MAAMa,OAAU;EAOnBC,CAAG;EAQHC,EAAI;EAQJC,CAAG;EAQHC,EAAI;EAQJC,CAAG;EAQHC,EAAI;EAQJC,CAAG;EAQHC,EAAI;EAMJC,eAAiB;EAMjBC,aAAe;EAMfC,iBAAmB;EAMnBC,gBAAkB;EAOlBC,EAAA,EAAKC,GAAA,IAAkCpC,EAAG,CAAAoC,GAAA;EAO1CC,EAAA,EAAKD,GAAA,IAAkCnC,EAAG,CAAAmC,GAAA;EAO1CE,EAAA,EAAKF,GAAA,IAAkClC,EAAG,CAAAkC,GAAA;EAO1CG,EAAA,EAAKH,GAAA,IAAkCjC,EAAG,CAAAiC,GAAA;EAQ1CI,GAAA,EAAMC,QACN;IACI,IAAIA,QAAA,GAAW,CACf;MACI,OAAOA,QAAW;IAAA;IAGtB,OAAQ,CAACA,QAAY;EAAA,CACzB;EAyBAC,GAAK,EAAAA,CAACC,cAA6B,EAAAC,aAAA,KAC/BxC,cAAA,CAAeuC,cAAgB,EAAAC,aAAA;EASnCC,GAAA,EAAKA,CAACF,cAA6B,EAAAC,aAAA,KAC/BxC,cAAA,CAAeuC,cAAgB,EAAArB,OAAA,CAAQkB,GAAA,CAAII,aAAa;EAS5DE,SAAA,EAAYL,QAAA,IAA6BA,QAAW;EAQpDM,UAAY,EAACN,QAAoC,KAAAA,QAAA,GAAW,CAAO;EAUnEO,WAAA,EAAaA,CAACC,EAAA,EAAYC,EAC1B;IACQ,IAAA3C,IAAA,CAAK4C,GAAA,CAAIF,EAAE,IAAI,KAAK1C,IAAK,CAAA4C,GAAA,CAAID,EAAE,CACnC;MACI,IAAIA,EAAA,IAAM,CACV;QACI,OAAO5B,OAAQ,CAAAG,CAAA;MAAA;MAGnB,OAAOH,OAAQ,CAAAO,CAAA;IAAA,CACnB,UACStB,IAAA,CAAK4C,GAAI,CAAAD,EAAE,IAAI,CAAK,IAAA3C,IAAA,CAAK4C,GAAI,CAAAF,EAAE,CACxC;MACI,IAAIA,EAAA,GAAK,CACT;QACI,OAAO3B,OAAQ,CAAAC,CAAA;MAAA;MAGnB,OAAOD,OAAQ,CAAAK,CAAA;IAAA,CACnB,UACSuB,EAAA,GAAK,CACd;MACI,IAAID,EAAA,GAAK,CACT;QACI,OAAO3B,OAAQ,CAAAE,EAAA;MAAA;MAGnB,OAAOF,OAAQ,CAAAI,EAAA;IAAA,CACnB,UACSuB,EAAA,GAAK,CACd;MACI,OAAO3B,OAAQ,CAAAQ,EAAA;IAAA;IAGnB,OAAOR,OAAQ,CAAAM,EAAA;EAAA,CACnB;EASAwB,uBAAA,EAAyB,SAAAA,CAACC,MAAA,EAAgBZ,QAAA,EAC1C;IAAA,IADiEa,EAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;IAAA,IAAGG,EAAA,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAK,CAC9E;IAEI,MAAMpC,GAAc,GAAAd,gBAAA,CAAiBiB,OAAQ,CAAAkB,GAAA,CAAIC,QAAQ;IAEzDtB,GAAA,CAAImC,EAAK,GAAAA,EAAA;IACTnC,GAAA,CAAIuC,EAAK,GAAAA,EAAA;IACTL,MAAA,CAAOM,MAAA,CAAOxC,GAAG;EAAA;AAEzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}