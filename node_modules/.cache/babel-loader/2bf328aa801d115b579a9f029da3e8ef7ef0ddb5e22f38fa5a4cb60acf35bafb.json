{"ast":null,"code":"import { Color } from '@pixi/color';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nimport { Rectangle } from '@pixi/math';\nconst tempRect = new Rectangle();\nconst tempRect2 = new Rectangle();\nclass RenderTextureSystem {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.defaultMaskStack = [];\n    this.current = null;\n    this.sourceFrame = new Rectangle();\n    this.destinationFrame = new Rectangle();\n    this.viewportFrame = new Rectangle();\n  }\n  contextChange() {\n    const attributes = this.renderer?.gl.getContextAttributes();\n    this._rendererPremultipliedAlpha = !!(attributes && attributes.alpha && attributes.premultipliedAlpha);\n  }\n  bind() {\n    let renderTexture = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let sourceFrame = arguments.length > 1 ? arguments[1] : undefined;\n    let destinationFrame = arguments.length > 2 ? arguments[2] : undefined;\n    const renderer = this.renderer;\n    this.current = renderTexture;\n    let baseTexture;\n    let framebuffer;\n    let resolution;\n    if (renderTexture) {\n      baseTexture = renderTexture.baseTexture;\n      resolution = baseTexture.resolution;\n      if (!sourceFrame) {\n        tempRect.width = renderTexture.frame.width;\n        tempRect.height = renderTexture.frame.height;\n        sourceFrame = tempRect;\n      }\n      if (!destinationFrame) {\n        tempRect2.x = renderTexture.frame.x;\n        tempRect2.y = renderTexture.frame.y;\n        tempRect2.width = sourceFrame.width;\n        tempRect2.height = sourceFrame.height;\n        destinationFrame = tempRect2;\n      }\n      framebuffer = baseTexture.framebuffer;\n    } else {\n      resolution = renderer.resolution;\n      if (!sourceFrame) {\n        tempRect.width = renderer._view.screen.width;\n        tempRect.height = renderer._view.screen.height;\n        sourceFrame = tempRect;\n      }\n      if (!destinationFrame) {\n        destinationFrame = tempRect;\n        destinationFrame.width = sourceFrame.width;\n        destinationFrame.height = sourceFrame.height;\n      }\n    }\n    const viewportFrame = this.viewportFrame;\n    viewportFrame.x = destinationFrame.x * resolution;\n    viewportFrame.y = destinationFrame.y * resolution;\n    viewportFrame.width = destinationFrame.width * resolution;\n    viewportFrame.height = destinationFrame.height * resolution;\n    if (!renderTexture) {\n      viewportFrame.y = renderer.view.height - (viewportFrame.y + viewportFrame.height);\n    }\n    viewportFrame.ceil();\n    this.renderer.framebuffer.bind(framebuffer, viewportFrame);\n    this.renderer.projection.update(destinationFrame, sourceFrame, resolution, !framebuffer);\n    if (renderTexture) {\n      this.renderer.mask.setMaskStack(baseTexture.maskStack);\n    } else {\n      this.renderer.mask.setMaskStack(this.defaultMaskStack);\n    }\n    this.sourceFrame.copyFrom(sourceFrame);\n    this.destinationFrame.copyFrom(destinationFrame);\n  }\n  clear(clearColor, mask) {\n    const fallbackColor = this.current ? this.current.baseTexture.clear : this.renderer.background.backgroundColor;\n    const color = Color.shared.setValue(clearColor ? clearColor : fallbackColor);\n    if (this.current && this.current.baseTexture.alphaMode > 0 || !this.current && this._rendererPremultipliedAlpha) {\n      color.premultiply(color.alpha);\n    }\n    const destinationFrame = this.destinationFrame;\n    const baseFrame = this.current ? this.current.baseTexture : this.renderer._view.screen;\n    const clearMask = destinationFrame.width !== baseFrame.width || destinationFrame.height !== baseFrame.height;\n    if (clearMask) {\n      let {\n        x,\n        y,\n        width,\n        height\n      } = this.viewportFrame;\n      x = Math.round(x);\n      y = Math.round(y);\n      width = Math.round(width);\n      height = Math.round(height);\n      this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);\n      this.renderer.gl.scissor(x, y, width, height);\n    }\n    this.renderer.framebuffer.clear(color.red, color.green, color.blue, color.alpha, mask);\n    if (clearMask) {\n      this.renderer.scissor.pop();\n    }\n  }\n  resize() {\n    this.bind(null);\n  }\n  reset() {\n    this.bind(null);\n  }\n  destroy() {\n    this.renderer = null;\n  }\n}\nRenderTextureSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"renderTexture\"\n};\nextensions.add(RenderTextureSystem);\nexport { RenderTextureSystem };","map":{"version":3,"names":["tempRect","Rectangle","tempRect2","RenderTextureSystem","constructor","renderer","defaultMaskStack","current","sourceFrame","destinationFrame","viewportFrame","contextChange","attributes","gl","getContextAttributes","_rendererPremultipliedAlpha","alpha","premultipliedAlpha","bind","renderTexture","arguments","length","undefined","baseTexture","framebuffer","resolution","width","frame","height","x","y","_view","screen","view","ceil","projection","update","mask","setMaskStack","maskStack","copyFrom","clear","clearColor","fallbackColor","background","backgroundColor","color","Color","shared","setValue","alphaMode","premultiply","baseFrame","clearMask","Math","round","enable","SCISSOR_TEST","scissor","red","green","blue","pop","resize","reset","destroy","extension","type","ExtensionType","RendererSystem","name","extensions","add"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\renderTexture\\RenderTextureSystem.ts"],"sourcesContent":["import { Color } from '@pixi/color';\nimport { extensions, ExtensionType } from '@pixi/extensions';\nimport { Rectangle } from '@pixi/math';\n\nimport type { ColorSource } from '@pixi/color';\nimport type { BUFFER_BITS } from '@pixi/constants';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { ISize } from '@pixi/math';\nimport type { MaskData } from '../mask/MaskData';\nimport type { Renderer } from '../Renderer';\nimport type { ISystem } from '../system/ISystem';\nimport type { BaseRenderTexture } from './BaseRenderTexture';\nimport type { RenderTexture } from './RenderTexture';\n\n// Temporary rectangle for assigned sourceFrame or destinationFrame\nconst tempRect = new Rectangle();\n\n// Temporary rectangle for renderTexture destinationFrame\nconst tempRect2 = new Rectangle();\n\n/* eslint-disable max-len */\n/**\n * System plugin to the renderer to manage render textures.\n *\n * Should be added after FramebufferSystem\n *\n * ### Frames\n *\n * The `RenderTextureSystem` holds a sourceFrame â†’ destinationFrame projection. The following table explains the different\n * coordinate spaces used:\n *\n * | Frame                  | Description                                                      | Coordinate System                                       |\n * | ---------------------- | ---------------------------------------------------------------- | ------------------------------------------------------- |\n * | sourceFrame            | The rectangle inside of which display-objects are being rendered | **World Space**: The origin on the top-left             |\n * | destinationFrame       | The rectangle in the render-target (canvas or texture) into which contents should be rendered | If rendering to the canvas, this is in screen space and the origin is on the top-left. If rendering to a render-texture, this is in its base-texture's space with the origin on the bottom-left.  |\n * | viewportFrame          | The framebuffer viewport corresponding to the destination-frame  | **Window Coordinates**: The origin is always on the bottom-left. |\n * @memberof PIXI\n */\nexport class RenderTextureSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'renderTexture',\n    };\n\n    /* eslint-enable max-len */\n\n    /**\n     * List of masks for the {@link PIXI.StencilSystem}.\n     * @readonly\n     */\n    public defaultMaskStack: Array<MaskData>;\n\n    /**\n     * Render texture currently bound. {@code null} if rendering to the canvas.\n     * @readonly\n     */\n    public current: RenderTexture | null;\n\n    /**\n     * The source frame for the render-target's projection mapping.\n     *\n     * See {@link PIXI.ProjectionSystem#sourceFrame} for more details\n     */\n    public readonly sourceFrame: Rectangle;\n\n    /**\n     * The destination frame for the render-target's projection mapping.\n     *\n     * See {@link PIXI.ProjectionSystem#destinationFrame} for more details.\n     */\n    public readonly destinationFrame: Rectangle;\n\n    /**\n     * The viewport frame for the render-target's viewport binding. This is equal to the destination-frame\n     * for render-textures, while it is y-flipped when rendering to the screen (i.e. its origin is always on\n     * the bottom-left).\n     */\n    public readonly viewportFrame: Rectangle;\n\n    private renderer: Renderer;\n\n    /** Does the renderer have alpha and are its color channels stored premultipled by the alpha channel? */\n    private _rendererPremultipliedAlpha: boolean;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.defaultMaskStack = [];\n        this.current = null;\n        this.sourceFrame = new Rectangle();\n        this.destinationFrame = new Rectangle();\n        this.viewportFrame = new Rectangle();\n    }\n\n    protected contextChange(): void\n    {\n        const attributes = this.renderer?.gl.getContextAttributes();\n\n        this._rendererPremultipliedAlpha = !!(attributes && attributes.alpha && attributes.premultipliedAlpha);\n    }\n\n    /**\n     * Bind the current render texture.\n     * @param renderTexture - RenderTexture to bind, by default its `null` - the screen.\n     * @param sourceFrame - Part of world that is mapped to the renderTexture.\n     * @param destinationFrame - Part of renderTexture, by default it has the same size as sourceFrame.\n     */\n    bind(renderTexture: RenderTexture = null, sourceFrame?: Rectangle, destinationFrame?: Rectangle): void\n    {\n        const renderer = this.renderer;\n\n        this.current = renderTexture;\n\n        let baseTexture: BaseRenderTexture;\n        let framebuffer;\n        let resolution;\n\n        if (renderTexture)\n        {\n            baseTexture = renderTexture.baseTexture as BaseRenderTexture;\n\n            resolution = baseTexture.resolution;\n\n            if (!sourceFrame)\n            {\n                tempRect.width = renderTexture.frame.width;\n                tempRect.height = renderTexture.frame.height;\n\n                sourceFrame = tempRect;\n            }\n\n            if (!destinationFrame)\n            {\n                tempRect2.x = renderTexture.frame.x;\n                tempRect2.y = renderTexture.frame.y;\n                tempRect2.width = sourceFrame.width;\n                tempRect2.height = sourceFrame.height;\n\n                destinationFrame = tempRect2;\n            }\n\n            framebuffer = baseTexture.framebuffer;\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            if (!sourceFrame)\n            {\n                tempRect.width = renderer._view.screen.width;\n                tempRect.height = renderer._view.screen.height;\n\n                sourceFrame = tempRect;\n            }\n\n            if (!destinationFrame)\n            {\n                destinationFrame = tempRect;\n\n                destinationFrame.width = sourceFrame.width;\n                destinationFrame.height = sourceFrame.height;\n            }\n        }\n\n        const viewportFrame = this.viewportFrame;\n\n        viewportFrame.x = destinationFrame.x * resolution;\n        viewportFrame.y = destinationFrame.y * resolution;\n        viewportFrame.width = destinationFrame.width * resolution;\n        viewportFrame.height = destinationFrame.height * resolution;\n\n        if (!renderTexture)\n        {\n            viewportFrame.y = renderer.view.height - (viewportFrame.y + viewportFrame.height);\n        }\n\n        viewportFrame.ceil();\n\n        this.renderer.framebuffer.bind(framebuffer, viewportFrame);\n        this.renderer.projection.update(destinationFrame, sourceFrame, resolution, !framebuffer);\n\n        if (renderTexture)\n        {\n            this.renderer.mask.setMaskStack(baseTexture.maskStack);\n        }\n        else\n        {\n            this.renderer.mask.setMaskStack(this.defaultMaskStack);\n        }\n\n        this.sourceFrame.copyFrom(sourceFrame);\n        this.destinationFrame.copyFrom(destinationFrame);\n    }\n\n    /**\n     * Erases the render texture and fills the drawing area with a colour.\n     * @param clearColor - The color as rgba, default to use the renderer backgroundColor\n     * @param [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n     *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n     */\n    clear(clearColor?: ColorSource, mask?: BUFFER_BITS): void\n    {\n        const fallbackColor = this.current\n            ? this.current.baseTexture.clear\n            : this.renderer.background.backgroundColor;\n        const color = Color.shared.setValue(clearColor ? clearColor : fallbackColor);\n\n        if ((this.current && this.current.baseTexture.alphaMode > 0)\n            || (!this.current && this._rendererPremultipliedAlpha))\n        {\n            color.premultiply(color.alpha);\n        }\n\n        const destinationFrame = this.destinationFrame;\n        const baseFrame: ISize = this.current ? this.current.baseTexture : this.renderer._view.screen;\n        const clearMask = destinationFrame.width !== baseFrame.width || destinationFrame.height !== baseFrame.height;\n\n        if (clearMask)\n        {\n            let { x, y, width, height } = this.viewportFrame;\n\n            x = Math.round(x);\n            y = Math.round(y);\n            width = Math.round(width);\n            height = Math.round(height);\n\n            // TODO: ScissorSystem should cache whether the scissor test is enabled or not.\n            this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);\n            this.renderer.gl.scissor(x, y, width, height);\n        }\n\n        this.renderer.framebuffer.clear(color.red, color.green, color.blue, color.alpha, mask);\n\n        if (clearMask)\n        {\n            // Restore the scissor box\n            this.renderer.scissor.pop();\n        }\n    }\n\n    resize(): void // screenWidth, screenHeight)\n    {\n        // resize the root only!\n        this.bind(null);\n    }\n\n    /** Resets render-texture state. */\n    reset(): void\n    {\n        this.bind(null);\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n\nextensions.add(RenderTextureSystem);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}