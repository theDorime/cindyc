{"ast":null,"code":"import { ExtensionType, extensions } from '@pixi/extensions';\nclass StartupSystem {\n  constructor(renderer) {\n    this.renderer = renderer;\n  }\n  run(options) {\n    const {\n      renderer\n    } = this;\n    renderer.runners.init.emit(renderer.options);\n    if (options.hello) {\n      console.log(`PixiJS ${\"7.2.4\"} - ${renderer.rendererLogId} - https://pixijs.com`);\n    }\n    renderer.resize(renderer.screen.width, renderer.screen.height);\n  }\n  destroy() {}\n}\nStartupSystem.defaultOptions = {\n  hello: false\n};\nStartupSystem.extension = {\n  type: [ExtensionType.RendererSystem, ExtensionType.CanvasRendererSystem],\n  name: \"startup\"\n};\nextensions.add(StartupSystem);\nexport { StartupSystem };","map":{"version":3,"names":["StartupSystem","constructor","renderer","run","options","runners","init","emit","hello","console","log","rendererLogId","resize","screen","width","height","destroy","defaultOptions","extension","type","ExtensionType","RendererSystem","CanvasRendererSystem","name","extensions","add"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\startup\\StartupSystem.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { IRenderer } from '../IRenderer';\nimport type { ISystem } from '../system/ISystem';\n\n/**\n * Options for the startup system.\n * @memberof PIXI\n */\nexport interface StartupSystemOptions\n{\n    /**\n     * Whether to log the version and type information of renderer to console.\n     * @memberof PIXI.IRendererOptions\n     */\n    hello: boolean;\n}\n\n/**\n * A simple system responsible for initiating the renderer.\n * @memberof PIXI\n */\nexport class StartupSystem implements ISystem<StartupSystemOptions>\n{\n    /** @ignore */\n    static defaultOptions: StartupSystemOptions = {\n        /**\n         * {@link PIXI.IRendererOptions.hello}\n         * @default false\n         * @memberof PIXI.settings.RENDER_OPTIONS\n         */\n        hello: false,\n    };\n\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n        name: 'startup',\n    };\n\n    readonly renderer: IRenderer;\n\n    constructor(renderer: IRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * It all starts here! This initiates every system, passing in the options for any system by name.\n     * @param options - the config for the renderer and all its systems\n     */\n    run(options: StartupSystemOptions): void\n    {\n        const { renderer } = this;\n\n        renderer.runners.init.emit(renderer.options);\n\n        if (options.hello)\n        {\n            // eslint-disable-next-line no-console\n            console.log(`PixiJS ${'$_VERSION'} - ${renderer.rendererLogId} - https://pixijs.com`);\n        }\n\n        renderer.resize(renderer.screen.width, renderer.screen.height);\n    }\n\n    destroy(): void\n    {\n        // ka pow!\n    }\n}\n\nextensions.add(StartupSystem);\n"],"mappings":";AAuBO,MAAMA,aACb;EAsBIC,YAAYC,QACZ;IACI,KAAKA,QAAW,GAAAA,QAAA;EAAA;EAOpBC,IAAIC,OACJ;IACI,MAAM;MAAEF;IAAa;IAErBA,QAAA,CAASG,OAAQ,CAAAC,IAAA,CAAKC,IAAK,CAAAL,QAAA,CAASE,OAAO;IAE3C,IAAIA,OAAA,CAAQI,KACZ;MAEIC,OAAA,CAAQC,GAAI,WAAU,OAAiB,MAAAR,QAAA,CAASS,aAAoC;IAAA;IAGxFT,QAAA,CAASU,MAAA,CAAOV,QAAS,CAAAW,MAAA,CAAOC,KAAO,EAAAZ,QAAA,CAASW,MAAA,CAAOE,MAAM;EAAA;EAGjEC,OACAA,CAAA;AAGJ;AAnDahB,aAAA,CAGFiB,cAAuC;EAM1CT,KAAO;AACX;AAVSR,aAAA,CAaFkB,SAA+B;EAClCC,IAAM,GACFC,aAAc,CAAAC,cAAA,EACdD,aAAc,CAAAE,oBAAA,CAClB;EACAC,IAAM;AACV;AAkCJC,UAAA,CAAWC,GAAA,CAAIzB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}