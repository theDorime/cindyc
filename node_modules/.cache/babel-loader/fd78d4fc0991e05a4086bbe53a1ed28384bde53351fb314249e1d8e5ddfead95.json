{"ast":null,"code":"import { ExtensionType, Texture, extensions } from '@pixi/core';\nconst cacheTextureArray = {\n  extension: ExtensionType.CacheParser,\n  test: asset => Array.isArray(asset) && asset.every(t => t instanceof Texture),\n  getCacheableAssets: (keys, asset) => {\n    const out = {};\n    keys.forEach(key => {\n      asset.forEach((item, i) => {\n        out[key + (i === 0 ? \"\" : i + 1)] = item;\n      });\n    });\n    return out;\n  }\n};\nextensions.add(cacheTextureArray);\nexport { cacheTextureArray };","map":{"version":3,"names":["cacheTextureArray","extension","ExtensionType","CacheParser","test","asset","Array","isArray","every","t","Texture","getCacheableAssets","keys","out","forEach","key","item","i","extensions","add"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\assets\\src\\cache\\parsers\\cacheTextureArray.ts"],"sourcesContent":["import { extensions, ExtensionType, Texture } from '@pixi/core';\n\nimport type { CacheParser } from '../CacheParser';\n\nexport const cacheTextureArray: CacheParser<Texture[]> = {\n    extension: ExtensionType.CacheParser,\n\n    test: (asset: any[]) => Array.isArray(asset) && asset.every((t) => t instanceof Texture),\n\n    getCacheableAssets: (keys: string[], asset: Texture[]) =>\n    {\n        const out: Record<string, Texture> = {};\n\n        keys.forEach((key: string) =>\n        {\n            asset.forEach((item: Texture, i: number) =>\n            {\n                out[key + (i === 0 ? '' : i + 1)] = item;\n            });\n        });\n\n        return out;\n    }\n};\n\nextensions.add(cacheTextureArray);\n"],"mappings":";AAIO,MAAMA,iBAA4C;EACrDC,SAAA,EAAWC,aAAc,CAAAC,WAAA;EAEzBC,IAAM,EAACC,KAAiB,IAAAC,KAAA,CAAMC,OAAQ,CAAAF,KAAK,CAAK,IAAAA,KAAA,CAAMG,KAAM,CAACC,CAAM,IAAAA,CAAA,YAAaC,OAAO;EAEvFC,kBAAA,EAAoBA,CAACC,IAAA,EAAgBP,KACrC;IACI,MAAMQ,GAAA,GAA+B,EAAC;IAEjCD,IAAA,CAAAE,OAAA,CAASC,GACd;MACUV,KAAA,CAAAS,OAAA,CAAQ,CAACE,IAAA,EAAeC,CAC9B;QACIJ,GAAA,CAAIE,GAAO,IAAAE,CAAA,KAAM,CAAI,QAAKA,CAAA,GAAI,CAAM,KAAAD,IAAA;MAAA,CACvC;IAAA,CACJ;IAEM,OAAAH,GAAA;EAAA;AAEf;AAEAK,UAAA,CAAWC,GAAA,CAAInB,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}