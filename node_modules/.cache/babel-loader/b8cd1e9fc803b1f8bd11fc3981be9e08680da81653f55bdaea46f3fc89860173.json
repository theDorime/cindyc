{"ast":null,"code":"import { Texture, Ticker, UPDATE_PRIORITY } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nclass AnimatedSprite extends Sprite {\n  constructor(textures) {\n    let autoUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    super(textures[0] instanceof Texture ? textures[0] : textures[0].texture);\n    this._textures = null;\n    this._durations = null;\n    this._autoUpdate = autoUpdate;\n    this._isConnectedToTicker = false;\n    this.animationSpeed = 1;\n    this.loop = true;\n    this.updateAnchor = false;\n    this.onComplete = null;\n    this.onFrameChange = null;\n    this.onLoop = null;\n    this._currentTime = 0;\n    this._playing = false;\n    this._previousFrame = null;\n    this.textures = textures;\n  }\n  stop() {\n    if (!this._playing) {\n      return;\n    }\n    this._playing = false;\n    if (this._autoUpdate && this._isConnectedToTicker) {\n      Ticker.shared.remove(this.update, this);\n      this._isConnectedToTicker = false;\n    }\n  }\n  play() {\n    if (this._playing) {\n      return;\n    }\n    this._playing = true;\n    if (this._autoUpdate && !this._isConnectedToTicker) {\n      Ticker.shared.add(this.update, this, UPDATE_PRIORITY.HIGH);\n      this._isConnectedToTicker = true;\n    }\n  }\n  gotoAndStop(frameNumber) {\n    this.stop();\n    this.currentFrame = frameNumber;\n  }\n  gotoAndPlay(frameNumber) {\n    this.currentFrame = frameNumber;\n    this.play();\n  }\n  update(deltaTime) {\n    if (!this._playing) {\n      return;\n    }\n    const elapsed = this.animationSpeed * deltaTime;\n    const previousFrame = this.currentFrame;\n    if (this._durations !== null) {\n      let lag = this._currentTime % 1 * this._durations[this.currentFrame];\n      lag += elapsed / 60 * 1e3;\n      while (lag < 0) {\n        this._currentTime--;\n        lag += this._durations[this.currentFrame];\n      }\n      const sign = Math.sign(this.animationSpeed * deltaTime);\n      this._currentTime = Math.floor(this._currentTime);\n      while (lag >= this._durations[this.currentFrame]) {\n        lag -= this._durations[this.currentFrame] * sign;\n        this._currentTime += sign;\n      }\n      this._currentTime += lag / this._durations[this.currentFrame];\n    } else {\n      this._currentTime += elapsed;\n    }\n    if (this._currentTime < 0 && !this.loop) {\n      this.gotoAndStop(0);\n      if (this.onComplete) {\n        this.onComplete();\n      }\n    } else if (this._currentTime >= this._textures.length && !this.loop) {\n      this.gotoAndStop(this._textures.length - 1);\n      if (this.onComplete) {\n        this.onComplete();\n      }\n    } else if (previousFrame !== this.currentFrame) {\n      if (this.loop && this.onLoop) {\n        if (this.animationSpeed > 0 && this.currentFrame < previousFrame || this.animationSpeed < 0 && this.currentFrame > previousFrame) {\n          this.onLoop();\n        }\n      }\n      this.updateTexture();\n    }\n  }\n  updateTexture() {\n    const currentFrame = this.currentFrame;\n    if (this._previousFrame === currentFrame) {\n      return;\n    }\n    this._previousFrame = currentFrame;\n    this._texture = this._textures[currentFrame];\n    this._textureID = -1;\n    this._textureTrimmedID = -1;\n    this._cachedTint = 16777215;\n    this.uvs = this._texture._uvs.uvsFloat32;\n    if (this.updateAnchor) {\n      this._anchor.copyFrom(this._texture.defaultAnchor);\n    }\n    if (this.onFrameChange) {\n      this.onFrameChange(this.currentFrame);\n    }\n  }\n  destroy(options) {\n    this.stop();\n    super.destroy(options);\n    this.onComplete = null;\n    this.onFrameChange = null;\n    this.onLoop = null;\n  }\n  static fromFrames(frames) {\n    const textures = [];\n    for (let i = 0; i < frames.length; ++i) {\n      textures.push(Texture.from(frames[i]));\n    }\n    return new AnimatedSprite(textures);\n  }\n  static fromImages(images) {\n    const textures = [];\n    for (let i = 0; i < images.length; ++i) {\n      textures.push(Texture.from(images[i]));\n    }\n    return new AnimatedSprite(textures);\n  }\n  get totalFrames() {\n    return this._textures.length;\n  }\n  get textures() {\n    return this._textures;\n  }\n  set textures(value) {\n    if (value[0] instanceof Texture) {\n      this._textures = value;\n      this._durations = null;\n    } else {\n      this._textures = [];\n      this._durations = [];\n      for (let i = 0; i < value.length; i++) {\n        this._textures.push(value[i].texture);\n        this._durations.push(value[i].time);\n      }\n    }\n    this._previousFrame = null;\n    this.gotoAndStop(0);\n    this.updateTexture();\n  }\n  get currentFrame() {\n    let currentFrame = Math.floor(this._currentTime) % this._textures.length;\n    if (currentFrame < 0) {\n      currentFrame += this._textures.length;\n    }\n    return currentFrame;\n  }\n  set currentFrame(value) {\n    if (value < 0 || value > this.totalFrames - 1) {\n      throw new Error(`[AnimatedSprite]: Invalid frame index value ${value}, expected to be between 0 and totalFrames ${this.totalFrames}.`);\n    }\n    const previousFrame = this.currentFrame;\n    this._currentTime = value;\n    if (previousFrame !== this.currentFrame) {\n      this.updateTexture();\n    }\n  }\n  get playing() {\n    return this._playing;\n  }\n  get autoUpdate() {\n    return this._autoUpdate;\n  }\n  set autoUpdate(value) {\n    if (value !== this._autoUpdate) {\n      this._autoUpdate = value;\n      if (!this._autoUpdate && this._isConnectedToTicker) {\n        Ticker.shared.remove(this.update, this);\n        this._isConnectedToTicker = false;\n      } else if (this._autoUpdate && !this._isConnectedToTicker && this._playing) {\n        Ticker.shared.add(this.update, this);\n        this._isConnectedToTicker = true;\n      }\n    }\n  }\n}\nexport { AnimatedSprite };","map":{"version":3,"names":["AnimatedSprite","Sprite","constructor","textures","autoUpdate","arguments","length","undefined","Texture","texture","_textures","_durations","_autoUpdate","_isConnectedToTicker","animationSpeed","loop","updateAnchor","onComplete","onFrameChange","onLoop","_currentTime","_playing","_previousFrame","stop","Ticker","shared","remove","update","play","add","UPDATE_PRIORITY","HIGH","gotoAndStop","frameNumber","currentFrame","gotoAndPlay","deltaTime","elapsed","previousFrame","lag","sign","Math","floor","updateTexture","_texture","_textureID","_textureTrimmedID","_cachedTint","uvs","_uvs","uvsFloat32","_anchor","copyFrom","defaultAnchor","destroy","options","fromFrames","frames","i","push","from","fromImages","images","totalFrames","value","time","Error","playing"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\sprite-animated\\src\\AnimatedSprite.ts"],"sourcesContent":["import { Texture, Ticker, UPDATE_PRIORITY } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\n\nimport type { IDestroyOptions } from '@pixi/display';\n\n/**\n * An AnimatedSprite is a simple way to display an animation depicted by a list of textures.\n *\n * ```js\n * import { AnimatedSprite, Texture } from 'pixi.js';\n *\n * const alienImages = [\n *     'image_sequence_01.png',\n *     'image_sequence_02.png',\n *     'image_sequence_03.png',\n *     'image_sequence_04.png',\n * ];\n * const textureArray = [];\n *\n * for (let i = 0; i < 4; i++)\n * {\n *     const texture = Texture.from(alienImages[i]);\n *     textureArray.push(texture);\n * }\n *\n * const animatedSprite = new AnimatedSprite(textureArray);\n * ```\n *\n * The more efficient and simpler way to create an animated sprite is using a {@link PIXI.Spritesheet}\n * containing the animation definitions:\n * @example\n * import { AnimatedSprite, Assets } from 'pixi.js';\n *\n * const sheet = await Assets.load('assets/spritesheet.json');\n * animatedSprite = new AnimatedSprite(sheet.animations['image_sequence']);\n * @memberof PIXI\n */\nexport class AnimatedSprite extends Sprite\n{\n    /**\n     * The speed that the AnimatedSprite will play at. Higher is faster, lower is slower.\n     * @default 1\n     */\n    public animationSpeed: number;\n\n    /**\n     * Whether or not the animate sprite repeats after playing.\n     * @default true\n     */\n    public loop: boolean;\n\n    /**\n     * Update anchor to [Texture's defaultAnchor]{@link PIXI.Texture#defaultAnchor} when frame changes.\n     *\n     * Useful with [sprite sheet animations]{@link PIXI.Spritesheet#animations} created with tools.\n     * Changing anchor for each frame allows to pin sprite origin to certain moving feature\n     * of the frame (e.g. left foot).\n     *\n     * Note: Enabling this will override any previously set `anchor` on each frame change.\n     * @default false\n     */\n    public updateAnchor: boolean;\n\n    /**\n     * User-assigned function to call when an AnimatedSprite finishes playing.\n     * @example\n     * animation.onComplete = () => {\n     *     // Finished!\n     * };\n     */\n    public onComplete?: () => void;\n\n    /**\n     * User-assigned function to call when an AnimatedSprite changes which texture is being rendered.\n     * @example\n     * animation.onFrameChange = () => {\n     *     // Updated!\n     * };\n     */\n    public onFrameChange?: (currentFrame: number) => void;\n\n    /**\n     * User-assigned function to call when `loop` is true, and an AnimatedSprite is played and\n     * loops around to start again.\n     * @example\n     * animation.onLoop = () => {\n     *     // Looped!\n     * };\n     */\n    public onLoop?: () => void;\n\n    private _playing: boolean;\n    private _textures: Texture[];\n    private _durations: number[];\n\n    /**\n     * `true` uses PIXI.Ticker.shared to auto update animation time.\n     * @default true\n     */\n    private _autoUpdate: boolean;\n\n    /**\n     * `true` if the instance is currently connected to PIXI.Ticker.shared to auto update animation time.\n     * @default false\n     */\n    private _isConnectedToTicker: boolean;\n\n    /** Elapsed time since animation has been started, used internally to display current texture. */\n    private _currentTime: number;\n\n    /** The texture index that was displayed last time. */\n    private _previousFrame: number;\n\n    /**\n     * @param textures - An array of {@link PIXI.Texture} or frame\n     *  objects that make up the animation.\n     * @param {boolean} [autoUpdate=true] - Whether to use Ticker.shared to auto update animation time.\n     */\n    constructor(textures: Texture[] | FrameObject[], autoUpdate = true)\n    {\n        super(textures[0] instanceof Texture ? textures[0] : textures[0].texture);\n\n        this._textures = null;\n        this._durations = null;\n        this._autoUpdate = autoUpdate;\n        this._isConnectedToTicker = false;\n\n        this.animationSpeed = 1;\n        this.loop = true;\n        this.updateAnchor = false;\n        this.onComplete = null;\n        this.onFrameChange = null;\n        this.onLoop = null;\n\n        this._currentTime = 0;\n\n        this._playing = false;\n        this._previousFrame = null;\n\n        this.textures = textures;\n    }\n\n    /** Stops the AnimatedSprite. */\n    public stop(): void\n    {\n        if (!this._playing)\n        {\n            return;\n        }\n\n        this._playing = false;\n        if (this._autoUpdate && this._isConnectedToTicker)\n        {\n            Ticker.shared.remove(this.update, this);\n            this._isConnectedToTicker = false;\n        }\n    }\n\n    /** Plays the AnimatedSprite. */\n    public play(): void\n    {\n        if (this._playing)\n        {\n            return;\n        }\n\n        this._playing = true;\n        if (this._autoUpdate && !this._isConnectedToTicker)\n        {\n            Ticker.shared.add(this.update, this, UPDATE_PRIORITY.HIGH);\n            this._isConnectedToTicker = true;\n        }\n    }\n\n    /**\n     * Stops the AnimatedSprite and goes to a specific frame.\n     * @param frameNumber - Frame index to stop at.\n     */\n    public gotoAndStop(frameNumber: number): void\n    {\n        this.stop();\n        this.currentFrame = frameNumber;\n    }\n\n    /**\n     * Goes to a specific frame and begins playing the AnimatedSprite.\n     * @param frameNumber - Frame index to start at.\n     */\n    public gotoAndPlay(frameNumber: number): void\n    {\n        this.currentFrame = frameNumber;\n        this.play();\n    }\n\n    /**\n     * Updates the object transform for rendering.\n     * @param deltaTime - Time since last tick.\n     */\n    update(deltaTime: number): void\n    {\n        if (!this._playing)\n        {\n            return;\n        }\n\n        const elapsed = this.animationSpeed * deltaTime;\n        const previousFrame = this.currentFrame;\n\n        if (this._durations !== null)\n        {\n            let lag = this._currentTime % 1 * this._durations[this.currentFrame];\n\n            lag += elapsed / 60 * 1000;\n\n            while (lag < 0)\n            {\n                this._currentTime--;\n                lag += this._durations[this.currentFrame];\n            }\n\n            const sign = Math.sign(this.animationSpeed * deltaTime);\n\n            this._currentTime = Math.floor(this._currentTime);\n\n            while (lag >= this._durations[this.currentFrame])\n            {\n                lag -= this._durations[this.currentFrame] * sign;\n                this._currentTime += sign;\n            }\n\n            this._currentTime += lag / this._durations[this.currentFrame];\n        }\n        else\n        {\n            this._currentTime += elapsed;\n        }\n\n        if (this._currentTime < 0 && !this.loop)\n        {\n            this.gotoAndStop(0);\n\n            if (this.onComplete)\n            {\n                this.onComplete();\n            }\n        }\n        else if (this._currentTime >= this._textures.length && !this.loop)\n        {\n            this.gotoAndStop(this._textures.length - 1);\n\n            if (this.onComplete)\n            {\n                this.onComplete();\n            }\n        }\n        else if (previousFrame !== this.currentFrame)\n        {\n            if (this.loop && this.onLoop)\n            {\n                if ((this.animationSpeed > 0 && this.currentFrame < previousFrame)\n                    || (this.animationSpeed < 0 && this.currentFrame > previousFrame))\n                {\n                    this.onLoop();\n                }\n            }\n\n            this.updateTexture();\n        }\n    }\n\n    /** Updates the displayed texture to match the current frame index. */\n    private updateTexture(): void\n    {\n        const currentFrame = this.currentFrame;\n\n        if (this._previousFrame === currentFrame)\n        {\n            return;\n        }\n\n        this._previousFrame = currentFrame;\n\n        this._texture = this._textures[currentFrame];\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this._cachedTint = 0xFFFFFF;\n        this.uvs = this._texture._uvs.uvsFloat32;\n\n        if (this.updateAnchor)\n        {\n            this._anchor.copyFrom(this._texture.defaultAnchor);\n        }\n\n        if (this.onFrameChange)\n        {\n            this.onFrameChange(this.currentFrame);\n        }\n    }\n\n    /**\n     * Stops the AnimatedSprite and destroys it.\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value.\n     * @param {boolean} [options.children=false] - If set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well.\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well.\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        this.stop();\n        super.destroy(options);\n\n        this.onComplete = null;\n        this.onFrameChange = null;\n        this.onLoop = null;\n    }\n\n    /**\n     * A short hand way of creating an AnimatedSprite from an array of frame ids.\n     * @param frames - The array of frames ids the AnimatedSprite will use as its texture frames.\n     * @returns - The new animated sprite with the specified frames.\n     */\n    public static fromFrames(frames: string[]): AnimatedSprite\n    {\n        const textures = [];\n\n        for (let i = 0; i < frames.length; ++i)\n        {\n            textures.push(Texture.from(frames[i]));\n        }\n\n        return new AnimatedSprite(textures);\n    }\n\n    /**\n     * A short hand way of creating an AnimatedSprite from an array of image ids.\n     * @param images - The array of image urls the AnimatedSprite will use as its texture frames.\n     * @returns The new animate sprite with the specified images as frames.\n     */\n    public static fromImages(images: string[]): AnimatedSprite\n    {\n        const textures = [];\n\n        for (let i = 0; i < images.length; ++i)\n        {\n            textures.push(Texture.from(images[i]));\n        }\n\n        return new AnimatedSprite(textures);\n    }\n\n    /**\n     * The total number of frames in the AnimatedSprite. This is the same as number of textures\n     * assigned to the AnimatedSprite.\n     * @readonly\n     * @default 0\n     */\n    get totalFrames(): number\n    {\n        return this._textures.length;\n    }\n\n    /** The array of textures used for this AnimatedSprite. */\n    get textures(): Texture[] | FrameObject[]\n    {\n        return this._textures;\n    }\n\n    set textures(value: Texture[] | FrameObject[])\n    {\n        if (value[0] instanceof Texture)\n        {\n            this._textures = value as Texture[];\n            this._durations = null;\n        }\n        else\n        {\n            this._textures = [];\n            this._durations = [];\n\n            for (let i = 0; i < value.length; i++)\n            {\n                this._textures.push((value[i] as FrameObject).texture);\n                this._durations.push((value[i] as FrameObject).time);\n            }\n        }\n        this._previousFrame = null;\n        this.gotoAndStop(0);\n        this.updateTexture();\n    }\n\n    /** The AnimatedSprite's current frame index. */\n    get currentFrame(): number\n    {\n        let currentFrame = Math.floor(this._currentTime) % this._textures.length;\n\n        if (currentFrame < 0)\n        {\n            currentFrame += this._textures.length;\n        }\n\n        return currentFrame;\n    }\n\n    set currentFrame(value: number)\n    {\n        if (value < 0 || value > this.totalFrames - 1)\n        {\n            throw new Error(`[AnimatedSprite]: Invalid frame index value ${value}, `\n                + `expected to be between 0 and totalFrames ${this.totalFrames}.`);\n        }\n\n        const previousFrame = this.currentFrame;\n\n        this._currentTime = value;\n\n        if (previousFrame !== this.currentFrame)\n        {\n            this.updateTexture();\n        }\n    }\n\n    /**\n     * Indicates if the AnimatedSprite is currently playing.\n     * @readonly\n     */\n    get playing(): boolean\n    {\n        return this._playing;\n    }\n\n    /** Whether to use Ticker.shared to auto update animation time. */\n    get autoUpdate(): boolean\n    {\n        return this._autoUpdate;\n    }\n\n    set autoUpdate(value: boolean)\n    {\n        if (value !== this._autoUpdate)\n        {\n            this._autoUpdate = value;\n\n            if (!this._autoUpdate && this._isConnectedToTicker)\n            {\n                Ticker.shared.remove(this.update, this);\n                this._isConnectedToTicker = false;\n            }\n            else if (this._autoUpdate && !this._isConnectedToTicker && this._playing)\n            {\n                Ticker.shared.add(this.update, this);\n                this._isConnectedToTicker = true;\n            }\n        }\n    }\n}\n\n/** @memberof PIXI.AnimatedSprite */\nexport interface FrameObject\n{\n    /** The {@link PIXI.Texture} of the frame. */\n    texture: Texture;\n\n    /** The duration of the frame, in milliseconds. */\n    time: number;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}