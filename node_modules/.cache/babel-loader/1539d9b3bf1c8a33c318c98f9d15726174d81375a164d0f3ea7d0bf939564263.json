{"ast":null,"code":"import { utils, ExtensionType, extensions } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\nimport { FederatedEvent } from '@pixi/events';\nimport { accessibleTarget } from './accessibleTarget.mjs';\nDisplayObject.mixin(accessibleTarget);\nconst KEY_CODE_TAB = 9;\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1e3;\nconst DIV_HOOK_POS_Y = -1e3;\nconst DIV_HOOK_ZINDEX = 2;\nclass AccessibilityManager {\n  constructor(renderer) {\n    this.debug = false;\n    this._isActive = false;\n    this._isMobileAccessibility = false;\n    this.pool = [];\n    this.renderId = 0;\n    this.children = [];\n    this.androidUpdateCount = 0;\n    this.androidUpdateFrequency = 500;\n    this._hookDiv = null;\n    if (utils.isMobile.tablet || utils.isMobile.phone) {\n      this.createTouchHook();\n    }\n    const div = document.createElement(\"div\");\n    div.style.width = `${DIV_TOUCH_SIZE}px`;\n    div.style.height = `${DIV_TOUCH_SIZE}px`;\n    div.style.position = \"absolute\";\n    div.style.top = `${DIV_TOUCH_POS_X}px`;\n    div.style.left = `${DIV_TOUCH_POS_Y}px`;\n    div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n    this.div = div;\n    this.renderer = renderer;\n    this._onKeyDown = this._onKeyDown.bind(this);\n    this._onMouseMove = this._onMouseMove.bind(this);\n    globalThis.addEventListener(\"keydown\", this._onKeyDown, false);\n  }\n  get isActive() {\n    return this._isActive;\n  }\n  get isMobileAccessibility() {\n    return this._isMobileAccessibility;\n  }\n  createTouchHook() {\n    const hookDiv = document.createElement(\"button\");\n    hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n    hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n    hookDiv.style.position = \"absolute\";\n    hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n    hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n    hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n    hookDiv.style.backgroundColor = \"#FF0000\";\n    hookDiv.title = \"select to enable accessibility for this content\";\n    hookDiv.addEventListener(\"focus\", () => {\n      this._isMobileAccessibility = true;\n      this.activate();\n      this.destroyTouchHook();\n    });\n    document.body.appendChild(hookDiv);\n    this._hookDiv = hookDiv;\n  }\n  destroyTouchHook() {\n    if (!this._hookDiv) {\n      return;\n    }\n    document.body.removeChild(this._hookDiv);\n    this._hookDiv = null;\n  }\n  activate() {\n    if (this._isActive) {\n      return;\n    }\n    this._isActive = true;\n    globalThis.document.addEventListener(\"mousemove\", this._onMouseMove, true);\n    globalThis.removeEventListener(\"keydown\", this._onKeyDown, false);\n    this.renderer.on(\"postrender\", this.update, this);\n    this.renderer.view.parentNode?.appendChild(this.div);\n  }\n  deactivate() {\n    if (!this._isActive || this._isMobileAccessibility) {\n      return;\n    }\n    this._isActive = false;\n    globalThis.document.removeEventListener(\"mousemove\", this._onMouseMove, true);\n    globalThis.addEventListener(\"keydown\", this._onKeyDown, false);\n    this.renderer.off(\"postrender\", this.update);\n    this.div.parentNode?.removeChild(this.div);\n  }\n  updateAccessibleObjects(displayObject) {\n    if (!displayObject.visible || !displayObject.accessibleChildren) {\n      return;\n    }\n    if (displayObject.accessible && displayObject.isInteractive()) {\n      if (!displayObject._accessibleActive) {\n        this.addChild(displayObject);\n      }\n      displayObject.renderId = this.renderId;\n    }\n    const children = displayObject.children;\n    if (children) {\n      for (let i = 0; i < children.length; i++) {\n        this.updateAccessibleObjects(children[i]);\n      }\n    }\n  }\n  update() {\n    const now = performance.now();\n    if (utils.isMobile.android.device && now < this.androidUpdateCount) {\n      return;\n    }\n    this.androidUpdateCount = now + this.androidUpdateFrequency;\n    if (!this.renderer.renderingToScreen) {\n      return;\n    }\n    if (this.renderer.lastObjectRendered) {\n      this.updateAccessibleObjects(this.renderer.lastObjectRendered);\n    }\n    const {\n      x,\n      y,\n      width,\n      height\n    } = this.renderer.view.getBoundingClientRect();\n    const {\n      width: viewWidth,\n      height: viewHeight,\n      resolution\n    } = this.renderer;\n    const sx = width / viewWidth * resolution;\n    const sy = height / viewHeight * resolution;\n    let div = this.div;\n    div.style.left = `${x}px`;\n    div.style.top = `${y}px`;\n    div.style.width = `${viewWidth}px`;\n    div.style.height = `${viewHeight}px`;\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i];\n      if (child.renderId !== this.renderId) {\n        child._accessibleActive = false;\n        utils.removeItems(this.children, i, 1);\n        this.div.removeChild(child._accessibleDiv);\n        this.pool.push(child._accessibleDiv);\n        child._accessibleDiv = null;\n        i--;\n      } else {\n        div = child._accessibleDiv;\n        let hitArea = child.hitArea;\n        const wt = child.worldTransform;\n        if (child.hitArea) {\n          div.style.left = `${(wt.tx + hitArea.x * wt.a) * sx}px`;\n          div.style.top = `${(wt.ty + hitArea.y * wt.d) * sy}px`;\n          div.style.width = `${hitArea.width * wt.a * sx}px`;\n          div.style.height = `${hitArea.height * wt.d * sy}px`;\n        } else {\n          hitArea = child.getBounds();\n          this.capHitArea(hitArea);\n          div.style.left = `${hitArea.x * sx}px`;\n          div.style.top = `${hitArea.y * sy}px`;\n          div.style.width = `${hitArea.width * sx}px`;\n          div.style.height = `${hitArea.height * sy}px`;\n          if (div.title !== child.accessibleTitle && child.accessibleTitle !== null) {\n            div.title = child.accessibleTitle;\n          }\n          if (div.getAttribute(\"aria-label\") !== child.accessibleHint && child.accessibleHint !== null) {\n            div.setAttribute(\"aria-label\", child.accessibleHint);\n          }\n        }\n        if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex) {\n          div.title = child.accessibleTitle;\n          div.tabIndex = child.tabIndex;\n          if (this.debug) this.updateDebugHTML(div);\n        }\n      }\n    }\n    this.renderId++;\n  }\n  updateDebugHTML(div) {\n    div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;\n  }\n  capHitArea(hitArea) {\n    if (hitArea.x < 0) {\n      hitArea.width += hitArea.x;\n      hitArea.x = 0;\n    }\n    if (hitArea.y < 0) {\n      hitArea.height += hitArea.y;\n      hitArea.y = 0;\n    }\n    const {\n      width: viewWidth,\n      height: viewHeight\n    } = this.renderer;\n    if (hitArea.x + hitArea.width > viewWidth) {\n      hitArea.width = viewWidth - hitArea.x;\n    }\n    if (hitArea.y + hitArea.height > viewHeight) {\n      hitArea.height = viewHeight - hitArea.y;\n    }\n  }\n  addChild(displayObject) {\n    let div = this.pool.pop();\n    if (!div) {\n      div = document.createElement(\"button\");\n      div.style.width = `${DIV_TOUCH_SIZE}px`;\n      div.style.height = `${DIV_TOUCH_SIZE}px`;\n      div.style.backgroundColor = this.debug ? \"rgba(255,255,255,0.5)\" : \"transparent\";\n      div.style.position = \"absolute\";\n      div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n      div.style.borderStyle = \"none\";\n      if (navigator.userAgent.toLowerCase().includes(\"chrome\")) {\n        div.setAttribute(\"aria-live\", \"off\");\n      } else {\n        div.setAttribute(\"aria-live\", \"polite\");\n      }\n      if (navigator.userAgent.match(/rv:.*Gecko\\//)) {\n        div.setAttribute(\"aria-relevant\", \"additions\");\n      } else {\n        div.setAttribute(\"aria-relevant\", \"text\");\n      }\n      div.addEventListener(\"click\", this._onClick.bind(this));\n      div.addEventListener(\"focus\", this._onFocus.bind(this));\n      div.addEventListener(\"focusout\", this._onFocusOut.bind(this));\n    }\n    div.style.pointerEvents = displayObject.accessiblePointerEvents;\n    div.type = displayObject.accessibleType;\n    if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null) {\n      div.title = displayObject.accessibleTitle;\n    } else if (!displayObject.accessibleHint || displayObject.accessibleHint === null) {\n      div.title = `displayObject ${displayObject.tabIndex}`;\n    }\n    if (displayObject.accessibleHint && displayObject.accessibleHint !== null) {\n      div.setAttribute(\"aria-label\", displayObject.accessibleHint);\n    }\n    if (this.debug) this.updateDebugHTML(div);\n    displayObject._accessibleActive = true;\n    displayObject._accessibleDiv = div;\n    div.displayObject = displayObject;\n    this.children.push(displayObject);\n    this.div.appendChild(displayObject._accessibleDiv);\n    displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n  }\n  _dispatchEvent(e, type) {\n    const {\n      displayObject: target\n    } = e.target;\n    const boundry = this.renderer.events.rootBoundary;\n    const event = Object.assign(new FederatedEvent(boundry), {\n      target\n    });\n    boundry.rootTarget = this.renderer.lastObjectRendered;\n    type.forEach(type2 => boundry.dispatchEvent(event, type2));\n  }\n  _onClick(e) {\n    this._dispatchEvent(e, [\"click\", \"pointertap\", \"tap\"]);\n  }\n  _onFocus(e) {\n    if (!e.target.getAttribute(\"aria-live\")) {\n      e.target.setAttribute(\"aria-live\", \"assertive\");\n    }\n    this._dispatchEvent(e, [\"mouseover\"]);\n  }\n  _onFocusOut(e) {\n    if (!e.target.getAttribute(\"aria-live\")) {\n      e.target.setAttribute(\"aria-live\", \"polite\");\n    }\n    this._dispatchEvent(e, [\"mouseout\"]);\n  }\n  _onKeyDown(e) {\n    if (e.keyCode !== KEY_CODE_TAB) {\n      return;\n    }\n    this.activate();\n  }\n  _onMouseMove(e) {\n    if (e.movementX === 0 && e.movementY === 0) {\n      return;\n    }\n    this.deactivate();\n  }\n  destroy() {\n    this.destroyTouchHook();\n    this.div = null;\n    globalThis.document.removeEventListener(\"mousemove\", this._onMouseMove, true);\n    globalThis.removeEventListener(\"keydown\", this._onKeyDown);\n    this.pool = null;\n    this.children = null;\n    this.renderer = null;\n  }\n}\nAccessibilityManager.extension = {\n  name: \"accessibility\",\n  type: [ExtensionType.RendererPlugin, ExtensionType.CanvasRendererPlugin]\n};\nextensions.add(AccessibilityManager);\nexport { AccessibilityManager };","map":{"version":3,"names":["DisplayObject","mixin","accessibleTarget","KEY_CODE_TAB","DIV_TOUCH_SIZE","DIV_TOUCH_POS_X","DIV_TOUCH_POS_Y","DIV_TOUCH_ZINDEX","DIV_HOOK_SIZE","DIV_HOOK_POS_X","DIV_HOOK_POS_Y","DIV_HOOK_ZINDEX","AccessibilityManager","constructor","renderer","debug","_isActive","_isMobileAccessibility","pool","renderId","children","androidUpdateCount","androidUpdateFrequency","_hookDiv","utils","isMobile","tablet","phone","createTouchHook","div","document","createElement","style","width","height","position","top","left","zIndex","toString","_onKeyDown","bind","_onMouseMove","globalThis","addEventListener","isActive","isMobileAccessibility","hookDiv","backgroundColor","title","activate","destroyTouchHook","body","appendChild","removeChild","removeEventListener","on","update","view","parentNode","deactivate","off","updateAccessibleObjects","displayObject","visible","accessibleChildren","accessible","isInteractive","_accessibleActive","addChild","i","length","now","performance","android","device","renderingToScreen","lastObjectRendered","x","y","getBoundingClientRect","viewWidth","viewHeight","resolution","sx","sy","child","removeItems","_accessibleDiv","push","hitArea","wt","worldTransform","tx","a","ty","d","getBounds","capHitArea","accessibleTitle","getAttribute","accessibleHint","setAttribute","tabIndex","updateDebugHTML","innerHTML","type","pop","borderStyle","navigator","userAgent","toLowerCase","includes","match","_onClick","_onFocus","_onFocusOut","pointerEvents","accessiblePointerEvents","accessibleType","_dispatchEvent","e","target","boundry","events","rootBoundary","event","Object","assign","FederatedEvent","rootTarget","forEach","type2","dispatchEvent","keyCode","movementX","movementY","destroy","extension","name","ExtensionType","RendererPlugin","CanvasRendererPlugin","extensions","add"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\accessibility\\src\\AccessibilityManager.ts"],"sourcesContent":["import { extensions, ExtensionType, utils } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\nimport { FederatedEvent } from '@pixi/events';\nimport { accessibleTarget } from './accessibleTarget';\n\nimport type { ExtensionMetadata, IRenderer, Rectangle } from '@pixi/core';\nimport type { Container } from '@pixi/display';\nimport type { IAccessibleHTMLElement } from './accessibleTarget';\n\n// add some extra variables to the container..\nDisplayObject.mixin(accessibleTarget);\n\nconst KEY_CODE_TAB = 9;\n\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\n\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1000;\nconst DIV_HOOK_POS_Y = -1000;\nconst DIV_HOOK_ZINDEX = 2;\n\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n * @class\n * @memberof PIXI\n */\nexport class AccessibilityManager\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'accessibility',\n        type: [\n            ExtensionType.RendererPlugin,\n            ExtensionType.CanvasRendererPlugin,\n        ],\n    };\n\n    /** Setting this to true will visually show the divs. */\n    public debug = false;\n\n    /**\n     * The renderer this accessibility manager works for.\n     * @type {PIXI.CanvasRenderer|PIXI.Renderer}\n     */\n    public renderer: IRenderer;\n\n    /** Internal variable, see isActive getter. */\n    private _isActive = false;\n\n    /** Internal variable, see isMobileAccessibility getter. */\n    private _isMobileAccessibility = false;\n\n    /** Button element for handling touch hooks. */\n    private _hookDiv: HTMLElement;\n\n    /** This is the dom element that will sit over the PixiJS element. This is where the div overlays will go. */\n    private div: HTMLElement;\n\n    /** A simple pool for storing divs. */\n    private pool: IAccessibleHTMLElement[] = [];\n\n    /** This is a tick used to check if an object is no longer being rendered. */\n    private renderId = 0;\n\n    /** The array of currently active accessible items. */\n    private children: DisplayObject[] = [];\n\n    /** Count to throttle div updates on android devices. */\n    private androidUpdateCount = 0;\n\n    /**  The frequency to update the div elements. */\n    private androidUpdateFrequency = 500; // 2fps\n\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: IRenderer)\n    {\n        this._hookDiv = null;\n\n        if (utils.isMobile.tablet || utils.isMobile.phone)\n        {\n            this.createTouchHook();\n        }\n\n        // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n        const div = document.createElement('div');\n\n        div.style.width = `${DIV_TOUCH_SIZE}px`;\n        div.style.height = `${DIV_TOUCH_SIZE}px`;\n        div.style.position = 'absolute';\n        div.style.top = `${DIV_TOUCH_POS_X}px`;\n        div.style.left = `${DIV_TOUCH_POS_Y}px`;\n        div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n\n        this.div = div;\n        this.renderer = renderer;\n\n        /**\n         * pre-bind the functions\n         * @type {Function}\n         * @private\n         */\n        this._onKeyDown = this._onKeyDown.bind(this);\n\n        /**\n         * pre-bind the functions\n         * @type {Function}\n         * @private\n         */\n        this._onMouseMove = this._onMouseMove.bind(this);\n\n        // let listen for tab.. once pressed we can fire up and show the accessibility layer\n        globalThis.addEventListener('keydown', this._onKeyDown, false);\n    }\n\n    /**\n     * Value of `true` if accessibility is currently active and accessibility layers are showing.\n     * @member {boolean}\n     * @readonly\n     */\n    get isActive(): boolean\n    {\n        return this._isActive;\n    }\n\n    /**\n     * Value of `true` if accessibility is enabled for touch devices.\n     * @member {boolean}\n     * @readonly\n     */\n    get isMobileAccessibility(): boolean\n    {\n        return this._isMobileAccessibility;\n    }\n\n    /**\n     * Creates the touch hooks.\n     * @private\n     */\n    private createTouchHook(): void\n    {\n        const hookDiv = document.createElement('button');\n\n        hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.position = 'absolute';\n        hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n        hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n        hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n        hookDiv.style.backgroundColor = '#FF0000';\n        hookDiv.title = 'select to enable accessibility for this content';\n\n        hookDiv.addEventListener('focus', () =>\n        {\n            this._isMobileAccessibility = true;\n            this.activate();\n            this.destroyTouchHook();\n        });\n\n        document.body.appendChild(hookDiv);\n        this._hookDiv = hookDiv;\n    }\n\n    /**\n     * Destroys the touch hooks.\n     * @private\n     */\n    private destroyTouchHook(): void\n    {\n        if (!this._hookDiv)\n        {\n            return;\n        }\n        document.body.removeChild(this._hookDiv);\n        this._hookDiv = null;\n    }\n\n    /**\n     * Activating will cause the Accessibility layer to be shown.\n     * This is called when a user presses the tab key.\n     * @private\n     */\n    private activate(): void\n    {\n        if (this._isActive)\n        {\n            return;\n        }\n\n        this._isActive = true;\n\n        globalThis.document.addEventListener('mousemove', this._onMouseMove, true);\n        globalThis.removeEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.on('postrender', this.update, this);\n        this.renderer.view.parentNode?.appendChild(this.div);\n    }\n\n    /**\n     * Deactivating will cause the Accessibility layer to be hidden.\n     * This is called when a user moves the mouse.\n     * @private\n     */\n    private deactivate(): void\n    {\n        if (!this._isActive || this._isMobileAccessibility)\n        {\n            return;\n        }\n\n        this._isActive = false;\n\n        globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n        globalThis.addEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.off('postrender', this.update);\n        this.div.parentNode?.removeChild(this.div);\n    }\n\n    /**\n     * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n     * @private\n     * @param {PIXI.Container} displayObject - The DisplayObject to check.\n     */\n    private updateAccessibleObjects(displayObject: Container): void\n    {\n        if (!displayObject.visible || !displayObject.accessibleChildren)\n        {\n            return;\n        }\n\n        if (displayObject.accessible && displayObject.isInteractive())\n        {\n            if (!displayObject._accessibleActive)\n            {\n                this.addChild(displayObject);\n            }\n\n            displayObject.renderId = this.renderId;\n        }\n\n        const children = displayObject.children;\n\n        if (children)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                this.updateAccessibleObjects(children[i] as Container);\n            }\n        }\n    }\n\n    /**\n     * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n     * @private\n     */\n    private update(): void\n    {\n        /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n        *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n        *  so I am just running update every half a second, seems to fix it.\n        */\n        const now = performance.now();\n\n        if (utils.isMobile.android.device && now < this.androidUpdateCount)\n        {\n            return;\n        }\n\n        this.androidUpdateCount = now + this.androidUpdateFrequency;\n\n        if (!this.renderer.renderingToScreen)\n        {\n            return;\n        }\n\n        // update children...\n        if (this.renderer.lastObjectRendered)\n        {\n            this.updateAccessibleObjects(this.renderer.lastObjectRendered as Container);\n        }\n\n        const { x, y, width, height } = this.renderer.view.getBoundingClientRect();\n        const { width: viewWidth, height: viewHeight, resolution } = this.renderer;\n\n        const sx = (width / viewWidth) * resolution;\n        const sy = (height / viewHeight) * resolution;\n\n        let div = this.div;\n\n        div.style.left = `${x}px`;\n        div.style.top = `${y}px`;\n        div.style.width = `${viewWidth}px`;\n        div.style.height = `${viewHeight}px`;\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (child.renderId !== this.renderId)\n            {\n                child._accessibleActive = false;\n\n                utils.removeItems(this.children, i, 1);\n                this.div.removeChild(child._accessibleDiv);\n                this.pool.push(child._accessibleDiv);\n                child._accessibleDiv = null;\n\n                i--;\n            }\n            else\n            {\n                // map div to display..\n                div = child._accessibleDiv;\n                let hitArea = child.hitArea as Rectangle;\n                const wt = child.worldTransform;\n\n                if (child.hitArea)\n                {\n                    div.style.left = `${(wt.tx + (hitArea.x * wt.a)) * sx}px`;\n                    div.style.top = `${(wt.ty + (hitArea.y * wt.d)) * sy}px`;\n\n                    div.style.width = `${hitArea.width * wt.a * sx}px`;\n                    div.style.height = `${hitArea.height * wt.d * sy}px`;\n                }\n                else\n                {\n                    hitArea = child.getBounds();\n\n                    this.capHitArea(hitArea);\n\n                    div.style.left = `${hitArea.x * sx}px`;\n                    div.style.top = `${hitArea.y * sy}px`;\n\n                    div.style.width = `${hitArea.width * sx}px`;\n                    div.style.height = `${hitArea.height * sy}px`;\n\n                    // update button titles and hints if they exist and they've changed\n                    if (div.title !== child.accessibleTitle && child.accessibleTitle !== null)\n                    {\n                        div.title = child.accessibleTitle;\n                    }\n                    if (div.getAttribute('aria-label') !== child.accessibleHint\n                        && child.accessibleHint !== null)\n                    {\n                        div.setAttribute('aria-label', child.accessibleHint);\n                    }\n                }\n\n                // the title or index may have changed, if so lets update it!\n                if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex)\n                {\n                    div.title = child.accessibleTitle;\n                    div.tabIndex = child.tabIndex;\n                    if (this.debug) this.updateDebugHTML(div);\n                }\n            }\n        }\n\n        // increment the render id..\n        this.renderId++;\n    }\n\n    /**\n     * private function that will visually add the information to the\n     * accessability div\n     * @param {HTMLElement} div -\n     */\n    public updateDebugHTML(div: IAccessibleHTMLElement): void\n    {\n        div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;\n    }\n\n    /**\n     * Adjust the hit area based on the bounds of a display object\n     * @param {PIXI.Rectangle} hitArea - Bounds of the child\n     */\n    public capHitArea(hitArea: Rectangle): void\n    {\n        if (hitArea.x < 0)\n        {\n            hitArea.width += hitArea.x;\n            hitArea.x = 0;\n        }\n\n        if (hitArea.y < 0)\n        {\n            hitArea.height += hitArea.y;\n            hitArea.y = 0;\n        }\n\n        const { width: viewWidth, height: viewHeight } = this.renderer;\n\n        if (hitArea.x + hitArea.width > viewWidth)\n        {\n            hitArea.width = viewWidth - hitArea.x;\n        }\n\n        if (hitArea.y + hitArea.height > viewHeight)\n        {\n            hitArea.height = viewHeight - hitArea.y;\n        }\n    }\n\n    /**\n     * Adds a DisplayObject to the accessibility manager\n     * @private\n     * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n     */\n    private addChild<T extends DisplayObject>(displayObject: T): void\n    {\n        //    this.activate();\n\n        let div = this.pool.pop();\n\n        if (!div)\n        {\n            div = document.createElement('button');\n\n            div.style.width = `${DIV_TOUCH_SIZE}px`;\n            div.style.height = `${DIV_TOUCH_SIZE}px`;\n            div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n            div.style.position = 'absolute';\n            div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n            div.style.borderStyle = 'none';\n\n            // ARIA attributes ensure that button title and hint updates are announced properly\n            if (navigator.userAgent.toLowerCase().includes('chrome'))\n            {\n                // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n                div.setAttribute('aria-live', 'off');\n            }\n            else\n            {\n                div.setAttribute('aria-live', 'polite');\n            }\n\n            if (navigator.userAgent.match(/rv:.*Gecko\\//))\n            {\n                // FireFox needs this to announce only the new button name\n                div.setAttribute('aria-relevant', 'additions');\n            }\n            else\n            {\n                // required by IE, other browsers don't much care\n                div.setAttribute('aria-relevant', 'text');\n            }\n\n            div.addEventListener('click', this._onClick.bind(this));\n            div.addEventListener('focus', this._onFocus.bind(this));\n            div.addEventListener('focusout', this._onFocusOut.bind(this));\n        }\n\n        // set pointer events\n        div.style.pointerEvents = displayObject.accessiblePointerEvents;\n        // set the type, this defaults to button!\n        div.type = displayObject.accessibleType;\n\n        if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null)\n        {\n            div.title = displayObject.accessibleTitle;\n        }\n        else if (!displayObject.accessibleHint\n                 || displayObject.accessibleHint === null)\n        {\n            div.title = `displayObject ${displayObject.tabIndex}`;\n        }\n\n        if (displayObject.accessibleHint\n            && displayObject.accessibleHint !== null)\n        {\n            div.setAttribute('aria-label', displayObject.accessibleHint);\n        }\n\n        if (this.debug) this.updateDebugHTML(div);\n\n        displayObject._accessibleActive = true;\n        displayObject._accessibleDiv = div;\n        div.displayObject = displayObject;\n\n        this.children.push(displayObject);\n        this.div.appendChild(displayObject._accessibleDiv);\n        displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n    }\n\n    /**\n     * Dispatch events with the EventSystem.\n     * @param e\n     * @param type\n     * @private\n     */\n    private _dispatchEvent(e: UIEvent, type: string[]): void\n    {\n        const { displayObject: target } = e.target as IAccessibleHTMLElement;\n        const boundry = this.renderer.events.rootBoundary;\n        const event: FederatedEvent = Object.assign(new FederatedEvent(boundry), { target });\n\n        boundry.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n        type.forEach((type) => boundry.dispatchEvent(event, type));\n    }\n\n    /**\n     * Maps the div button press to pixi's EventSystem (click)\n     * @private\n     * @param {MouseEvent} e - The click event.\n     */\n    private _onClick(e: MouseEvent): void\n    {\n        this._dispatchEvent(e, ['click', 'pointertap', 'tap']);\n    }\n\n    /**\n     * Maps the div focus events to pixi's EventSystem (mouseover)\n     * @private\n     * @param {FocusEvent} e - The focus event.\n     */\n    private _onFocus(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'assertive');\n        }\n\n        this._dispatchEvent(e, ['mouseover']);\n    }\n\n    /**\n     * Maps the div focus events to pixi's EventSystem (mouseout)\n     * @private\n     * @param {FocusEvent} e - The focusout event.\n     */\n    private _onFocusOut(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'polite');\n        }\n\n        this._dispatchEvent(e, ['mouseout']);\n    }\n\n    /**\n     * Is called when a key is pressed\n     * @private\n     * @param {KeyboardEvent} e - The keydown event.\n     */\n    private _onKeyDown(e: KeyboardEvent): void\n    {\n        if (e.keyCode !== KEY_CODE_TAB)\n        {\n            return;\n        }\n\n        this.activate();\n    }\n\n    /**\n     * Is called when the mouse moves across the renderer element\n     * @private\n     * @param {MouseEvent} e - The mouse event.\n     */\n    private _onMouseMove(e: MouseEvent): void\n    {\n        if (e.movementX === 0 && e.movementY === 0)\n        {\n            return;\n        }\n\n        this.deactivate();\n    }\n\n    /** Destroys the accessibility manager */\n    public destroy(): void\n    {\n        this.destroyTouchHook();\n        this.div = null;\n\n        globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n        globalThis.removeEventListener('keydown', this._onKeyDown);\n\n        this.pool = null;\n        this.children = null;\n        this.renderer = null;\n    }\n}\n\nextensions.add(AccessibilityManager);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}