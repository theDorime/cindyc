{"ast":null,"code":"import { Color } from '@pixi/color';\nimport { BLEND_MODES } from '@pixi/constants';\nimport { deprecation } from '../logging/deprecation.mjs';\nfunction mapPremultipliedBlendModes() {\n  const pm = [];\n  const npm = [];\n  for (let i = 0; i < 32; i++) {\n    pm[i] = i;\n    npm[i] = i;\n  }\n  pm[BLEND_MODES.NORMAL_NPM] = BLEND_MODES.NORMAL;\n  pm[BLEND_MODES.ADD_NPM] = BLEND_MODES.ADD;\n  pm[BLEND_MODES.SCREEN_NPM] = BLEND_MODES.SCREEN;\n  npm[BLEND_MODES.NORMAL] = BLEND_MODES.NORMAL_NPM;\n  npm[BLEND_MODES.ADD] = BLEND_MODES.ADD_NPM;\n  npm[BLEND_MODES.SCREEN] = BLEND_MODES.SCREEN_NPM;\n  const array = [];\n  array.push(npm);\n  array.push(pm);\n  return array;\n}\nconst premultiplyBlendMode = mapPremultipliedBlendModes();\nfunction correctBlendMode(blendMode, premultiplied) {\n  return premultiplyBlendMode[premultiplied ? 1 : 0][blendMode];\n}\nfunction premultiplyRgba(rgb, alpha, out) {\n  let premultiply = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  deprecation(\"7.2.0\", `utils.premultiplyRgba has moved to Color.premultiply`);\n  return Color.shared.setValue(rgb).premultiply(alpha, premultiply).toArray(out ?? new Float32Array(4));\n}\nfunction premultiplyTint(tint, alpha) {\n  deprecation(\"7.2.0\", `utils.premultiplyTint has moved to Color.toPremultiplied`);\n  return Color.shared.setValue(tint).toPremultiplied(alpha);\n}\nfunction premultiplyTintToRgba(tint, alpha, out) {\n  let premultiply = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  deprecation(\"7.2.0\", `utils.premultiplyTintToRgba has moved to Color.premultiply`);\n  return Color.shared.setValue(tint).premultiply(alpha, premultiply).toArray(out ?? new Float32Array(4));\n}\nexport { correctBlendMode, premultiplyBlendMode, premultiplyRgba, premultiplyTint, premultiplyTintToRgba };","map":{"version":3,"names":["mapPremultipliedBlendModes","pm","npm","i","BLEND_MODES","NORMAL_NPM","NORMAL","ADD_NPM","ADD","SCREEN_NPM","SCREEN","array","push","premultiplyBlendMode","correctBlendMode","blendMode","premultiplied","premultiplyRgba","rgb","alpha","out","premultiply","arguments","length","undefined","deprecation","Color","shared","setValue","toArray","Float32Array","premultiplyTint","tint","toPremultiplied","premultiplyTintToRgba"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\utils\\src\\color\\premultiply.ts"],"sourcesContent":["import { Color } from '@pixi/color';\nimport { BLEND_MODES } from '@pixi/constants';\nimport { deprecation } from '../logging/deprecation';\n\n/**\n * Corrects PixiJS blend, takes premultiplied alpha into account\n * @memberof PIXI.utils\n * @function mapPremultipliedBlendModes\n * @private\n * @returns {Array<number[]>} Mapped modes.\n */\nfunction mapPremultipliedBlendModes(): number[][]\n{\n    const pm = [];\n    const npm = [];\n\n    for (let i = 0; i < 32; i++)\n    {\n        pm[i] = i;\n        npm[i] = i;\n    }\n\n    pm[BLEND_MODES.NORMAL_NPM] = BLEND_MODES.NORMAL;\n    pm[BLEND_MODES.ADD_NPM] = BLEND_MODES.ADD;\n    pm[BLEND_MODES.SCREEN_NPM] = BLEND_MODES.SCREEN;\n\n    npm[BLEND_MODES.NORMAL] = BLEND_MODES.NORMAL_NPM;\n    npm[BLEND_MODES.ADD] = BLEND_MODES.ADD_NPM;\n    npm[BLEND_MODES.SCREEN] = BLEND_MODES.SCREEN_NPM;\n\n    const array: number[][] = [];\n\n    array.push(npm);\n    array.push(pm);\n\n    return array;\n}\n\n/**\n * maps premultiply flag and blendMode to adjusted blendMode\n * @memberof PIXI.utils\n * @type {Array<number[]>}\n */\nexport const premultiplyBlendMode = mapPremultipliedBlendModes();\n\n/**\n * changes blendMode according to texture format\n * @memberof PIXI.utils\n * @function correctBlendMode\n * @param {number} blendMode - supposed blend mode\n * @param {boolean} premultiplied - whether source is premultiplied\n * @returns {number} true blend mode for this texture\n */\nexport function correctBlendMode(blendMode: number, premultiplied: boolean): number\n{\n    return premultiplyBlendMode[premultiplied ? 1 : 0][blendMode];\n}\n\n/**\n * @memberof PIXI.utils\n * @function premultiplyRgba\n * @deprecated since 7.2.0\n * @see PIXI.Color.premultiply\n * @param {Float32Array|number[]} rgb -\n * @param {number} alpha -\n * @param {Float32Array} [out] -\n * @param {boolean} [premultiply=true] -\n */\nexport function premultiplyRgba(\n    rgb: Float32Array | number[],\n    alpha: number,\n    out?: Float32Array,\n    premultiply = true\n): Float32Array\n{\n    // #if _DEBUG\n    deprecation('7.2.0', `utils.premultiplyRgba has moved to Color.premultiply`);\n    // #endif\n\n    return Color.shared\n        .setValue(rgb)\n        .premultiply(alpha, premultiply)\n        .toArray(out ?? new Float32Array(4));\n}\n\n/**\n * @memberof PIXI.utils\n * @function premultiplyTint\n * @deprecated since 7.2.0\n * @see PIXI.Color.toPremultiplied\n * @param {number} tint -\n * @param {number} alpha -\n */\nexport function premultiplyTint(tint: number, alpha: number): number\n{\n    // #if _DEBUG\n    deprecation('7.2.0', `utils.premultiplyTint has moved to Color.toPremultiplied`);\n    // #endif\n\n    return Color.shared\n        .setValue(tint)\n        .toPremultiplied(alpha);\n}\n\n/**\n * @memberof PIXI.utils\n * @function premultiplyTintToRgba\n * @deprecated since 7.2.0\n * @see PIXI.Color.premultiply\n * @param {number} tint -\n * @param {number} alpha -\n * @param {Float32Array} [out] -\n * @param {boolean} [premultiply=true] -\n */\nexport function premultiplyTintToRgba(tint: number, alpha: number, out?: Float32Array, premultiply = true): Float32Array\n{\n    // #if _DEBUG\n    deprecation('7.2.0', `utils.premultiplyTintToRgba has moved to Color.premultiply`);\n    // #endif\n\n    return Color.shared\n        .setValue(tint)\n        .premultiply(alpha, premultiply)\n        .toArray(out ?? new Float32Array(4));\n}\n"],"mappings":";;;AAWA,SACAA,2BAAA;EACI,MAAMC,EAAA,GAAK,EAAC;EACZ,MAAMC,GAAA,GAAM,EAAC;EAEb,SAASC,CAAI,MAAGA,CAAI,OAAIA,CACxB;IACIF,EAAA,CAAGE,CAAK,IAAAA,CAAA;IACRD,GAAA,CAAIC,CAAK,IAAAA,CAAA;EAAA;EAGVF,EAAA,CAAAG,WAAA,CAAYC,UAAA,IAAcD,WAAY,CAAAE,MAAA;EACtCL,EAAA,CAAAG,WAAA,CAAYG,OAAA,IAAWH,WAAY,CAAAI,GAAA;EACnCP,EAAA,CAAAG,WAAA,CAAYK,UAAA,IAAcL,WAAY,CAAAM,MAAA;EAErCR,GAAA,CAAAE,WAAA,CAAYE,MAAA,IAAUF,WAAY,CAAAC,UAAA;EAClCH,GAAA,CAAAE,WAAA,CAAYI,GAAA,IAAOJ,WAAY,CAAAG,OAAA;EAC/BL,GAAA,CAAAE,WAAA,CAAYM,MAAA,IAAUN,WAAY,CAAAK,UAAA;EAEtC,MAAME,KAAA,GAAoB,EAAC;EAE3BA,KAAA,CAAMC,IAAA,CAAKV,GAAG;EACdS,KAAA,CAAMC,IAAA,CAAKX,EAAE;EAEN,OAAAU,KAAA;AACX;AAOO,MAAME,oBAAA,GAAuBb,0BAA2B;AAUxD,SAAAc,iBAA0BC,SAAA,EAAmBC,aACpD;EACW,OAAAH,oBAAA,CAAqBG,aAAgB,OAAI,CAAG,EAAAD,SAAA;AACvD;AAYO,SAAAE,gBACHC,GACA,EAAAC,KAAA,EACAC,GACA,EAEJ;EAAA,IAFIC,WAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAc,IAElB;EAEIG,WAAA,CAAY,SAA+D;EAG3E,OAAOC,KAAM,CAAAC,MAAA,CACRC,QAAS,CAAAV,GAAG,EACZG,WAAY,CAAAF,KAAA,EAAOE,WAAW,EAC9BQ,OAAQ,CAAAT,GAAA,IAAO,IAAIU,YAAA,CAAa,CAAC,CAAC;AAC3C;AAUO,SAAAC,gBAAyBC,IAAA,EAAcb,KAC9C;EAEIM,WAAA,CAAY,SAAmE;EAG/E,OAAOC,KAAA,CAAMC,MACR,CAAAC,QAAA,CAASI,IAAI,EACbC,eAAA,CAAgBd,KAAK;AAC9B;AAYO,SAAAe,sBAA+BF,IAAc,EAAAb,KAAA,EAAeC,GAAoB,EACvF;EAAA,IADuFC,WAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAc,IACrG;EAEIG,WAAA,CAAY,SAAqE;EAGjF,OAAOC,KAAM,CAAAC,MAAA,CACRC,QAAS,CAAAI,IAAI,EACbX,WAAY,CAAAF,KAAA,EAAOE,WAAW,EAC9BQ,OAAQ,CAAAT,GAAA,IAAO,IAAIU,YAAA,CAAa,CAAC,CAAC;AAC3C"},"metadata":{},"sourceType":"module","externalDependencies":[]}