{"ast":null,"code":"import { ExtensionType, extensions } from '@pixi/core';\nimport { EventBoundary } from './EventBoundary.mjs';\nimport { EventsTicker } from './EventTicker.mjs';\nimport { FederatedPointerEvent } from './FederatedPointerEvent.mjs';\nimport { FederatedWheelEvent } from './FederatedWheelEvent.mjs';\nconst MOUSE_POINTER_ID = 1;\nconst TOUCH_TO_POINTER = {\n  touchstart: \"pointerdown\",\n  touchend: \"pointerup\",\n  touchendoutside: \"pointerupoutside\",\n  touchmove: \"pointermove\",\n  touchcancel: \"pointercancel\"\n};\nconst _EventSystem = class {\n  constructor(renderer) {\n    this.supportsTouchEvents = \"ontouchstart\" in globalThis;\n    this.supportsPointerEvents = !!globalThis.PointerEvent;\n    this.domElement = null;\n    this.resolution = 1;\n    this.renderer = renderer;\n    this.rootBoundary = new EventBoundary(null);\n    EventsTicker.init(this);\n    this.autoPreventDefault = true;\n    this.eventsAdded = false;\n    this.rootPointerEvent = new FederatedPointerEvent(null);\n    this.rootWheelEvent = new FederatedWheelEvent(null);\n    this.cursorStyles = {\n      default: \"inherit\",\n      pointer: \"pointer\"\n    };\n    this.features = new Proxy({\n      ..._EventSystem.defaultEventFeatures\n    }, {\n      set: (target, key, value) => {\n        if (key === \"globalMove\") {\n          this.rootBoundary.enableGlobalMoveEvents = value;\n        }\n        target[key] = value;\n        return true;\n      }\n    });\n    this.onPointerDown = this.onPointerDown.bind(this);\n    this.onPointerMove = this.onPointerMove.bind(this);\n    this.onPointerUp = this.onPointerUp.bind(this);\n    this.onPointerOverOut = this.onPointerOverOut.bind(this);\n    this.onWheel = this.onWheel.bind(this);\n  }\n  static get defaultEventMode() {\n    return this._defaultEventMode;\n  }\n  init(options) {\n    const {\n      view,\n      resolution\n    } = this.renderer;\n    this.setTargetElement(view);\n    this.resolution = resolution;\n    _EventSystem._defaultEventMode = options.eventMode ?? \"auto\";\n    Object.assign(this.features, options.eventFeatures ?? {});\n    this.rootBoundary.enableGlobalMoveEvents = this.features.globalMove;\n  }\n  resolutionChange(resolution) {\n    this.resolution = resolution;\n  }\n  destroy() {\n    this.setTargetElement(null);\n    this.renderer = null;\n  }\n  setCursor(mode) {\n    mode = mode || \"default\";\n    let applyStyles = true;\n    if (globalThis.OffscreenCanvas && this.domElement instanceof OffscreenCanvas) {\n      applyStyles = false;\n    }\n    if (this.currentCursor === mode) {\n      return;\n    }\n    this.currentCursor = mode;\n    const style = this.cursorStyles[mode];\n    if (style) {\n      switch (typeof style) {\n        case \"string\":\n          if (applyStyles) {\n            this.domElement.style.cursor = style;\n          }\n          break;\n        case \"function\":\n          style(mode);\n          break;\n        case \"object\":\n          if (applyStyles) {\n            Object.assign(this.domElement.style, style);\n          }\n          break;\n      }\n    } else if (applyStyles && typeof mode === \"string\" && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode)) {\n      this.domElement.style.cursor = mode;\n    }\n  }\n  get pointer() {\n    return this.rootPointerEvent;\n  }\n  onPointerDown(nativeEvent) {\n    if (!this.features.click) return;\n    this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n    if (this.supportsTouchEvents && nativeEvent.pointerType === \"touch\") return;\n    const events = this.normalizeToPointerData(nativeEvent);\n    if (this.autoPreventDefault && events[0].isNormalized) {\n      const cancelable = nativeEvent.cancelable || !(\"cancelable\" in nativeEvent);\n      if (cancelable) {\n        nativeEvent.preventDefault();\n      }\n    }\n    for (let i = 0, j = events.length; i < j; i++) {\n      const nativeEvent2 = events[i];\n      const federatedEvent = this.bootstrapEvent(this.rootPointerEvent, nativeEvent2);\n      this.rootBoundary.mapEvent(federatedEvent);\n    }\n    this.setCursor(this.rootBoundary.cursor);\n  }\n  onPointerMove(nativeEvent) {\n    if (!this.features.move) return;\n    this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n    if (this.supportsTouchEvents && nativeEvent.pointerType === \"touch\") return;\n    EventsTicker.pointerMoved();\n    const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n    for (let i = 0, j = normalizedEvents.length; i < j; i++) {\n      const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n      this.rootBoundary.mapEvent(event);\n    }\n    this.setCursor(this.rootBoundary.cursor);\n  }\n  onPointerUp(nativeEvent) {\n    if (!this.features.click) return;\n    this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n    if (this.supportsTouchEvents && nativeEvent.pointerType === \"touch\") return;\n    let target = nativeEvent.target;\n    if (nativeEvent.composedPath && nativeEvent.composedPath().length > 0) {\n      target = nativeEvent.composedPath()[0];\n    }\n    const outside = target !== this.domElement ? \"outside\" : \"\";\n    const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n    for (let i = 0, j = normalizedEvents.length; i < j; i++) {\n      const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n      event.type += outside;\n      this.rootBoundary.mapEvent(event);\n    }\n    this.setCursor(this.rootBoundary.cursor);\n  }\n  onPointerOverOut(nativeEvent) {\n    if (!this.features.click) return;\n    this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n    if (this.supportsTouchEvents && nativeEvent.pointerType === \"touch\") return;\n    const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n    for (let i = 0, j = normalizedEvents.length; i < j; i++) {\n      const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n      this.rootBoundary.mapEvent(event);\n    }\n    this.setCursor(this.rootBoundary.cursor);\n  }\n  onWheel(nativeEvent) {\n    if (!this.features.wheel) return;\n    const wheelEvent = this.normalizeWheelEvent(nativeEvent);\n    this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n    this.rootBoundary.mapEvent(wheelEvent);\n  }\n  setTargetElement(element) {\n    this.removeEvents();\n    this.domElement = element;\n    EventsTicker.domElement = element;\n    this.addEvents();\n  }\n  addEvents() {\n    if (this.eventsAdded || !this.domElement) {\n      return;\n    }\n    EventsTicker.addTickerListener();\n    const style = this.domElement.style;\n    if (style) {\n      if (globalThis.navigator.msPointerEnabled) {\n        style.msContentZooming = \"none\";\n        style.msTouchAction = \"none\";\n      } else if (this.supportsPointerEvents) {\n        style.touchAction = \"none\";\n      }\n    }\n    if (this.supportsPointerEvents) {\n      globalThis.document.addEventListener(\"pointermove\", this.onPointerMove, true);\n      this.domElement.addEventListener(\"pointerdown\", this.onPointerDown, true);\n      this.domElement.addEventListener(\"pointerleave\", this.onPointerOverOut, true);\n      this.domElement.addEventListener(\"pointerover\", this.onPointerOverOut, true);\n      globalThis.addEventListener(\"pointerup\", this.onPointerUp, true);\n    } else {\n      globalThis.document.addEventListener(\"mousemove\", this.onPointerMove, true);\n      this.domElement.addEventListener(\"mousedown\", this.onPointerDown, true);\n      this.domElement.addEventListener(\"mouseout\", this.onPointerOverOut, true);\n      this.domElement.addEventListener(\"mouseover\", this.onPointerOverOut, true);\n      globalThis.addEventListener(\"mouseup\", this.onPointerUp, true);\n    }\n    if (this.supportsTouchEvents) {\n      this.domElement.addEventListener(\"touchstart\", this.onPointerDown, true);\n      this.domElement.addEventListener(\"touchend\", this.onPointerUp, true);\n      this.domElement.addEventListener(\"touchmove\", this.onPointerMove, true);\n    }\n    this.domElement.addEventListener(\"wheel\", this.onWheel, {\n      passive: true,\n      capture: true\n    });\n    this.eventsAdded = true;\n  }\n  removeEvents() {\n    if (!this.eventsAdded || !this.domElement) {\n      return;\n    }\n    EventsTicker.removeTickerListener();\n    const style = this.domElement.style;\n    if (globalThis.navigator.msPointerEnabled) {\n      style.msContentZooming = \"\";\n      style.msTouchAction = \"\";\n    } else if (this.supportsPointerEvents) {\n      style.touchAction = \"\";\n    }\n    if (this.supportsPointerEvents) {\n      globalThis.document.removeEventListener(\"pointermove\", this.onPointerMove, true);\n      this.domElement.removeEventListener(\"pointerdown\", this.onPointerDown, true);\n      this.domElement.removeEventListener(\"pointerleave\", this.onPointerOverOut, true);\n      this.domElement.removeEventListener(\"pointerover\", this.onPointerOverOut, true);\n      globalThis.removeEventListener(\"pointerup\", this.onPointerUp, true);\n    } else {\n      globalThis.document.removeEventListener(\"mousemove\", this.onPointerMove, true);\n      this.domElement.removeEventListener(\"mousedown\", this.onPointerDown, true);\n      this.domElement.removeEventListener(\"mouseout\", this.onPointerOverOut, true);\n      this.domElement.removeEventListener(\"mouseover\", this.onPointerOverOut, true);\n      globalThis.removeEventListener(\"mouseup\", this.onPointerUp, true);\n    }\n    if (this.supportsTouchEvents) {\n      this.domElement.removeEventListener(\"touchstart\", this.onPointerDown, true);\n      this.domElement.removeEventListener(\"touchend\", this.onPointerUp, true);\n      this.domElement.removeEventListener(\"touchmove\", this.onPointerMove, true);\n    }\n    this.domElement.removeEventListener(\"wheel\", this.onWheel, true);\n    this.domElement = null;\n    this.eventsAdded = false;\n  }\n  mapPositionToPoint(point, x, y) {\n    let rect;\n    if (!this.domElement.parentElement) {\n      rect = {\n        x: 0,\n        y: 0,\n        width: this.domElement.width,\n        height: this.domElement.height,\n        left: 0,\n        top: 0\n      };\n    } else {\n      rect = this.domElement.getBoundingClientRect();\n    }\n    const resolutionMultiplier = 1 / this.resolution;\n    point.x = (x - rect.left) * (this.domElement.width / rect.width) * resolutionMultiplier;\n    point.y = (y - rect.top) * (this.domElement.height / rect.height) * resolutionMultiplier;\n  }\n  normalizeToPointerData(event) {\n    const normalizedEvents = [];\n    if (this.supportsTouchEvents && event instanceof TouchEvent) {\n      for (let i = 0, li = event.changedTouches.length; i < li; i++) {\n        const touch = event.changedTouches[i];\n        if (typeof touch.button === \"undefined\") touch.button = 0;\n        if (typeof touch.buttons === \"undefined\") touch.buttons = 1;\n        if (typeof touch.isPrimary === \"undefined\") {\n          touch.isPrimary = event.touches.length === 1 && event.type === \"touchstart\";\n        }\n        if (typeof touch.width === \"undefined\") touch.width = touch.radiusX || 1;\n        if (typeof touch.height === \"undefined\") touch.height = touch.radiusY || 1;\n        if (typeof touch.tiltX === \"undefined\") touch.tiltX = 0;\n        if (typeof touch.tiltY === \"undefined\") touch.tiltY = 0;\n        if (typeof touch.pointerType === \"undefined\") touch.pointerType = \"touch\";\n        if (typeof touch.pointerId === \"undefined\") touch.pointerId = touch.identifier || 0;\n        if (typeof touch.pressure === \"undefined\") touch.pressure = touch.force || 0.5;\n        if (typeof touch.twist === \"undefined\") touch.twist = 0;\n        if (typeof touch.tangentialPressure === \"undefined\") touch.tangentialPressure = 0;\n        if (typeof touch.layerX === \"undefined\") touch.layerX = touch.offsetX = touch.clientX;\n        if (typeof touch.layerY === \"undefined\") touch.layerY = touch.offsetY = touch.clientY;\n        touch.isNormalized = true;\n        touch.type = event.type;\n        normalizedEvents.push(touch);\n      }\n    } else if (!globalThis.MouseEvent || event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof globalThis.PointerEvent))) {\n      const tempEvent = event;\n      if (typeof tempEvent.isPrimary === \"undefined\") tempEvent.isPrimary = true;\n      if (typeof tempEvent.width === \"undefined\") tempEvent.width = 1;\n      if (typeof tempEvent.height === \"undefined\") tempEvent.height = 1;\n      if (typeof tempEvent.tiltX === \"undefined\") tempEvent.tiltX = 0;\n      if (typeof tempEvent.tiltY === \"undefined\") tempEvent.tiltY = 0;\n      if (typeof tempEvent.pointerType === \"undefined\") tempEvent.pointerType = \"mouse\";\n      if (typeof tempEvent.pointerId === \"undefined\") tempEvent.pointerId = MOUSE_POINTER_ID;\n      if (typeof tempEvent.pressure === \"undefined\") tempEvent.pressure = 0.5;\n      if (typeof tempEvent.twist === \"undefined\") tempEvent.twist = 0;\n      if (typeof tempEvent.tangentialPressure === \"undefined\") tempEvent.tangentialPressure = 0;\n      tempEvent.isNormalized = true;\n      normalizedEvents.push(tempEvent);\n    } else {\n      normalizedEvents.push(event);\n    }\n    return normalizedEvents;\n  }\n  normalizeWheelEvent(nativeEvent) {\n    const event = this.rootWheelEvent;\n    this.transferMouseData(event, nativeEvent);\n    event.deltaX = nativeEvent.deltaX;\n    event.deltaY = nativeEvent.deltaY;\n    event.deltaZ = nativeEvent.deltaZ;\n    event.deltaMode = nativeEvent.deltaMode;\n    this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n    event.global.copyFrom(event.screen);\n    event.offset.copyFrom(event.screen);\n    event.nativeEvent = nativeEvent;\n    event.type = nativeEvent.type;\n    return event;\n  }\n  bootstrapEvent(event, nativeEvent) {\n    event.originalEvent = null;\n    event.nativeEvent = nativeEvent;\n    event.pointerId = nativeEvent.pointerId;\n    event.width = nativeEvent.width;\n    event.height = nativeEvent.height;\n    event.isPrimary = nativeEvent.isPrimary;\n    event.pointerType = nativeEvent.pointerType;\n    event.pressure = nativeEvent.pressure;\n    event.tangentialPressure = nativeEvent.tangentialPressure;\n    event.tiltX = nativeEvent.tiltX;\n    event.tiltY = nativeEvent.tiltY;\n    event.twist = nativeEvent.twist;\n    this.transferMouseData(event, nativeEvent);\n    this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n    event.global.copyFrom(event.screen);\n    event.offset.copyFrom(event.screen);\n    event.isTrusted = nativeEvent.isTrusted;\n    if (event.type === \"pointerleave\") {\n      event.type = \"pointerout\";\n    }\n    if (event.type.startsWith(\"mouse\")) {\n      event.type = event.type.replace(\"mouse\", \"pointer\");\n    }\n    if (event.type.startsWith(\"touch\")) {\n      event.type = TOUCH_TO_POINTER[event.type] || event.type;\n    }\n    return event;\n  }\n  transferMouseData(event, nativeEvent) {\n    event.isTrusted = nativeEvent.isTrusted;\n    event.srcElement = nativeEvent.srcElement;\n    event.timeStamp = performance.now();\n    event.type = nativeEvent.type;\n    event.altKey = nativeEvent.altKey;\n    event.button = nativeEvent.button;\n    event.buttons = nativeEvent.buttons;\n    event.client.x = nativeEvent.clientX;\n    event.client.y = nativeEvent.clientY;\n    event.ctrlKey = nativeEvent.ctrlKey;\n    event.metaKey = nativeEvent.metaKey;\n    event.movement.x = nativeEvent.movementX;\n    event.movement.y = nativeEvent.movementY;\n    event.page.x = nativeEvent.pageX;\n    event.page.y = nativeEvent.pageY;\n    event.relatedTarget = null;\n    event.shiftKey = nativeEvent.shiftKey;\n  }\n};\nlet EventSystem = _EventSystem;\nEventSystem.extension = {\n  name: \"events\",\n  type: [ExtensionType.RendererSystem, ExtensionType.CanvasRendererSystem]\n};\nEventSystem.defaultEventFeatures = {\n  move: true,\n  globalMove: true,\n  click: true,\n  wheel: true\n};\nextensions.add(EventSystem);\nexport { EventSystem };","map":{"version":3,"names":["MOUSE_POINTER_ID","TOUCH_TO_POINTER","touchstart","touchend","touchendoutside","touchmove","touchcancel","_EventSystem","constructor","renderer","supportsTouchEvents","globalThis","supportsPointerEvents","PointerEvent","domElement","resolution","rootBoundary","EventBoundary","EventsTicker","init","autoPreventDefault","eventsAdded","rootPointerEvent","FederatedPointerEvent","rootWheelEvent","FederatedWheelEvent","cursorStyles","default","pointer","features","Proxy","defaultEventFeatures","set","target","key","value","enableGlobalMoveEvents","onPointerDown","bind","onPointerMove","onPointerUp","onPointerOverOut","onWheel","defaultEventMode","_defaultEventMode","options","view","setTargetElement","eventMode","Object","assign","eventFeatures","globalMove","resolutionChange","destroy","setCursor","mode","applyStyles","OffscreenCanvas","currentCursor","style","cursor","prototype","hasOwnProperty","call","nativeEvent","click","rootTarget","lastObjectRendered","pointerType","events","normalizeToPointerData","isNormalized","cancelable","preventDefault","i","j","length","nativeEvent2","federatedEvent","bootstrapEvent","mapEvent","move","pointerMoved","normalizedEvents","event","composedPath","outside","type","wheel","wheelEvent","normalizeWheelEvent","element","removeEvents","addEvents","addTickerListener","navigator","msPointerEnabled","msContentZooming","msTouchAction","touchAction","document","addEventListener","passive","capture","removeTickerListener","removeEventListener","mapPositionToPoint","point","x","y","rect","parentElement","width","height","left","top","getBoundingClientRect","resolutionMultiplier","TouchEvent","li","changedTouches","touch","button","buttons","isPrimary","touches","radiusX","radiusY","tiltX","tiltY","pointerId","identifier","pressure","force","twist","tangentialPressure","layerX","offsetX","clientX","layerY","offsetY","clientY","push","MouseEvent","tempEvent","transferMouseData","deltaX","deltaY","deltaZ","deltaMode","screen","global","copyFrom","offset","originalEvent","isTrusted","startsWith","replace","srcElement","timeStamp","performance","now","altKey","client","ctrlKey","metaKey","movement","movementX","movementY","page","pageX","pageY","relatedTarget","shiftKey","EventSystem","extension","name","ExtensionType","RendererSystem","CanvasRendererSystem","extensions","add"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\events\\src\\EventSystem.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/core';\nimport { EventBoundary } from './EventBoundary';\nimport { EventsTicker } from './EventTicker';\nimport { FederatedPointerEvent } from './FederatedPointerEvent';\nimport { FederatedWheelEvent } from './FederatedWheelEvent';\n\nimport type { ExtensionMetadata, IPointData, IRenderer, ISystem } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\nimport type { EventMode } from './FederatedEventTarget';\nimport type { FederatedMouseEvent } from './FederatedMouseEvent';\n\nconst MOUSE_POINTER_ID = 1;\nconst TOUCH_TO_POINTER: Record<string, string> = {\n    touchstart: 'pointerdown',\n    touchend: 'pointerup',\n    touchendoutside: 'pointerupoutside',\n    touchmove: 'pointermove',\n    touchcancel: 'pointercancel',\n};\n\n/** @ignore */\nexport interface EventSystemOptions\n{\n    /**\n     * The default event mode mode for all display objects.\n     * This option only is available when using **@pixi/events** package\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @memberof PIXI.IRendererOptions\n     */\n    eventMode?: EventMode;\n\n    /**\n     * The event features that are enabled by the EventSystem\n     * This option only is available when using **@pixi/events** package\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @memberof PIXI.IRendererOptions\n     * @example\n     * const app = new PIXI.Application({\n     *   view: canvas,\n     *   events: {\n     *     move: true,\n     *     globalMove: false,\n     *     click: true,\n     *     wheel: true,\n     *   },\n     * });\n     */\n    eventFeatures?: Partial<EventSystemFeatures>\n}\n\n/**\n * The event features that are enabled by the EventSystem\n * This option only is available when using **@pixi/events** package\n * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n * @memberof PIXI\n * @since 7.2.0\n */\ninterface EventSystemFeatures\n{\n    /**\n     * Enables pointer events associated with pointer movement:\n     * - `pointermove` / `mousemove` / `touchmove`\n     * - `pointerout` / `mouseout`\n     * - `pointerover` / `mouseover`\n     */\n    move: boolean;\n    // eslint-disable-next-line jsdoc/multiline-blocks\n    /**\n     * Enables global pointer move events:\n     * - `globalpointermove`\n     * - `globalmousemove`\n     * - `globaltouchemove`\n     */\n    globalMove: boolean;\n    /**\n     * Enables pointer events associated with clicking:\n     * - `pointerup` / `mouseup` / `touchend` / 'rightup'\n     * - `pointerupoutside` / `mouseupoutside` / `touchendoutside` / 'rightupoutside'\n     * - `pointerdown` / 'mousedown' / `touchstart` / 'rightdown'\n     * - `click` / `tap`\n     */\n    click: boolean;\n    /** - Enables wheel events. */\n    wheel: boolean;\n}\n\n/**\n * The system for handling UI events.\n * @memberof PIXI\n */\nexport class EventSystem implements ISystem<EventSystemOptions>\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'events',\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n    };\n\n    /**\n     * The event features that are enabled by the EventSystem\n     * This option only is available when using **@pixi/events** package\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @since 7.2.0\n     */\n    public static defaultEventFeatures: EventSystemFeatures = {\n        move: true,\n        globalMove: true,\n        click: true,\n        wheel: true,\n    };\n\n    private static _defaultEventMode: EventMode;\n\n    /**\n     * The default interaction mode for all display objects.\n     * @see PIXI.DisplayObject.eventMode\n     * @type {PIXI.EventMode}\n     * @readonly\n     * @since 7.2.0\n     */\n    public static get defaultEventMode()\n    {\n        return this._defaultEventMode;\n    }\n\n    /**\n     * The {@link PIXI.EventBoundary} for the stage.\n     *\n     * The {@link PIXI.EventBoundary#rootTarget rootTarget} of this root boundary is automatically set to\n     * the last rendered object before any event processing is initiated. This means the main scene\n     * needs to be rendered atleast once before UI events will start propagating.\n     *\n     * The root boundary should only be changed during initialization. Otherwise, any state held by the\n     * event boundary may be lost (like hovered & pressed DisplayObjects).\n     */\n    public readonly rootBoundary: EventBoundary;\n\n    /** Does the device support touch events https://www.w3.org/TR/touch-events/ */\n    public readonly supportsTouchEvents = 'ontouchstart' in globalThis;\n\n    /** Does the device support pointer events https://www.w3.org/Submission/pointer-events/ */\n    public readonly supportsPointerEvents = !!globalThis.PointerEvent;\n\n    /**\n     * Should default browser actions automatically be prevented.\n     * Does not apply to pointer events for backwards compatibility\n     * preventDefault on pointer events stops mouse events from firing\n     * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n     * @default true\n     */\n    public autoPreventDefault: boolean;\n\n    /**\n     * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n     * values, objects are handled as dictionaries of CSS values for {@code domElement},\n     * and functions are called instead of changing the CSS.\n     * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n     */\n    public cursorStyles: Record<string, string | ((mode: string) => void) | CSSStyleDeclaration>;\n\n    /**\n     * The DOM element to which the root event listeners are bound. This is automatically set to\n     * the renderer's {@link PIXI.Renderer#view view}.\n     */\n    public domElement: HTMLElement = null;\n\n    /** The resolution used to convert between the DOM client space into world space. */\n    public resolution = 1;\n\n    /** The renderer managing this {@link PIXI.EventSystem}. */\n    public renderer: IRenderer;\n\n    /**\n     * The event features that are enabled by the EventSystem\n     * This option only is available when using **@pixi/events** package\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @since 7.2.0\n     * @example\n     * const app = new PIXI.Application()\n     * app.renderer.events.features.globalMove = false\n     *\n     * // to override all features use Object.assign\n     * Object.assign(app.renderer.events.features, {\n     *  move: false,\n     *  globalMove: false,\n     *  click: false,\n     *  wheel: false,\n     * })\n     */\n    public readonly features: EventSystemFeatures;\n\n    private currentCursor: string;\n    private rootPointerEvent: FederatedPointerEvent;\n    private rootWheelEvent: FederatedWheelEvent;\n    private eventsAdded: boolean;\n\n    /**\n     * @param {PIXI.Renderer} renderer\n     */\n    constructor(renderer: IRenderer)\n    {\n        this.renderer = renderer;\n        this.rootBoundary = new EventBoundary(null);\n        EventsTicker.init(this);\n\n        this.autoPreventDefault = true;\n        this.eventsAdded = false;\n\n        this.rootPointerEvent = new FederatedPointerEvent(null);\n        this.rootWheelEvent = new FederatedWheelEvent(null);\n\n        this.cursorStyles = {\n            default: 'inherit',\n            pointer: 'pointer',\n        };\n\n        this.features = new Proxy({ ...EventSystem.defaultEventFeatures }, {\n            set: (target, key, value) =>\n            {\n                if (key === 'globalMove')\n                {\n                    this.rootBoundary.enableGlobalMoveEvents = value;\n                }\n                target[key as keyof EventSystemFeatures] = value;\n\n                return true;\n            }\n        });\n\n        this.onPointerDown = this.onPointerDown.bind(this);\n        this.onPointerMove = this.onPointerMove.bind(this);\n        this.onPointerUp = this.onPointerUp.bind(this);\n        this.onPointerOverOut = this.onPointerOverOut.bind(this);\n        this.onWheel = this.onWheel.bind(this);\n    }\n\n    /**\n     * Runner init called, view is available at this point.\n     * @ignore\n     */\n    init(options: EventSystemOptions): void\n    {\n        const { view, resolution } = this.renderer;\n\n        this.setTargetElement(view as HTMLCanvasElement);\n        this.resolution = resolution;\n        EventSystem._defaultEventMode = options.eventMode ?? 'auto';\n        Object.assign(this.features, options.eventFeatures ?? {});\n        this.rootBoundary.enableGlobalMoveEvents = this.features.globalMove;\n    }\n\n    /**\n     * Handle changing resolution.\n     * @ignore\n     */\n    resolutionChange(resolution: number): void\n    {\n        this.resolution = resolution;\n    }\n\n    /** Destroys all event listeners and detaches the renderer. */\n    destroy(): void\n    {\n        this.setTargetElement(null);\n        this.renderer = null;\n    }\n\n    /**\n     * Sets the current cursor mode, handling any callbacks or CSS style changes.\n     * @param mode - cursor mode, a key from the cursorStyles dictionary\n     */\n    public setCursor(mode: string): void\n    {\n        mode = mode || 'default';\n        let applyStyles = true;\n\n        // offscreen canvas does not support setting styles, but cursor modes can be functions,\n        // in order to handle pixi rendered cursors, so we can't bail\n        if (globalThis.OffscreenCanvas && this.domElement instanceof OffscreenCanvas)\n        {\n            applyStyles = false;\n        }\n        // if the mode didn't actually change, bail early\n        if (this.currentCursor === mode)\n        {\n            return;\n        }\n        this.currentCursor = mode;\n        const style = this.cursorStyles[mode];\n\n        // only do things if there is a cursor style for it\n        if (style)\n        {\n            switch (typeof style)\n            {\n                case 'string':\n                    // string styles are handled as cursor CSS\n                    if (applyStyles)\n                    {\n                        this.domElement.style.cursor = style;\n                    }\n                    break;\n                case 'function':\n                    // functions are just called, and passed the cursor mode\n                    style(mode);\n                    break;\n                case 'object':\n                    // if it is an object, assume that it is a dictionary of CSS styles,\n                    // apply it to the interactionDOMElement\n                    if (applyStyles)\n                    {\n                        Object.assign(this.domElement.style, style);\n                    }\n                    break;\n            }\n        }\n        else if (applyStyles && typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode))\n        {\n            // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n            // for the mode, then assume that the dev wants it to be CSS for the cursor.\n            this.domElement.style.cursor = mode;\n        }\n    }\n\n    /**\n     * The global pointer event.\n     * Useful for getting the pointer position without listening to events.\n     * @since 7.2.0\n     */\n    public get pointer(): Readonly<FederatedPointerEvent>\n    {\n        return this.rootPointerEvent;\n    }\n\n    /**\n     * Event handler for pointer down events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerDown(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.click) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (nativeEvent as PointerEvent).pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(nativeEvent);\n\n        /*\n         * No need to prevent default on natural pointer events, as there are no side effects\n         * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n         * so still need to be prevented.\n         */\n\n        // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n        if (this.autoPreventDefault && (events[0] as any).isNormalized)\n        {\n            const cancelable = nativeEvent.cancelable || !('cancelable' in nativeEvent);\n\n            if (cancelable)\n            {\n                nativeEvent.preventDefault();\n            }\n        }\n\n        for (let i = 0, j = events.length; i < j; i++)\n        {\n            const nativeEvent = events[i];\n            const federatedEvent = this.bootstrapEvent(this.rootPointerEvent, nativeEvent);\n\n            this.rootBoundary.mapEvent(federatedEvent);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer move events on on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch events.\n     */\n    private onPointerMove(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.move) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (nativeEvent as PointerEvent).pointerType === 'touch') return;\n\n        EventsTicker.pointerMoved();\n\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer up events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerUp(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.click) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (nativeEvent as PointerEvent).pointerType === 'touch') return;\n\n        let target = nativeEvent.target;\n\n        // if in shadow DOM use composedPath to access target\n        if (nativeEvent.composedPath && nativeEvent.composedPath().length > 0)\n        {\n            target = nativeEvent.composedPath()[0];\n        }\n\n        const outside = target !== this.domElement ? 'outside' : '';\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            event.type += outside;\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer over & out events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerOverOut(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.click) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (nativeEvent as PointerEvent).pointerType === 'touch') return;\n\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Passive handler for `wheel` events on {@link PIXI.EventSystem.domElement this.domElement}.\n     * @param nativeEvent - The native wheel event.\n     */\n    protected onWheel(nativeEvent: WheelEvent): void\n    {\n        if (!this.features.wheel) return;\n        const wheelEvent = this.normalizeWheelEvent(nativeEvent);\n\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n        this.rootBoundary.mapEvent(wheelEvent);\n    }\n\n    /**\n     * Sets the {@link PIXI.EventSystem#domElement domElement} and binds event listeners.\n     *\n     * To deregister the current DOM element without setting a new one, pass {@code null}.\n     * @param element - The new DOM element.\n     */\n    public setTargetElement(element: HTMLElement): void\n    {\n        this.removeEvents();\n        this.domElement = element;\n        EventsTicker.domElement = element;\n        this.addEvents();\n    }\n\n    /** Register event listeners on {@link PIXI.Renderer#domElement this.domElement}. */\n    private addEvents(): void\n    {\n        if (this.eventsAdded || !this.domElement)\n        {\n            return;\n        }\n\n        EventsTicker.addTickerListener();\n\n        const style = this.domElement.style as CrossCSSStyleDeclaration;\n\n        if (style)\n        {\n            if ((globalThis.navigator as any).msPointerEnabled)\n            {\n                style.msContentZooming = 'none';\n                style.msTouchAction = 'none';\n            }\n            else if (this.supportsPointerEvents)\n            {\n                style.touchAction = 'none';\n            }\n        }\n\n        /*\n         * These events are added first, so that if pointer events are normalized, they are fired\n         * in the same order as non-normalized events. ie. pointer event 1st, mouse / touch 2nd\n         */\n        if (this.supportsPointerEvents)\n        {\n            globalThis.document.addEventListener('pointermove', this.onPointerMove, true);\n            this.domElement.addEventListener('pointerdown', this.onPointerDown, true);\n            // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n            // we already handle those, so for the purposes of what we do in onPointerOut, we only\n            // care about the pointerleave event\n            this.domElement.addEventListener('pointerleave', this.onPointerOverOut, true);\n            this.domElement.addEventListener('pointerover', this.onPointerOverOut, true);\n            // globalThis.addEventListener('pointercancel', this.onPointerCancel, true);\n            globalThis.addEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            globalThis.document.addEventListener('mousemove', this.onPointerMove, true);\n            this.domElement.addEventListener('mousedown', this.onPointerDown, true);\n            this.domElement.addEventListener('mouseout', this.onPointerOverOut, true);\n            this.domElement.addEventListener('mouseover', this.onPointerOverOut, true);\n            globalThis.addEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        // Always look directly for touch events so that we can provide original data\n        // In a future version we should change this to being just a fallback and rely solely on\n        // PointerEvents whenever available\n        if (this.supportsTouchEvents)\n        {\n            this.domElement.addEventListener('touchstart', this.onPointerDown, true);\n            // this.domElement.addEventListener('touchcancel', this.onPointerCancel, true);\n            this.domElement.addEventListener('touchend', this.onPointerUp, true);\n            this.domElement.addEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.domElement.addEventListener('wheel', this.onWheel, {\n            passive: true,\n            capture: true,\n        });\n\n        this.eventsAdded = true;\n    }\n\n    /** Unregister event listeners on {@link PIXI.EventSystem#domElement this.domElement}. */\n    private removeEvents(): void\n    {\n        if (!this.eventsAdded || !this.domElement)\n        {\n            return;\n        }\n\n        EventsTicker.removeTickerListener();\n\n        const style = this.domElement.style as CrossCSSStyleDeclaration;\n\n        if ((globalThis.navigator as any).msPointerEnabled)\n        {\n            style.msContentZooming = '';\n            style.msTouchAction = '';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            style.touchAction = '';\n        }\n\n        if (this.supportsPointerEvents)\n        {\n            globalThis.document.removeEventListener('pointermove', this.onPointerMove, true);\n            this.domElement.removeEventListener('pointerdown', this.onPointerDown, true);\n            this.domElement.removeEventListener('pointerleave', this.onPointerOverOut, true);\n            this.domElement.removeEventListener('pointerover', this.onPointerOverOut, true);\n            // globalThis.removeEventListener('pointercancel', this.onPointerCancel, true);\n            globalThis.removeEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            globalThis.document.removeEventListener('mousemove', this.onPointerMove, true);\n            this.domElement.removeEventListener('mousedown', this.onPointerDown, true);\n            this.domElement.removeEventListener('mouseout', this.onPointerOverOut, true);\n            this.domElement.removeEventListener('mouseover', this.onPointerOverOut, true);\n            globalThis.removeEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        if (this.supportsTouchEvents)\n        {\n            this.domElement.removeEventListener('touchstart', this.onPointerDown, true);\n            // this.domElement.removeEventListener('touchcancel', this.onPointerCancel, true);\n            this.domElement.removeEventListener('touchend', this.onPointerUp, true);\n            this.domElement.removeEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.domElement.removeEventListener('wheel', this.onWheel, true);\n\n        this.domElement = null;\n        this.eventsAdded = false;\n    }\n\n    /**\n     * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n     * resulting value is stored in the point. This takes into account the fact that the DOM\n     * element could be scaled and positioned anywhere on the screen.\n     * @param  {PIXI.IPointData} point - the point that the result will be stored in\n     * @param  {number} x - the x coord of the position to map\n     * @param  {number} y - the y coord of the position to map\n     */\n    public mapPositionToPoint(point: IPointData, x: number, y: number): void\n    {\n        let rect;\n\n        // IE 11 fix\n        if (!this.domElement.parentElement)\n        {\n            rect = {\n                x: 0,\n                y: 0,\n                width: (this.domElement as any).width,\n                height: (this.domElement as any).height,\n                left: 0,\n                top: 0\n            };\n        }\n        else\n        {\n            rect = this.domElement.getBoundingClientRect();\n        }\n\n        const resolutionMultiplier = 1.0 / this.resolution;\n\n        point.x = ((x - rect.left) * ((this.domElement as any).width / rect.width)) * resolutionMultiplier;\n        point.y = ((y - rect.top) * ((this.domElement as any).height / rect.height)) * resolutionMultiplier;\n    }\n\n    /**\n     * Ensures that the original event object contains all data that a regular pointer event would have\n     * @param event - The original event data from a touch or mouse event\n     * @returns An array containing a single normalized pointer event, in the case of a pointer\n     *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n     */\n    private normalizeToPointerData(event: TouchEvent | MouseEvent | PointerEvent): PointerEvent[]\n    {\n        const normalizedEvents = [];\n\n        if (this.supportsTouchEvents && event instanceof TouchEvent)\n        {\n            for (let i = 0, li = event.changedTouches.length; i < li; i++)\n            {\n                const touch = event.changedTouches[i] as PixiTouch;\n\n                if (typeof touch.button === 'undefined') touch.button = 0;\n                if (typeof touch.buttons === 'undefined') touch.buttons = 1;\n                if (typeof touch.isPrimary === 'undefined')\n                {\n                    touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n                }\n                if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;\n                if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;\n                if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;\n                if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;\n                if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';\n                if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;\n                if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;\n                if (typeof touch.twist === 'undefined') touch.twist = 0;\n                if (typeof touch.tangentialPressure === 'undefined') touch.tangentialPressure = 0;\n                // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n                // support, and the fill ins are not quite the same\n                // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n                // left is not 0,0 on the page\n                if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;\n                if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;\n\n                // mark the touch as normalized, just so that we know we did it\n                touch.isNormalized = true;\n                touch.type = event.type;\n\n                normalizedEvents.push(touch);\n            }\n        }\n        // apparently PointerEvent subclasses MouseEvent, so yay\n        else if (!globalThis.MouseEvent\n            || (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof globalThis.PointerEvent))))\n        {\n            const tempEvent = event as PixiPointerEvent;\n\n            if (typeof tempEvent.isPrimary === 'undefined') tempEvent.isPrimary = true;\n            if (typeof tempEvent.width === 'undefined') tempEvent.width = 1;\n            if (typeof tempEvent.height === 'undefined') tempEvent.height = 1;\n            if (typeof tempEvent.tiltX === 'undefined') tempEvent.tiltX = 0;\n            if (typeof tempEvent.tiltY === 'undefined') tempEvent.tiltY = 0;\n            if (typeof tempEvent.pointerType === 'undefined') tempEvent.pointerType = 'mouse';\n            if (typeof tempEvent.pointerId === 'undefined') tempEvent.pointerId = MOUSE_POINTER_ID;\n            if (typeof tempEvent.pressure === 'undefined') tempEvent.pressure = 0.5;\n            if (typeof tempEvent.twist === 'undefined') tempEvent.twist = 0;\n            if (typeof tempEvent.tangentialPressure === 'undefined') tempEvent.tangentialPressure = 0;\n\n            // mark the mouse event as normalized, just so that we know we did it\n            tempEvent.isNormalized = true;\n\n            normalizedEvents.push(tempEvent);\n        }\n        else\n        {\n            normalizedEvents.push(event);\n        }\n\n        return normalizedEvents as PointerEvent[];\n    }\n\n    /**\n     * Normalizes the native {@link https://w3c.github.io/uievents/#interface-wheelevent WheelEvent}.\n     *\n     * The returned {@link PIXI.FederatedWheelEvent} is a shared instance. It will not persist across\n     * multiple native wheel events.\n     * @param nativeEvent - The native wheel event that occurred on the canvas.\n     * @returns A federated wheel event.\n     */\n    protected normalizeWheelEvent(nativeEvent: WheelEvent): FederatedWheelEvent\n    {\n        const event = this.rootWheelEvent;\n\n        this.transferMouseData(event, nativeEvent);\n\n        // When WheelEvent is triggered by scrolling with mouse wheel, reading WheelEvent.deltaMode\n        // before deltaX/deltaY/deltaZ on Firefox will result in WheelEvent.DOM_DELTA_LINE (1),\n        // while reading WheelEvent.deltaMode after deltaX/deltaY/deltaZ on Firefox or reading\n        // in any order on other browsers will result in WheelEvent.DOM_DELTA_PIXEL (0).\n        // Therefore, we need to read WheelEvent.deltaMode after deltaX/deltaY/deltaZ in order to\n        // make its behavior more consistent across browsers.\n        // @see https://github.com/pixijs/pixijs/issues/8970\n        event.deltaX = nativeEvent.deltaX;\n        event.deltaY = nativeEvent.deltaY;\n        event.deltaZ = nativeEvent.deltaZ;\n        event.deltaMode = nativeEvent.deltaMode;\n\n        this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n        event.global.copyFrom(event.screen);\n        event.offset.copyFrom(event.screen);\n\n        event.nativeEvent = nativeEvent;\n        event.type = nativeEvent.type;\n\n        return event;\n    }\n\n    /**\n     * Normalizes the `nativeEvent` into a federateed {@link PIXI.FederatedPointerEvent}.\n     * @param event\n     * @param nativeEvent\n     */\n    private bootstrapEvent(event: FederatedPointerEvent, nativeEvent: PointerEvent): FederatedPointerEvent\n    {\n        event.originalEvent = null;\n        event.nativeEvent = nativeEvent;\n\n        event.pointerId = nativeEvent.pointerId;\n        event.width = nativeEvent.width;\n        event.height = nativeEvent.height;\n        event.isPrimary = nativeEvent.isPrimary;\n        event.pointerType = nativeEvent.pointerType;\n        event.pressure = nativeEvent.pressure;\n        event.tangentialPressure = nativeEvent.tangentialPressure;\n        event.tiltX = nativeEvent.tiltX;\n        event.tiltY = nativeEvent.tiltY;\n        event.twist = nativeEvent.twist;\n        this.transferMouseData(event, nativeEvent);\n\n        this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n        event.global.copyFrom(event.screen);// global = screen for top-level\n        event.offset.copyFrom(event.screen);// EventBoundary recalculates using its rootTarget\n\n        event.isTrusted = nativeEvent.isTrusted;\n        if (event.type === 'pointerleave')\n        {\n            event.type = 'pointerout';\n        }\n        if (event.type.startsWith('mouse'))\n        {\n            event.type = event.type.replace('mouse', 'pointer');\n        }\n        if (event.type.startsWith('touch'))\n        {\n            event.type = TOUCH_TO_POINTER[event.type] || event.type;\n        }\n\n        return event;\n    }\n\n    /**\n     * Transfers base & mouse event data from the {@code nativeEvent} to the federated event.\n     * @param event\n     * @param nativeEvent\n     */\n    private transferMouseData(event: FederatedMouseEvent, nativeEvent: MouseEvent): void\n    {\n        event.isTrusted = nativeEvent.isTrusted;\n        event.srcElement = nativeEvent.srcElement;\n        event.timeStamp = performance.now();\n        event.type = nativeEvent.type;\n\n        event.altKey = nativeEvent.altKey;\n        event.button = nativeEvent.button;\n        event.buttons = nativeEvent.buttons;\n        event.client.x = nativeEvent.clientX;\n        event.client.y = nativeEvent.clientY;\n        event.ctrlKey = nativeEvent.ctrlKey;\n        event.metaKey = nativeEvent.metaKey;\n        event.movement.x = nativeEvent.movementX;\n        event.movement.y = nativeEvent.movementY;\n        event.page.x = nativeEvent.pageX;\n        event.page.y = nativeEvent.pageY;\n        event.relatedTarget = null;\n        event.shiftKey = nativeEvent.shiftKey;\n    }\n}\n\ninterface CrossCSSStyleDeclaration extends CSSStyleDeclaration\n{\n    msContentZooming: string;\n    msTouchAction: string;\n}\n\ninterface PixiPointerEvent extends PointerEvent\n{\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    isNormalized: boolean;\n    type: string;\n}\n\ninterface PixiTouch extends Touch\n{\n    button: number;\n    buttons: number;\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    layerX: number;\n    layerY: number;\n    offsetX: number;\n    offsetY: number;\n    isNormalized: boolean;\n    type: string;\n}\n\nextensions.add(EventSystem);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}