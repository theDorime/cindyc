{"ast":null,"code":"import { ExtensionType, extensions } from '@pixi/extensions';\nclass TransformFeedbackSystem {\n  constructor(renderer) {\n    this.renderer = renderer;\n  }\n  contextChange() {\n    this.gl = this.renderer.gl;\n    this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n  }\n  bind(transformFeedback) {\n    const {\n      gl,\n      CONTEXT_UID\n    } = this;\n    const glTransformFeedback = transformFeedback._glTransformFeedbacks[CONTEXT_UID] || this.createGLTransformFeedback(transformFeedback);\n    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, glTransformFeedback);\n  }\n  unbind() {\n    const {\n      gl\n    } = this;\n    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n  }\n  beginTransformFeedback(drawMode, shader) {\n    const {\n      gl,\n      renderer\n    } = this;\n    if (shader) {\n      renderer.shader.bind(shader);\n    }\n    gl.beginTransformFeedback(drawMode);\n  }\n  endTransformFeedback() {\n    const {\n      gl\n    } = this;\n    gl.endTransformFeedback();\n  }\n  createGLTransformFeedback(tf) {\n    const {\n      gl,\n      renderer,\n      CONTEXT_UID\n    } = this;\n    const glTransformFeedback = gl.createTransformFeedback();\n    tf._glTransformFeedbacks[CONTEXT_UID] = glTransformFeedback;\n    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, glTransformFeedback);\n    for (let i = 0; i < tf.buffers.length; i++) {\n      const buffer = tf.buffers[i];\n      if (!buffer) continue;\n      renderer.buffer.update(buffer);\n      buffer._glBuffers[CONTEXT_UID].refCount++;\n      gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, i, buffer._glBuffers[CONTEXT_UID].buffer || null);\n    }\n    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n    tf.disposeRunner.add(this);\n    return glTransformFeedback;\n  }\n  disposeTransformFeedback(tf, contextLost) {\n    const glTF = tf._glTransformFeedbacks[this.CONTEXT_UID];\n    const gl = this.gl;\n    tf.disposeRunner.remove(this);\n    const bufferSystem = this.renderer.buffer;\n    if (bufferSystem) {\n      for (let i = 0; i < tf.buffers.length; i++) {\n        const buffer = tf.buffers[i];\n        if (!buffer) continue;\n        const buf = buffer._glBuffers[this.CONTEXT_UID];\n        if (buf) {\n          buf.refCount--;\n          if (buf.refCount === 0 && !contextLost) {\n            bufferSystem.dispose(buffer, contextLost);\n          }\n        }\n      }\n    }\n    if (!glTF) {\n      return;\n    }\n    if (!contextLost) {\n      gl.deleteTransformFeedback(glTF);\n    }\n    delete tf._glTransformFeedbacks[this.CONTEXT_UID];\n  }\n  destroy() {\n    this.renderer = null;\n  }\n}\nTransformFeedbackSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"transformFeedback\"\n};\nextensions.add(TransformFeedbackSystem);\nexport { TransformFeedbackSystem };","map":{"version":3,"names":["TransformFeedbackSystem","constructor","renderer","contextChange","gl","CONTEXT_UID","bind","transformFeedback","glTransformFeedback","_glTransformFeedbacks","createGLTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","unbind","beginTransformFeedback","drawMode","shader","endTransformFeedback","tf","createTransformFeedback","i","buffers","length","buffer","update","_glBuffers","refCount","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","disposeRunner","add","disposeTransformFeedback","contextLost","glTF","remove","bufferSystem","buf","dispose","deleteTransformFeedback","destroy","extension","type","ExtensionType","RendererSystem","name","extensions"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\transformFeedback\\TransformFeedbackSystem.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\n\nimport type { DRAW_MODES } from '@pixi/constants';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { IRenderingContext } from '../IRenderer';\nimport type { Renderer } from '../Renderer';\nimport type { Shader } from '../shader/Shader';\nimport type { ISystem } from '../system/ISystem';\nimport type { TransformFeedback } from './TransformFeedback';\n\n/**\n * TransformFeedbackSystem provides TransformFeedback of WebGL2\n * https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback\n *\n * For example, you can use TransformFeedbackSystem to implement GPU Particle or\n * general purpose computing on GPU (aka GPGPU).\n *\n * It also manages a lifetime of GLTransformFeedback object\n * @memberof PIXI\n */\nexport class TransformFeedbackSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type:  ExtensionType.RendererSystem,\n        name: 'transformFeedback',\n    };\n\n    CONTEXT_UID: number;\n    gl: IRenderingContext;\n\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        this.gl = this.renderer.gl;\n\n        // TODO fill out...\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n    }\n\n    /**\n     * Bind TransformFeedback and buffers\n     * @param transformFeedback - TransformFeedback to bind\n     */\n    bind(transformFeedback: TransformFeedback)\n    {\n        const { gl, CONTEXT_UID } = this;\n\n        const glTransformFeedback = transformFeedback._glTransformFeedbacks[CONTEXT_UID]\n          || this.createGLTransformFeedback(transformFeedback);\n\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, glTransformFeedback);\n    }\n\n    /** Unbind TransformFeedback */\n    unbind()\n    {\n        const { gl } = this;\n\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n    }\n\n    /**\n     * Begin TransformFeedback\n     * @param drawMode - DrawMode for TransformFeedback\n     * @param shader - A Shader used by TransformFeedback. Current bound shader will be used if not provided.\n     */\n    beginTransformFeedback(drawMode: DRAW_MODES, shader?: Shader)\n    {\n        const { gl, renderer } = this;\n\n        if (shader)\n        {\n            renderer.shader.bind(shader);\n        }\n\n        gl.beginTransformFeedback(drawMode);\n    }\n\n    /** End TransformFeedback */\n    endTransformFeedback()\n    {\n        const { gl } = this;\n\n        gl.endTransformFeedback();\n    }\n\n    /**\n     * Create TransformFeedback and bind buffers\n     * @param tf - TransformFeedback\n     * @returns WebGLTransformFeedback\n     */\n    protected createGLTransformFeedback(tf: TransformFeedback)\n    {\n        const { gl, renderer, CONTEXT_UID } = this;\n\n        const glTransformFeedback = gl.createTransformFeedback();\n\n        tf._glTransformFeedbacks[CONTEXT_UID] = glTransformFeedback;\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, glTransformFeedback);\n        for (let i = 0; i < tf.buffers.length; i++)\n        {\n            const buffer = tf.buffers[i];\n\n            if (!buffer) continue;\n\n            renderer.buffer.update(buffer);\n            buffer._glBuffers[CONTEXT_UID].refCount++;\n\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, i, buffer._glBuffers[CONTEXT_UID].buffer || null);\n        }\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\n        tf.disposeRunner.add(this);\n\n        return glTransformFeedback;\n    }\n\n    /**\n     * Disposes TransfromFeedback\n     * @param {PIXI.TransformFeedback} tf - TransformFeedback\n     * @param {boolean} [contextLost=false] - If context was lost, we suppress delete TransformFeedback\n     */\n    disposeTransformFeedback(tf: TransformFeedback, contextLost?: boolean): void\n    {\n        const glTF = tf._glTransformFeedbacks[this.CONTEXT_UID];\n        const gl = this.gl;\n\n        tf.disposeRunner.remove(this);\n\n        const bufferSystem = this.renderer.buffer;\n\n        // bufferSystem may have already been destroyed..\n        // if this is the case, there is no need to destroy the geometry buffers...\n        // they already have been!\n        if (bufferSystem)\n        {\n            for (let i = 0; i < tf.buffers.length; i++)\n            {\n                const buffer = tf.buffers[i];\n\n                if (!buffer) continue;\n\n                const buf = buffer._glBuffers[this.CONTEXT_UID];\n\n                // my be null as context may have changed right before the dispose is called\n                if (buf)\n                {\n                    buf.refCount--;\n                    if (buf.refCount === 0 && !contextLost)\n                    {\n                        bufferSystem.dispose(buffer, contextLost);\n                    }\n                }\n            }\n        }\n\n        if (!glTF)\n        {\n            return;\n        }\n\n        if (!contextLost)\n        {\n            gl.deleteTransformFeedback(glTF);\n        }\n\n        delete tf._glTransformFeedbacks[this.CONTEXT_UID];\n    }\n\n    destroy(): void\n    {\n        // @TODO: Destroy managed TransformFeedbacks\n        this.renderer = null;\n    }\n}\n\nextensions.add(TransformFeedbackSystem);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}