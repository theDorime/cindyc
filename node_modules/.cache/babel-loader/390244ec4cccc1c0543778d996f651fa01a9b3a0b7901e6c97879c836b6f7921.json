{"ast":null,"code":"import { Buffer } from '../geometry/Buffer.mjs';\nimport { Geometry } from '../geometry/Geometry.mjs';\nclass QuadUv extends Geometry {\n  constructor() {\n    super();\n    this.vertices = new Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]);\n    this.uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    this.vertexBuffer = new Buffer(this.vertices);\n    this.uvBuffer = new Buffer(this.uvs);\n    this.addAttribute(\"aVertexPosition\", this.vertexBuffer).addAttribute(\"aTextureCoord\", this.uvBuffer).addIndex([0, 1, 2, 0, 2, 3]);\n  }\n  map(targetTextureFrame, destinationFrame) {\n    let x = 0;\n    let y = 0;\n    this.uvs[0] = x;\n    this.uvs[1] = y;\n    this.uvs[2] = x + destinationFrame.width / targetTextureFrame.width;\n    this.uvs[3] = y;\n    this.uvs[4] = x + destinationFrame.width / targetTextureFrame.width;\n    this.uvs[5] = y + destinationFrame.height / targetTextureFrame.height;\n    this.uvs[6] = x;\n    this.uvs[7] = y + destinationFrame.height / targetTextureFrame.height;\n    x = destinationFrame.x;\n    y = destinationFrame.y;\n    this.vertices[0] = x;\n    this.vertices[1] = y;\n    this.vertices[2] = x + destinationFrame.width;\n    this.vertices[3] = y;\n    this.vertices[4] = x + destinationFrame.width;\n    this.vertices[5] = y + destinationFrame.height;\n    this.vertices[6] = x;\n    this.vertices[7] = y + destinationFrame.height;\n    this.invalidate();\n    return this;\n  }\n  invalidate() {\n    this.vertexBuffer._updateID++;\n    this.uvBuffer._updateID++;\n    return this;\n  }\n}\nexport { QuadUv };","map":{"version":3,"names":["QuadUv","Geometry","constructor","vertices","Float32Array","uvs","vertexBuffer","Buffer","uvBuffer","addAttribute","addIndex","map","targetTextureFrame","destinationFrame","x","y","width","height","invalidate","_updateID"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\utils\\QuadUv.ts"],"sourcesContent":["import { Buffer } from '../geometry/Buffer';\nimport { Geometry } from '../geometry/Geometry';\n\nimport type { Rectangle } from '@pixi/math';\n\n/**\n * Helper class to create a quad with uvs like in v4\n * @memberof PIXI\n */\nexport class QuadUv extends Geometry\n{\n    vertexBuffer: Buffer;\n    uvBuffer: Buffer;\n\n    /** An array of vertices. */\n    vertices: Float32Array;\n\n    /** The Uvs of the quad. */\n    uvs: Float32Array;\n\n    constructor()\n    {\n        super();\n\n        this.vertices = new Float32Array([\n            -1, -1,\n            1, -1,\n            1, 1,\n            -1, 1,\n        ]);\n\n        this.uvs = new Float32Array([\n            0, 0,\n            1, 0,\n            1, 1,\n            0, 1,\n        ]);\n\n        this.vertexBuffer = new Buffer(this.vertices);\n        this.uvBuffer = new Buffer(this.uvs);\n\n        this.addAttribute('aVertexPosition', this.vertexBuffer)\n            .addAttribute('aTextureCoord', this.uvBuffer)\n            .addIndex([0, 1, 2, 0, 2, 3]);\n    }\n\n    /**\n     * Maps two Rectangle to the quad.\n     * @param targetTextureFrame - The first rectangle\n     * @param destinationFrame - The second rectangle\n     * @returns - Returns itself.\n     */\n    map(targetTextureFrame: Rectangle, destinationFrame: Rectangle): this\n    {\n        let x = 0; // destinationFrame.x / targetTextureFrame.width;\n        let y = 0; // destinationFrame.y / targetTextureFrame.height;\n\n        this.uvs[0] = x;\n        this.uvs[1] = y;\n\n        this.uvs[2] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[3] = y;\n\n        this.uvs[4] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[5] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        this.uvs[6] = x;\n        this.uvs[7] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        x = destinationFrame.x;\n        y = destinationFrame.y;\n\n        this.vertices[0] = x;\n        this.vertices[1] = y;\n\n        this.vertices[2] = x + destinationFrame.width;\n        this.vertices[3] = y;\n\n        this.vertices[4] = x + destinationFrame.width;\n        this.vertices[5] = y + destinationFrame.height;\n\n        this.vertices[6] = x;\n        this.vertices[7] = y + destinationFrame.height;\n\n        this.invalidate();\n\n        return this;\n    }\n\n    /**\n     * Legacy upload method, just marks buffers dirty.\n     * @returns - Returns itself.\n     */\n    invalidate(): this\n    {\n        this.vertexBuffer._updateID++;\n        this.uvBuffer._updateID++;\n\n        return this;\n    }\n}\n"],"mappings":";;AASO,MAAMA,MAAA,SAAeC,QAC5B;EAUIC,WACAA,CAAA;IACU;IAED,KAAAC,QAAA,GAAW,IAAIC,YAAa,EAC7B,IAAI,IACJ,GAAG,IACH,GAAG,GACH,IAAI,EACP;IAEI,KAAAC,GAAA,GAAM,IAAID,YAAa,EACxB,GAAG,GACH,GAAG,GACH,GAAG,GACH,GAAG,EACN;IAED,KAAKE,YAAe,OAAIC,MAAO,MAAKJ,QAAQ;IAC5C,KAAKK,QAAW,OAAID,MAAO,MAAKF,GAAG;IAEnC,KAAKI,YAAA,CAAa,iBAAmB,OAAKH,YAAY,CACjD,CAAAG,YAAA,CAAa,iBAAiB,IAAK,CAAAD,QAAQ,CAC3C,CAAAE,QAAA,CAAS,CAAC,CAAG,KAAG,GAAG,CAAG,KAAG,CAAC,CAAC;EAAA;EASpCC,IAAIC,kBAAA,EAA+BC,gBACnC;IACI,IAAIC,CAAI;IACR,IAAIC,CAAI;IAER,KAAKV,GAAA,CAAI,CAAK,IAAAS,CAAA;IACd,KAAKT,GAAA,CAAI,CAAK,IAAAU,CAAA;IAEd,KAAKV,GAAI,MAAKS,CAAK,GAAAD,gBAAA,CAAiBG,KAAA,GAAQJ,kBAAmB,CAAAI,KAAA;IAC/D,KAAKX,GAAA,CAAI,CAAK,IAAAU,CAAA;IAEd,KAAKV,GAAI,MAAKS,CAAK,GAAAD,gBAAA,CAAiBG,KAAA,GAAQJ,kBAAmB,CAAAI,KAAA;IAC/D,KAAKX,GAAI,MAAKU,CAAK,GAAAF,gBAAA,CAAiBI,MAAA,GAASL,kBAAmB,CAAAK,MAAA;IAEhE,KAAKZ,GAAA,CAAI,CAAK,IAAAS,CAAA;IACd,KAAKT,GAAI,MAAKU,CAAK,GAAAF,gBAAA,CAAiBI,MAAA,GAASL,kBAAmB,CAAAK,MAAA;IAEhEH,CAAA,GAAID,gBAAiB,CAAAC,CAAA;IACrBC,CAAA,GAAIF,gBAAiB,CAAAE,CAAA;IAErB,KAAKZ,QAAA,CAAS,CAAK,IAAAW,CAAA;IACnB,KAAKX,QAAA,CAAS,CAAK,IAAAY,CAAA;IAEd,KAAAZ,QAAA,CAAS,CAAK,IAAAW,CAAA,GAAID,gBAAiB,CAAAG,KAAA;IACxC,KAAKb,QAAA,CAAS,CAAK,IAAAY,CAAA;IAEd,KAAAZ,QAAA,CAAS,CAAK,IAAAW,CAAA,GAAID,gBAAiB,CAAAG,KAAA;IACnC,KAAAb,QAAA,CAAS,CAAK,IAAAY,CAAA,GAAIF,gBAAiB,CAAAI,MAAA;IAExC,KAAKd,QAAA,CAAS,CAAK,IAAAW,CAAA;IACd,KAAAX,QAAA,CAAS,CAAK,IAAAY,CAAA,GAAIF,gBAAiB,CAAAI,MAAA;IAExC,KAAKC,UAAW;IAET;EAAA;EAOXA,UACAA,CAAA;IACI,KAAKZ,YAAa,CAAAa,SAAA;IAClB,KAAKX,QAAS,CAAAW,SAAA;IAEP;EAAA;AAEf"},"metadata":{},"sourceType":"module","externalDependencies":[]}