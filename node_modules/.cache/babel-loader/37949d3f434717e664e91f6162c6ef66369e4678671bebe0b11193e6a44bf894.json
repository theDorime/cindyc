{"ast":null,"code":"import { utils } from '@pixi/core';\nfunction fixOrientation(points) {\n  let hole = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const m = points.length;\n  if (m < 6) {\n    return;\n  }\n  let area = 0;\n  for (let i = 0, x1 = points[m - 2], y1 = points[m - 1]; i < m; i += 2) {\n    const x2 = points[i];\n    const y2 = points[i + 1];\n    area += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n  if (!hole && area > 0 || hole && area <= 0) {\n    const n = m / 2;\n    for (let i = n + n % 2; i < m; i += 2) {\n      const i1 = m - i - 2;\n      const i2 = m - i - 1;\n      const i3 = i;\n      const i4 = i + 1;\n      [points[i1], points[i3]] = [points[i3], points[i1]];\n      [points[i2], points[i4]] = [points[i4], points[i2]];\n    }\n  }\n}\nconst buildPoly = {\n  build(graphicsData) {\n    graphicsData.points = graphicsData.shape.points.slice();\n  },\n  triangulate(graphicsData, graphicsGeometry) {\n    let points = graphicsData.points;\n    const holes = graphicsData.holes;\n    const verts = graphicsGeometry.points;\n    const indices = graphicsGeometry.indices;\n    if (points.length >= 6) {\n      fixOrientation(points, false);\n      const holeArray = [];\n      for (let i = 0; i < holes.length; i++) {\n        const hole = holes[i];\n        fixOrientation(hole.points, true);\n        holeArray.push(points.length / 2);\n        points = points.concat(hole.points);\n      }\n      const triangles = utils.earcut(points, holeArray, 2);\n      if (!triangles) {\n        return;\n      }\n      const vertPos = verts.length / 2;\n      for (let i = 0; i < triangles.length; i += 3) {\n        indices.push(triangles[i] + vertPos);\n        indices.push(triangles[i + 1] + vertPos);\n        indices.push(triangles[i + 2] + vertPos);\n      }\n      for (let i = 0; i < points.length; i++) {\n        verts.push(points[i]);\n      }\n    }\n  }\n};\nexport { buildPoly };","map":{"version":3,"names":["fixOrientation","points","hole","arguments","length","undefined","m","area","i","x1","y1","x2","y2","n","i1","i2","i3","i4","buildPoly","build","graphicsData","shape","slice","triangulate","graphicsGeometry","holes","verts","indices","holeArray","push","concat","triangles","utils","earcut","vertPos"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\graphics\\src\\utils\\buildPoly.ts"],"sourcesContent":["import { utils } from '@pixi/core';\n\nimport type { Polygon } from '@pixi/core';\nimport type { IShapeBuildCommand } from './IShapeBuildCommand';\n\nfunction fixOrientation(points: number[], hole = false)\n{\n    const m = points.length;\n\n    if (m < 6)\n    {\n        return;\n    }\n\n    let area = 0;\n\n    for (let i = 0, x1 = points[m - 2], y1 = points[m - 1]; i < m; i += 2)\n    {\n        const x2 = points[i];\n        const y2 = points[i + 1];\n\n        area += (x2 - x1) * (y2 + y1);\n\n        x1 = x2;\n        y1 = y2;\n    }\n\n    if ((!hole && area > 0) || (hole && area <= 0))\n    {\n        const n = m / 2;\n\n        for (let i = n + (n % 2); i < m; i += 2)\n        {\n            const i1 = m - i - 2;\n            const i2 = m - i - 1;\n            const i3 = i;\n            const i4 = i + 1;\n\n            [points[i1], points[i3]] = [points[i3], points[i1]];\n            [points[i2], points[i4]] = [points[i4], points[i2]];\n        }\n    }\n}\n/**\n * Builds a polygon to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildPoly: IShapeBuildCommand = {\n\n    build(graphicsData)\n    {\n        graphicsData.points = (graphicsData.shape as Polygon).points.slice();\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        let points = graphicsData.points;\n        const holes = graphicsData.holes;\n        const verts = graphicsGeometry.points;\n        const indices = graphicsGeometry.indices;\n\n        if (points.length >= 6)\n        {\n            fixOrientation(points, false);\n\n            const holeArray = [];\n            // Process holes..\n\n            for (let i = 0; i < holes.length; i++)\n            {\n                const hole = holes[i];\n\n                fixOrientation(hole.points, true);\n\n                holeArray.push(points.length / 2);\n                points = points.concat(hole.points);\n            }\n\n            // sort color\n            const triangles = utils.earcut(points, holeArray, 2);\n\n            if (!triangles)\n            {\n                return;\n            }\n\n            const vertPos = verts.length / 2;\n\n            for (let i = 0; i < triangles.length; i += 3)\n            {\n                indices.push(triangles[i] + vertPos);\n                indices.push(triangles[i + 1] + vertPos);\n                indices.push(triangles[i + 2] + vertPos);\n            }\n\n            for (let i = 0; i < points.length; i++)\n            {\n                verts.push(points[i]);\n            }\n        }\n    },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}