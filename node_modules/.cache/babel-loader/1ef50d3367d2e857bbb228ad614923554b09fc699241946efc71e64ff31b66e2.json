{"ast":null,"code":"import { PRECISION } from '@pixi/constants';\nimport { ProgramCache, isMobile } from '@pixi/utils';\nimport defaultFragment from './defaultProgram.mjs';\nimport defaultVertex from './defaultProgram2.mjs';\nimport './utils/index.mjs';\nimport { setPrecision } from './utils/setPrecision.mjs';\nimport { getMaxFragmentPrecision } from './utils/getMaxFragmentPrecision.mjs';\nlet UID = 0;\nconst nameCache = {};\nconst _Program = class {\n  constructor(vertexSrc, fragmentSrc) {\n    let name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"pixi-shader\";\n    let extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    this.extra = {};\n    this.id = UID++;\n    this.vertexSrc = vertexSrc || _Program.defaultVertexSrc;\n    this.fragmentSrc = fragmentSrc || _Program.defaultFragmentSrc;\n    this.vertexSrc = this.vertexSrc.trim();\n    this.fragmentSrc = this.fragmentSrc.trim();\n    this.extra = extra;\n    if (this.vertexSrc.substring(0, 8) !== \"#version\") {\n      name = name.replace(/\\s+/g, \"-\");\n      if (nameCache[name]) {\n        nameCache[name]++;\n        name += `-${nameCache[name]}`;\n      } else {\n        nameCache[name] = 1;\n      }\n      this.vertexSrc = `#define SHADER_NAME ${name}\n${this.vertexSrc}`;\n      this.fragmentSrc = `#define SHADER_NAME ${name}\n${this.fragmentSrc}`;\n      this.vertexSrc = setPrecision(this.vertexSrc, _Program.defaultVertexPrecision, PRECISION.HIGH);\n      this.fragmentSrc = setPrecision(this.fragmentSrc, _Program.defaultFragmentPrecision, getMaxFragmentPrecision());\n    }\n    this.glPrograms = {};\n    this.syncUniforms = null;\n  }\n  static get defaultVertexSrc() {\n    return defaultVertex;\n  }\n  static get defaultFragmentSrc() {\n    return defaultFragment;\n  }\n  static from(vertexSrc, fragmentSrc, name) {\n    const key = vertexSrc + fragmentSrc;\n    let program = ProgramCache[key];\n    if (!program) {\n      ProgramCache[key] = program = new _Program(vertexSrc, fragmentSrc, name);\n    }\n    return program;\n  }\n};\nlet Program = _Program;\nProgram.defaultVertexPrecision = PRECISION.HIGH;\nProgram.defaultFragmentPrecision = isMobile.apple.device ? PRECISION.HIGH : PRECISION.MEDIUM;\nexport { Program };","map":{"version":3,"names":["UID","nameCache","_Program","constructor","vertexSrc","fragmentSrc","name","arguments","length","undefined","extra","id","defaultVertexSrc","defaultFragmentSrc","trim","substring","replace","setPrecision","defaultVertexPrecision","PRECISION","HIGH","defaultFragmentPrecision","getMaxFragmentPrecision","glPrograms","syncUniforms","defaultVertex","defaultFragment","from","key","program","ProgramCache","Program","isMobile","apple","device","MEDIUM"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\shader\\Program.ts"],"sourcesContent":["import { PRECISION } from '@pixi/constants';\nimport { isMobile, ProgramCache } from '@pixi/utils';\nimport defaultFragment from './defaultProgram.frag';\nimport defaultVertex from './defaultProgram.vert';\nimport { getMaxFragmentPrecision, setPrecision } from './utils';\n\nimport type { GLProgram } from './GLProgram';\n\nlet UID = 0;\n\nconst nameCache: { [key: string]: number } = {};\n\nexport interface IAttributeData\n{\n    type: string;\n    size: number;\n    location: number;\n    name: string;\n}\n\nexport interface IUniformData\n{\n    index: number;\n    type: string;\n    size: number;\n    isArray: boolean;\n    value: any;\n    name: string;\n}\n\nexport interface IProgramExtraData\n{\n    transformFeedbackVaryings?: {\n        names: string[],\n        bufferMode: 'separate' | 'interleaved'\n    }\n}\n\n/**\n * Helper class to create a shader program.\n * @memberof PIXI\n */\nexport class Program\n{\n    /**\n     * Default specify float precision in vertex shader.\n     * @static\n     * @type {PIXI.PRECISION}\n     * @default PIXI.PRECISION.HIGH\n     */\n    public static defaultVertexPrecision: PRECISION = PRECISION.HIGH;\n\n    /**\n     * Default specify float precision in fragment shader.\n     * iOS is best set at highp due to https://github.com/pixijs/pixijs/issues/3742\n     * @static\n     * @type {PIXI.PRECISION}\n     * @default PIXI.PRECISION.MEDIUM\n     */\n    public static defaultFragmentPrecision: PRECISION = isMobile.apple.device\n        ? PRECISION.HIGH\n        : PRECISION.MEDIUM;\n\n    public id: number;\n\n    /** Source code for the vertex shader. */\n    public vertexSrc: string;\n\n    /** Source code for the fragment shader. */\n    public fragmentSrc: string;\n\n    nameCache: any;\n    glPrograms: { [ key: number ]: GLProgram};\n    syncUniforms: any;\n\n    /** Assigned when a program is first bound to the shader system. */\n    attributeData: { [key: string]: IAttributeData};\n\n    /** Assigned when a program is first bound to the shader system. */\n    uniformData: {[key: string]: IUniformData};\n\n    extra: IProgramExtraData = {};\n\n    /**\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param name - Name for shader\n     * @param extra - Extra data for shader\n     */\n    constructor(vertexSrc?: string, fragmentSrc?: string, name = 'pixi-shader', extra: IProgramExtraData = {})\n    {\n        this.id = UID++;\n        this.vertexSrc = vertexSrc || Program.defaultVertexSrc;\n        this.fragmentSrc = fragmentSrc || Program.defaultFragmentSrc;\n\n        this.vertexSrc = this.vertexSrc.trim();\n        this.fragmentSrc = this.fragmentSrc.trim();\n\n        this.extra = extra;\n\n        if (this.vertexSrc.substring(0, 8) !== '#version')\n        {\n            name = name.replace(/\\s+/g, '-');\n\n            if (nameCache[name])\n            {\n                nameCache[name]++;\n                name += `-${nameCache[name]}`;\n            }\n            else\n            {\n                nameCache[name] = 1;\n            }\n\n            this.vertexSrc = `#define SHADER_NAME ${name}\\n${this.vertexSrc}`;\n            this.fragmentSrc = `#define SHADER_NAME ${name}\\n${this.fragmentSrc}`;\n\n            this.vertexSrc = setPrecision(\n                this.vertexSrc,\n                Program.defaultVertexPrecision,\n                PRECISION.HIGH\n            );\n            this.fragmentSrc = setPrecision(\n                this.fragmentSrc,\n                Program.defaultFragmentPrecision,\n                getMaxFragmentPrecision()\n            );\n        }\n\n        // currently this does not extract structs only default types\n        // this is where we store shader references..\n        this.glPrograms = {};\n\n        this.syncUniforms = null;\n    }\n\n    /**\n     * The default vertex shader source.\n     * @readonly\n     */\n    static get defaultVertexSrc(): string\n    {\n        return defaultVertex;\n    }\n\n    /**\n     * The default fragment shader source.\n     * @readonly\n     */\n    static get defaultFragmentSrc(): string\n    {\n        return defaultFragment;\n    }\n\n    /**\n     * A short hand function to create a program based of a vertex and fragment shader.\n     *\n     * This method will also check to see if there is a cached program.\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param name - Name for shader\n     * @returns A shiny new PixiJS shader program!\n     */\n    static from(vertexSrc?: string, fragmentSrc?: string, name?: string): Program\n    {\n        const key = vertexSrc + fragmentSrc;\n\n        let program = ProgramCache[key];\n\n        if (!program)\n        {\n            ProgramCache[key] = program = new Program(vertexSrc, fragmentSrc, name);\n        }\n\n        return program;\n    }\n}\n"],"mappings":";;;;;;;AAQA,IAAIA,GAAM;AAEV,MAAMC,SAAA,GAAuC,EAAC;AAgCvC,MAAMC,QAAA,GAAN,MACP;EA8CIC,YAAYC,SAAoB,EAAAC,WAAA,EAChC;IAAA,IADsDC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAO,aAAe;IAAA,IAAAG,KAAA,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA2B,EACvG;IATA,KAAAG,KAAA,GAA2B,EAAC;IAUxB,KAAKC,EAAK,GAAAX,GAAA;IACL,KAAAI,SAAA,GAAYA,SAAA,IAAaF,QAAQ,CAAAU,gBAAA;IACjC,KAAAP,WAAA,GAAcA,WAAA,IAAeH,QAAQ,CAAAW,kBAAA;IAErC,KAAAT,SAAA,GAAY,IAAK,CAAAA,SAAA,CAAUU,IAAK;IAChC,KAAAT,WAAA,GAAc,IAAK,CAAAA,WAAA,CAAYS,IAAK;IAEzC,KAAKJ,KAAQ,GAAAA,KAAA;IAEb,IAAI,KAAKN,SAAU,CAAAW,SAAA,CAAU,CAAG,GAAC,MAAM,UACvC;MACWT,IAAA,GAAAA,IAAA,CAAKU,OAAQ,SAAQ,GAAG;MAE/B,IAAIf,SAAA,CAAUK,IACd;QACcL,SAAA,CAAAK,IAAA;QACVA,IAAA,IAAQ,IAAIL,SAAU,CAAAK,IAAA;MAAA,CAG1B;QACIL,SAAA,CAAUK,IAAQ;MAAA;MAGtB,KAAKF,SAAA,GAAmC,uBAAAE,IAAA;AAAA,EAAS,IAAK,CAAAF,SAAA;MACtD,KAAKC,WAAA,GAAqC,uBAAAC,IAAA;AAAA,EAAS,IAAK,CAAAD,WAAA;MAExD,KAAKD,SAAA,GAAYa,YACb,MAAKb,SAAA,EACLF,QAAQ,CAAAgB,sBAAA,EACRC,SAAA,CAAUC,IACd;MACA,KAAKf,WAAA,GAAcY,YACf,MAAKZ,WAAA,EACLH,QAAQ,CAAAmB,wBAAA,EACRC,uBAAA,EACJ;IAAA;IAKJ,KAAKC,UAAA,GAAa,EAAC;IAEnB,KAAKC,YAAe;EAAA;EAOxB,WAAWZ,gBACXA,CAAA;IACW,OAAAa,aAAA;EAAA;EAOX,WAAWZ,kBACXA,CAAA;IACW,OAAAa,eAAA;EAAA;EAYX,OAAOC,KAAKvB,SAAoB,EAAAC,WAAA,EAAsBC,IACtD;IACI,MAAMsB,GAAA,GAAMxB,SAAY,GAAAC,WAAA;IAExB,IAAIwB,OAAA,GAAUC,YAAa,CAAAF,GAAA;IAE3B,IAAI,CAACC,OACL;MACIC,YAAA,CAAaF,GAAA,IAAOC,OAAU,OAAI3B,QAAQ,CAAAE,SAAA,EAAWC,WAAA,EAAaC,IAAI;IAAA;IAGnE,OAAAuB,OAAA;EAAA;AAEf;AAtIO,IAAME,OAAN,GAAA7B,QAAA;AAQH6B,OARS,CAQKb,sBAAA,GAAoCC,SAAU,CAAAC,IAAA;AARnDW,OAAA,CAiBKV,wBAAsC,GAAAW,QAAA,CAASC,KAAA,CAAMC,MAC7D,GAAAf,SAAA,CAAUC,IAAA,GACVD,SAAU,CAAAgB,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}