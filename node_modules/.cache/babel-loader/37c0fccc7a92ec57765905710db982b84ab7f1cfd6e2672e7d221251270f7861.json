{"ast":null,"code":"import { utils, extensions, ExtensionType } from '@pixi/core';\nimport { BackgroundLoader } from './BackgroundLoader.mjs';\nimport { Cache } from './cache/Cache.mjs';\nimport { Loader } from './loader/Loader.mjs';\nimport './loader/parsers/index.mjs';\nimport { Resolver } from './resolver/Resolver.mjs';\nimport { convertToList } from './utils/convertToList.mjs';\nimport { isSingleItem } from './utils/isSingleItem.mjs';\nimport { loadTextures } from './loader/parsers/textures/loadTextures.mjs';\nclass AssetsClass {\n  constructor() {\n    this._detections = [];\n    this._initialized = false;\n    this.resolver = new Resolver();\n    this.loader = new Loader();\n    this.cache = Cache;\n    this._backgroundLoader = new BackgroundLoader(this.loader);\n    this._backgroundLoader.active = true;\n    this.reset();\n  }\n  async init() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this._initialized) {\n      console.warn(\"[Assets]AssetManager already initialized, did you load before calling this Asset.init()?\");\n      return;\n    }\n    this._initialized = true;\n    if (options.defaultSearchParams) {\n      this.resolver.setDefaultSearchParams(options.defaultSearchParams);\n    }\n    if (options.basePath) {\n      this.resolver.basePath = options.basePath;\n    }\n    if (options.bundleIdentifier) {\n      this.resolver.setBundleIdentifier(options.bundleIdentifier);\n    }\n    if (options.manifest) {\n      let manifest = options.manifest;\n      if (typeof manifest === \"string\") {\n        manifest = await this.load(manifest);\n      }\n      this.resolver.addManifest(manifest);\n    }\n    const resolutionPref = options.texturePreference?.resolution ?? 1;\n    const resolution = typeof resolutionPref === \"number\" ? [resolutionPref] : resolutionPref;\n    let formats = [];\n    if (options.texturePreference?.format) {\n      const formatPref = options.texturePreference?.format;\n      formats = typeof formatPref === \"string\" ? [formatPref] : formatPref;\n      for (const detection of this._detections) {\n        if (!(await detection.test())) {\n          formats = await detection.remove(formats);\n        }\n      }\n    } else {\n      for (const detection of this._detections) {\n        if (await detection.test()) {\n          formats = await detection.add(formats);\n        }\n      }\n    }\n    this.resolver.prefer({\n      params: {\n        format: formats,\n        resolution\n      }\n    });\n    if (options.preferences) {\n      this.setPreferences(options.preferences);\n    }\n  }\n  add(keysIn, assetsIn, data) {\n    this.resolver.add(keysIn, assetsIn, data);\n  }\n  async load(urls, onProgress) {\n    if (!this._initialized) {\n      await this.init();\n    }\n    const singleAsset = isSingleItem(urls);\n    const urlArray = convertToList(urls).map(url => {\n      if (typeof url !== \"string\") {\n        this.resolver.add(url.src, url);\n        return url.src;\n      }\n      if (!this.resolver.hasKey(url)) {\n        this.resolver.add(url, url);\n      }\n      return url;\n    });\n    const resolveResults = this.resolver.resolve(urlArray);\n    const out = await this._mapLoadToResolve(resolveResults, onProgress);\n    return singleAsset ? out[urlArray[0]] : out;\n  }\n  addBundle(bundleId, assets) {\n    this.resolver.addBundle(bundleId, assets);\n  }\n  async loadBundle(bundleIds, onProgress) {\n    if (!this._initialized) {\n      await this.init();\n    }\n    let singleAsset = false;\n    if (typeof bundleIds === \"string\") {\n      singleAsset = true;\n      bundleIds = [bundleIds];\n    }\n    const resolveResults = this.resolver.resolveBundle(bundleIds);\n    const out = {};\n    const keys = Object.keys(resolveResults);\n    let count = 0;\n    let total = 0;\n    const _onProgress = () => {\n      onProgress?.(++count / total);\n    };\n    const promises = keys.map(bundleId => {\n      const resolveResult = resolveResults[bundleId];\n      total += Object.keys(resolveResult).length;\n      return this._mapLoadToResolve(resolveResult, _onProgress).then(resolveResult2 => {\n        out[bundleId] = resolveResult2;\n      });\n    });\n    await Promise.all(promises);\n    return singleAsset ? out[bundleIds[0]] : out;\n  }\n  async backgroundLoad(urls) {\n    if (!this._initialized) {\n      await this.init();\n    }\n    if (typeof urls === \"string\") {\n      urls = [urls];\n    }\n    const resolveResults = this.resolver.resolve(urls);\n    this._backgroundLoader.add(Object.values(resolveResults));\n  }\n  async backgroundLoadBundle(bundleIds) {\n    if (!this._initialized) {\n      await this.init();\n    }\n    if (typeof bundleIds === \"string\") {\n      bundleIds = [bundleIds];\n    }\n    const resolveResults = this.resolver.resolveBundle(bundleIds);\n    Object.values(resolveResults).forEach(resolveResult => {\n      this._backgroundLoader.add(Object.values(resolveResult));\n    });\n  }\n  reset() {\n    this.resolver.reset();\n    this.loader.reset();\n    this.cache.reset();\n    this._initialized = false;\n  }\n  get(keys) {\n    if (typeof keys === \"string\") {\n      return Cache.get(keys);\n    }\n    const assets = {};\n    for (let i = 0; i < keys.length; i++) {\n      assets[i] = Cache.get(keys[i]);\n    }\n    return assets;\n  }\n  async _mapLoadToResolve(resolveResults, onProgress) {\n    const resolveArray = Object.values(resolveResults);\n    const resolveKeys = Object.keys(resolveResults);\n    this._backgroundLoader.active = false;\n    const loadedAssets = await this.loader.load(resolveArray, onProgress);\n    this._backgroundLoader.active = true;\n    const out = {};\n    resolveArray.forEach((resolveResult, i) => {\n      const asset = loadedAssets[resolveResult.src];\n      const keys = [resolveResult.src];\n      if (resolveResult.alias) {\n        keys.push(...resolveResult.alias);\n      }\n      out[resolveKeys[i]] = asset;\n      Cache.set(keys, asset);\n    });\n    return out;\n  }\n  async unload(urls) {\n    if (!this._initialized) {\n      await this.init();\n    }\n    const urlArray = convertToList(urls).map(url => typeof url !== \"string\" ? url.src : url);\n    const resolveResults = this.resolver.resolve(urlArray);\n    await this._unloadFromResolved(resolveResults);\n  }\n  async unloadBundle(bundleIds) {\n    if (!this._initialized) {\n      await this.init();\n    }\n    bundleIds = convertToList(bundleIds);\n    const resolveResults = this.resolver.resolveBundle(bundleIds);\n    const promises = Object.keys(resolveResults).map(bundleId => this._unloadFromResolved(resolveResults[bundleId]));\n    await Promise.all(promises);\n  }\n  async _unloadFromResolved(resolveResult) {\n    const resolveArray = Object.values(resolveResult);\n    resolveArray.forEach(resolveResult2 => {\n      Cache.remove(resolveResult2.src);\n    });\n    await this.loader.unload(resolveArray);\n  }\n  get detections() {\n    return this._detections;\n  }\n  get preferWorkers() {\n    return loadTextures.config.preferWorkers;\n  }\n  set preferWorkers(value) {\n    utils.deprecation(\"7.2.0\", \"Assets.prefersWorkers is deprecated, use Assets.setPreferences({ preferWorkers: true }) instead.\");\n    this.setPreferences({\n      preferWorkers: value\n    });\n  }\n  setPreferences(preferences) {\n    this.loader.parsers.forEach(parser => {\n      if (!parser.config) return;\n      Object.keys(parser.config).filter(key => key in preferences).forEach(key => {\n        parser.config[key] = preferences[key];\n      });\n    });\n  }\n}\nconst Assets = new AssetsClass();\nextensions.handleByList(ExtensionType.LoadParser, Assets.loader.parsers).handleByList(ExtensionType.ResolveParser, Assets.resolver.parsers).handleByList(ExtensionType.CacheParser, Assets.cache.parsers).handleByList(ExtensionType.DetectionParser, Assets.detections);\nexport { Assets, AssetsClass };","map":{"version":3,"names":["AssetsClass","constructor","_detections","_initialized","resolver","Resolver","loader","Loader","cache","Cache","_backgroundLoader","BackgroundLoader","active","reset","init","options","arguments","length","undefined","console","warn","defaultSearchParams","setDefaultSearchParams","basePath","bundleIdentifier","setBundleIdentifier","manifest","load","addManifest","resolutionPref","texturePreference","resolution","formats","format","formatPref","detection","test","remove","add","prefer","params","preferences","setPreferences","keysIn","assetsIn","data","urls","onProgress","singleAsset","isSingleItem","urlArray","convertToList","map","url","src","hasKey","resolveResults","resolve","out","_mapLoadToResolve","addBundle","bundleId","assets","loadBundle","bundleIds","resolveBundle","keys","Object","count","total","_onProgress","promises","resolveResult","then","resolveResult2","Promise","all","backgroundLoad","values","backgroundLoadBundle","forEach","get","i","resolveArray","resolveKeys","loadedAssets","asset","alias","push","set","unload","_unloadFromResolved","unloadBundle","detections","preferWorkers","loadTextures","config","value","utils","deprecation","parsers","parser","filter","key","Assets","extensions","handleByList","ExtensionType","LoadParser","ResolveParser","CacheParser","DetectionParser"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\assets\\src\\Assets.ts"],"sourcesContent":["import { extensions, ExtensionType, utils } from '@pixi/core';\nimport { BackgroundLoader } from './BackgroundLoader';\nimport { Cache } from './cache/Cache';\nimport { Loader } from './loader/Loader';\nimport { loadTextures } from './loader/parsers';\nimport { Resolver } from './resolver/Resolver';\nimport { convertToList } from './utils/convertToList';\nimport { isSingleItem } from './utils/isSingleItem';\n\nimport type { FormatDetectionParser } from './detections';\nimport type { LoadAsset } from './loader';\nimport type { LoadTextureConfig } from './loader/parsers';\nimport type { ResolveAsset, ResolverBundle, ResolverManifest } from './resolver';\nimport type { BundleIdentifierOptions } from './resolver/Resolver';\n\nexport type ProgressCallback = (progress: number) => void;\n\n/**\n * Extensible preferences that can be used, for instance, when configuring loaders.\n * @since 7.2.0\n * @memberof PIXI\n */\nexport interface AssetsPreferences extends LoadTextureConfig, GlobalMixins.AssetsPreferences {}\n\n/**\n * Initialization options object for Asset Class.\n * @memberof PIXI\n */\nexport interface AssetInitOptions\n{\n    // basic...\n    /** a base path for any assets loaded */\n    basePath?: string;\n\n    /** a default URL parameter string to append to all assets loaded */\n    defaultSearchParams?: string | Record<string, any>;\n\n    /**\n     * a manifest to tell the asset loader upfront what all your assets are\n     * this can be the manifest object itself, or a URL to the manifest.\n     */\n    manifest?: string | ResolverManifest;\n    /**\n     * optional preferences for which textures preferences you have when resolving assets\n     * for example you might set the resolution to 0.5 if the user is on a rubbish old phone\n     * or you might set the resolution to 2 if the user is on a retina display\n     */\n    texturePreference?: {\n        /** the resolution order you prefer, can be an array (priority order - first is prefered) or a single resolutions  */\n        resolution?: number | number[];\n        /** the formats you prefer, by default this will be:  ['avif', 'webp', 'png', 'jpg', 'jpeg'] */\n        format?: string | string[];\n    };\n\n    /** advanced - override how bundlesIds are generated */\n    bundleIdentifier?: BundleIdentifierOptions;\n\n    /** Optional loader preferences */\n    preferences?: Partial<AssetsPreferences>;\n}\n\n/**\n * A one stop shop for all Pixi resource management!\n * Super modern and easy to use, with enough flexibility to customize and do what you need!\n * @memberof PIXI\n * @namespace Assets\n *\n * Only one Asset Class exists accessed via the Global Asset object.\n *\n * It has four main responsibilities:\n * 1. Allows users to map URLs to keys and resolve them according to the user's browser capabilities\n * 2. Loads the resources and transforms them into assets that developers understand.\n * 3. Caches the assets and provides a way to access them.\n * 4. Allow developers to unload assets and clear the cache.\n *\n * It also has a few advanced features:\n * 1. Allows developers to provide a manifest upfront of all assets and help manage them via 'bundles'.\n * 2. Allows users to background load assets. Shortening (or eliminating) load times and improving UX. With this feature,\n * in-game loading bars can be a thing of the past!\n *\n * ### Assets Loading\n *\n * Do not be afraid to load things multiple times - under the hood, it will NEVER load anything more than once.\n *\n * For example:\n *\n * ```js\n * import { Assets } from 'pixi.js';\n *\n * promise1 = Assets.load('bunny.png')\n * promise2 = Assets.load('bunny.png')\n *\n * // promise1 === promise2\n * ```\n *\n * Here both promises will be the same. Once resolved... Forever resolved! It makes for really easy resource management!\n *\n * Out of the box it supports the following files:\n * - textures (avif, webp, png, jpg, gif, svg)\n * - sprite sheets (json)\n * - bitmap fonts (xml, fnt, txt)\n * - web fonts (ttf, woff, woff2)\n * - json files (json)\n * - text files (txt)\n *\n * More types can be added fairly easily by creating additional loader parsers.\n *\n * ### Textures\n * - Textures are loaded as ImageBitmap on a worker thread where possible.\n * Leading to much less janky load + parse times.\n * - By default, we will prefer to load AVIF and WebP image files if you specify them.\n * But if the browser doesn't support AVIF or WebP we will fall back to png and jpg.\n * - Textures can also be accessed via Texture.from(...) and now use this asset manager under the hood!\n * - Don't worry if you set preferences for textures that don't exist (for example you prefer 2x resolutions images\n *  but only 1x is available for that texture, the Asset manager will pick that up as a fallback automatically)\n *\n * #### Sprite sheets\n * - It's hard to know what resolution a sprite sheet is without loading it first, to address this\n * there is a naming convention we have added that will let Pixi understand the image format and resolution\n * of the spritesheet via its file name:\n *\n * `my-spritesheet{resolution}.{imageFormat}.json`\n *\n * For example:\n *\n * `my-spritesheet@2x.webp.json` // 2x resolution, WebP sprite sheet\n * `my-spritesheet@0.5x.png.json` // 0.5x resolution, png sprite sheet\n *\n * This is optional! You can just load a sprite sheet as normal.\n * This is only useful if you have a bunch of different res / formatted spritesheets.\n *\n * ### Fonts\n * Web fonts will be loaded with all weights.\n * It is possible to load only specific weights by doing the following:\n *\n * ```js\n * import { Assets } from 'pixi.js';\n *\n * // Load specific weights..\n * await Assets.load({\n *     data: {\n *         weights: ['normal'], // Only loads the weight\n *     },\n *     src: `outfit.woff2`,\n * });\n *\n * // Load everything...\n * await Assets.load(`outfit.woff2`);\n * ```\n *\n * ### Background Loading\n * Background loading will load stuff for you passively behind the scenes. To minimize jank,\n * it will only load one asset at a time. As soon as a developer calls `Assets.load(...)` the\n * background loader is paused and requested assets are loaded as a priority.\n * Don't worry if something is in there that's already loaded, it will just get skipped!\n *\n * You still need to call `Assets.load(...)` to get an asset that has been loaded in the background.\n * It's just that this promise will resolve instantly if the asset\n * has already been loaded.\n *\n * ### Manifest and Bundles\n * - Manifest is a JSON file that contains a list of all assets and their properties.\n * - Bundles are a way to group assets together.\n *\n * ```js\n * import { Assets } from 'pixi.js';\n *\n * // Manifest Example\n * const manifest = {\n *     bundles: [\n *         {\n *             name: 'load-screen',\n *             assets: [\n *                 {\n *                     name: 'background',\n *                     srcs: 'sunset.png',\n *                 },\n *                 {\n *                     name: 'bar',\n *                     srcs: 'load-bar.{png,webp}',\n *                 },\n *             ],\n *         },\n *         {\n *             name: 'game-screen',\n *             assets: [\n *                 {\n *                     name: 'character',\n *                     srcs: 'robot.png',\n *                 },\n *                 {\n *                     name: 'enemy',\n *                     srcs: 'bad-guy.png',\n *                 },\n *             ],\n *         },\n *     ]\n * };\n *\n * await Asset.init({ manifest });\n *\n * // Load a bundle...\n * loadScreenAssets = await Assets.loadBundle('load-screen');\n * // Load another bundle...\n * gameScreenAssets = await Assets.loadBundle('game-screen');\n * ```\n * @example\n * import { Assets } from 'pixi.js';\n *\n * const bunny = await Assets.load('bunny.png');\n */\nexport class AssetsClass\n{\n    /** the resolver to map various urls */\n    public resolver: Resolver;\n    /**\n     * The loader, loads stuff!\n     * @type {PIXI.AssetLoader}\n     */\n    public loader: Loader;\n    /**\n     * The global cache of all assets within PixiJS\n     * @type {PIXI.Cache}\n     */\n    public cache: typeof Cache;\n\n    /** takes care of loading assets in the background */\n    private readonly _backgroundLoader: BackgroundLoader;\n\n    private _detections: FormatDetectionParser[] = [];\n\n    private _initialized = false;\n\n    constructor()\n    {\n        this.resolver = new Resolver();\n        this.loader = new Loader();\n        this.cache = Cache;\n\n        this._backgroundLoader = new BackgroundLoader(this.loader);\n        this._backgroundLoader.active = true;\n\n        this.reset();\n    }\n\n    /**\n     * Best practice is to call this function before any loading commences\n     * Initiating is the best time to add any customization to the way things are loaded.\n     *\n     * you do not need to call this for the Asset class to work, only if you want to set any initial properties\n     * @param options - options to initialize the Asset manager with\n     */\n    public async init(options: AssetInitOptions = {}): Promise<void>\n    {\n        if (this._initialized)\n        {\n            // #if _DEBUG\n            console.warn('[Assets]AssetManager already initialized, did you load before calling this Asset.init()?');\n            // #endif\n\n            return;\n        }\n\n        this._initialized = true;\n\n        if (options.defaultSearchParams)\n        {\n            this.resolver.setDefaultSearchParams(options.defaultSearchParams);\n        }\n\n        if (options.basePath)\n        {\n            this.resolver.basePath = options.basePath;\n        }\n\n        if (options.bundleIdentifier)\n        {\n            this.resolver.setBundleIdentifier(options.bundleIdentifier);\n        }\n\n        if (options.manifest)\n        {\n            let manifest = options.manifest;\n\n            if (typeof manifest === 'string')\n            {\n                manifest = await this.load<ResolverManifest>(manifest);\n            }\n\n            this.resolver.addManifest(manifest);\n        }\n\n        const resolutionPref = options.texturePreference?.resolution ?? 1;\n        const resolution = (typeof resolutionPref === 'number') ? [resolutionPref] : resolutionPref;\n\n        let formats: string[] = [];\n\n        if (options.texturePreference?.format)\n        {\n            const formatPref = options.texturePreference?.format;\n\n            formats = (typeof formatPref === 'string') ? [formatPref] : formatPref;\n\n            // we should remove any formats that are not supported by the browser\n            for (const detection of this._detections)\n            {\n                if (!await detection.test())\n                {\n                    formats = await detection.remove(formats);\n                }\n            }\n        }\n        else\n        {\n            // we should add any formats that are supported by the browser\n            for (const detection of this._detections)\n            {\n                if (await detection.test())\n                {\n                    formats = await detection.add(formats);\n                }\n            }\n        }\n\n        this.resolver.prefer({\n            params: {\n                format: formats,\n                resolution,\n            },\n        });\n\n        if (options.preferences)\n        {\n            this.setPreferences(options.preferences);\n        }\n    }\n\n    /**\n     * Allows you to specify how to resolve any assets load requests.\n     * There are a few ways to add things here as shown below:\n     * @example\n     * import { Assets } from 'pixi.js';\n     *\n     * // Simple\n     * Assets.add('bunnyBooBoo', 'bunny.png');\n     * const bunny = await Assets.load('bunnyBooBoo');\n     *\n     * // Multiple keys:\n     * Assets.add(['burger', 'chicken'], 'bunny.png');\n     *\n     * const bunny = await Assets.load('burger');\n     * const bunny2 = await Assets.load('chicken');\n     *\n     * // passing options to to the object\n     * Assets.add(\n     *     'bunnyBooBooSmooth',\n     *     'bunny{png,webp}',\n     *     { scaleMode: SCALE_MODES.NEAREST }, // Base texture options\n     * );\n     *\n     * // Multiple assets\n     *\n     * // The following all do the same thing:\n     *\n     * Assets.add('bunnyBooBoo', 'bunny{png,webp}');\n     *\n     * Assets.add('bunnyBooBoo', [\n     *     'bunny.png',\n     *     'bunny.webp',\n     * ]);\n     *\n     * Assets.add('bunnyBooBoo', [\n     *     {\n     *         format: 'png',\n     *         src: 'bunny.png',\n     *     },\n     *     {\n     *         format: 'webp',\n     *         src: 'bunny.webp',\n     *     },\n     * ]);\n     *\n     * const bunny = await Assets.load('bunnyBooBoo'); // Will try to load WebP if available\n     * @param keysIn - the key or keys that you will reference when loading this asset\n     * @param assetsIn - the asset or assets that will be chosen from when loading via the specified key\n     * @param data - asset-specific data that will be passed to the loaders\n     * - Useful if you want to initiate loaded objects with specific data\n     */\n    public add(keysIn: string | string[], assetsIn: string | (ResolveAsset | string)[], data?: unknown): void\n    {\n        this.resolver.add(keysIn, assetsIn, data);\n    }\n\n    /**\n     * Loads your assets! You pass in a key or URL and it will return a promise that\n     * resolves to the loaded asset. If multiple assets a requested, it will return a hash of assets.\n     *\n     * Don't worry about loading things multiple times, behind the scenes assets are only ever loaded\n     * once and the same promise reused behind the scenes so you can safely call this function multiple\n     * times with the same key and it will always return the same asset.\n     * @example\n     * import { Assets } from 'pixi.js';\n     *\n     * // Load a URL:\n     * const myImageTexture = await Assets.load('http://some.url.com/image.png'); // => returns a texture\n     *\n     * Assets.add('thumper', 'bunny.png');\n     * Assets.add('chicko', 'chicken.png');\n     *\n     * // Load multiple assets:\n     * const textures = await Assets.load(['thumper', 'chicko']); // => {thumper: Texture, chicko: Texture}\n     * @param urls - the urls to load\n     * @param onProgress - optional function that is called when progress on asset loading is made.\n     * The function is passed a single parameter, `progress`, which represents the percentage\n     * (0.0 - 1.0) of the assets loaded.\n     * @returns - the assets that were loaded, either a single asset or a hash of assets\n     */\n    public async load<T = any>(\n        urls: string | LoadAsset,\n        onProgress?: ProgressCallback,\n    ): Promise<T>;\n    public async load<T = any>(\n        urls: string[] | LoadAsset[],\n        onProgress?: ProgressCallback,\n    ): Promise<Record<string, T>>;\n    public async load<T = any>(\n        urls: string | string[] | LoadAsset | LoadAsset[],\n        onProgress?: ProgressCallback,\n    ): Promise<T | Record<string, T>>\n    {\n        if (!this._initialized)\n        {\n            await this.init();\n        }\n\n        const singleAsset = isSingleItem(urls);\n\n        const urlArray = convertToList<ResolveAsset>(urls)\n            .map((url) =>\n            {\n                if (typeof url !== 'string')\n                {\n                    this.resolver.add(url.src as string, url);\n\n                    return url.src;\n                }\n\n                if (!this.resolver.hasKey(url))\n                {\n                    this.resolver.add(url, url);\n                }\n\n                return url;\n            });\n\n        // check cache first...\n        const resolveResults = this.resolver.resolve(urlArray);\n\n        // remap to the keys used..\n        const out: Record<string, T> = await this._mapLoadToResolve<T>(resolveResults, onProgress);\n\n        return singleAsset ? out[urlArray[0] as string] : out;\n    }\n\n    /**\n     * This adds a bundle of assets in one go so that you can load them as a group.\n     * For example you could add a bundle for each screen in you pixi app\n     * @example\n     * import { Assets } from 'pixi.js';\n     *\n     * Assets.addBundle('animals', {\n     *     bunny: 'bunny.png',\n     *     chicken: 'chicken.png',\n     *     thumper: 'thumper.png',\n     * });\n     *\n     * const assets = await Assets.loadBundle('animals');\n     * @param bundleId - the id of the bundle to add\n     * @param assets - a record of the asset or assets that will be chosen from when loading via the specified key\n     */\n    public addBundle(bundleId: string, assets: ResolverBundle['assets']): void\n    {\n        this.resolver.addBundle(bundleId, assets);\n    }\n\n    /**\n     * Bundles are a way to load multiple assets at once.\n     * If a manifest has been provided to the init function then you can load a bundle, or bundles.\n     * you can also add bundles via `addBundle`\n     * @example\n     * import { Assets } from 'pixi.js';\n     *\n     * // Manifest Example\n     * const manifest = {\n     *     bundles: [\n     *         {\n     *             name: 'load-screen',\n     *             assets: [\n     *                 {\n     *                     name: 'background',\n     *                     srcs: 'sunset.png',\n     *                 },\n     *                 {\n     *                     name: 'bar',\n     *                     srcs: 'load-bar.{png,webp}',\n     *                 },\n     *             ],\n     *         },\n     *         {\n     *             name: 'game-screen',\n     *             assets: [\n     *                 {\n     *                     name: 'character',\n     *                     srcs: 'robot.png',\n     *                 },\n     *                 {\n     *                     name: 'enemy',\n     *                     srcs: 'bad-guy.png',\n     *                 },\n     *             ],\n     *         },\n     *     ]\n     * };\n     *\n     * await Asset.init({ manifest });\n     *\n     * // Load a bundle...\n     * loadScreenAssets = await Assets.loadBundle('load-screen');\n     * // Load another bundle...\n     * gameScreenAssets = await Assets.loadBundle('game-screen');\n     * @param bundleIds - the bundle id or ids to load\n     * @param onProgress - Optional function that is called when progress on asset loading is made.\n     * The function is passed a single parameter, `progress`, which represents the percentage (0.0 - 1.0)\n     * of the assets loaded. Do not use this function to detect when assets are complete and available,\n     * instead use the Promise returned by this function.\n     * @returns all the bundles assets or a hash of assets for each bundle specified\n     */\n    public async loadBundle(bundleIds: string | string[], onProgress?: ProgressCallback): Promise<any>\n    {\n        if (!this._initialized)\n        {\n            await this.init();\n        }\n\n        let singleAsset = false;\n\n        if (typeof bundleIds === 'string')\n        {\n            singleAsset = true;\n            bundleIds = [bundleIds];\n        }\n\n        const resolveResults = this.resolver.resolveBundle(bundleIds);\n\n        const out: Record<string, Record<string, any>> = {};\n\n        const keys = Object.keys(resolveResults);\n        let count = 0;\n        let total = 0;\n        const _onProgress = () =>\n        {\n            onProgress?.(++count / total);\n        };\n        const promises = keys.map((bundleId) =>\n        {\n            const resolveResult = resolveResults[bundleId];\n\n            total += Object.keys(resolveResult).length;\n\n            return this._mapLoadToResolve(resolveResult, _onProgress)\n                .then((resolveResult) =>\n                {\n                    out[bundleId] = resolveResult;\n                });\n        });\n\n        await Promise.all(promises);\n\n        return singleAsset ? out[bundleIds[0]] : out;\n    }\n\n    /**\n     * Initiate a background load of some assets. It will passively begin to load these assets in the background.\n     * So when you actually come to loading them you will get a promise that resolves to the loaded assets immediately\n     *\n     * An example of this might be that you would background load game assets after your inital load.\n     * then when you got to actually load your game screen assets when a player goes to the game - the loading\n     * would already have stared or may even be complete, saving you having to show an interim load bar.\n     * @example\n     * import { Assets } from 'pixi.js';\n     *\n     * Assets.backgroundLoad('bunny.png');\n     *\n     * // later on in your app...\n     * await Assets.loadBundle('bunny.png'); // Will resolve quicker as loading may have completed!\n     * @param urls - the url / urls you want to background load\n     */\n    public async backgroundLoad(urls: string | string[]): Promise<void>\n    {\n        if (!this._initialized)\n        {\n            await this.init();\n        }\n\n        if (typeof urls === 'string')\n        {\n            urls = [urls];\n        }\n\n        const resolveResults = this.resolver.resolve(urls);\n\n        this._backgroundLoader.add(Object.values(resolveResults));\n    }\n\n    /**\n     * Initiate a background of a bundle, works exactly like backgroundLoad but for bundles.\n     * this can only be used if the loader has been initiated with a manifest\n     * @example\n     * import { Assets } from 'pixi.js';\n     *\n     * await Assets.init({\n     *     manifest: {\n     *         bundles: [\n     *             {\n     *                 name: 'load-screen',\n     *                 assets: [...],\n     *             },\n     *             ...\n     *         ],\n     *     },\n     * });\n     *\n     * Assets.backgroundLoadBundle('load-screen');\n     *\n     * // Later on in your app...\n     * await Assets.loadBundle('load-screen'); // Will resolve quicker as loading may have completed!\n     * @param bundleIds - the bundleId / bundleIds you want to background load\n     */\n    public async backgroundLoadBundle(bundleIds: string | string[]): Promise<void>\n    {\n        if (!this._initialized)\n        {\n            await this.init();\n        }\n\n        if (typeof bundleIds === 'string')\n        {\n            bundleIds = [bundleIds];\n        }\n\n        const resolveResults = this.resolver.resolveBundle(bundleIds);\n\n        Object.values(resolveResults).forEach((resolveResult) =>\n        {\n            this._backgroundLoader.add(Object.values(resolveResult));\n        });\n    }\n\n    /**\n     * Only intended for development purposes.\n     * This will wipe the resolver and caches.\n     * You will need to reinitialize the Asset\n     */\n    public reset(): void\n    {\n        this.resolver.reset();\n        this.loader.reset();\n        this.cache.reset();\n\n        this._initialized = false;\n    }\n\n    /**\n     * Instantly gets an asset already loaded from the cache. If the asset has not yet been loaded,\n     * it will return undefined. So it's on you! When in doubt just use `Assets.load` instead.\n     * (Remember, the loader will never load things more than once!)\n     * @param keys - The key or keys for the assets that you want to access\n     * @returns - The assets or hash of assets requested\n     */\n    public get<T = any>(keys: string): T;\n    public get<T = any>(keys: string[]): Record<string, T>;\n    public get<T = any>(keys: string | string[]): T | Record<string, T>\n    {\n        if (typeof keys === 'string')\n        {\n            return Cache.get(keys);\n        }\n\n        const assets: Record<string, T> = {};\n\n        for (let i = 0; i < keys.length; i++)\n        {\n            assets[i] = Cache.get(keys[i]);\n        }\n\n        return assets;\n    }\n\n    /**\n     * helper function to map resolved assets back to loaded assets\n     * @param resolveResults - the resolve results from the resolver\n     * @param onProgress - the progress callback\n     */\n    private async _mapLoadToResolve<T>(\n        resolveResults: ResolveAsset | Record<string, ResolveAsset>,\n        onProgress?: ProgressCallback\n    ): Promise<Record<string, T>>\n    {\n        const resolveArray = Object.values(resolveResults);\n        const resolveKeys = Object.keys(resolveResults);\n\n        // pause background loader...\n        this._backgroundLoader.active = false;\n\n        const loadedAssets = await this.loader.load<T>(resolveArray, onProgress);\n\n        // resume background loader...\n        this._backgroundLoader.active = true;\n\n        // remap to the keys used..\n\n        const out: Record<string, T> = {};\n\n        resolveArray.forEach((resolveResult, i) =>\n        {\n            const asset = loadedAssets[resolveResult.src];\n\n            const keys = [resolveResult.src];\n\n            if (resolveResult.alias)\n            {\n                keys.push(...resolveResult.alias);\n            }\n\n            out[resolveKeys[i]] = asset;\n\n            Cache.set(keys, asset);\n        });\n\n        return out;\n    }\n\n    /**\n     * Unload an asset or assets. As the Assets class is responsible for creating the assets via the `load` function\n     * this will make sure to destroy any assets and release them from memory.\n     * Once unloaded, you will need to load the asset again.\n     *\n     * Use this to help manage assets if you find that you have a large app and you want to free up memory.\n     *\n     * - it's up to you as the developer to make sure that textures are not actively being used when you unload them,\n     * Pixi won't break but you will end up with missing assets. Not a good look for the user!\n     * @example\n     * import { Assets } from 'pixi.js';\n     *\n     * // Load a URL:\n     * const myImageTexture = await Assets.load('http://some.url.com/image.png'); // => returns a texture\n     *\n     * await Assets.unload('http://some.url.com/image.png')\n     *\n     * // myImageTexture will be destroyed now.\n     *\n     * // Unload multiple assets:\n     * const textures = await Assets.unload(['thumper', 'chicko']);\n     * @param urls - the urls to unload\n     */\n    public async unload(\n        urls: string | string[] | LoadAsset | LoadAsset[]\n    ): Promise<void>\n    {\n        if (!this._initialized)\n        {\n            await this.init();\n        }\n\n        const urlArray = convertToList<string | LoadAsset>(urls)\n            .map((url) =>\n                ((typeof url !== 'string') ? url.src : url));\n\n        // check cache first...\n        const resolveResults = this.resolver.resolve(urlArray);\n\n        await this._unloadFromResolved(resolveResults);\n    }\n\n    /**\n     * Bundles are a way to manage multiple assets at once.\n     * this will unload all files in a bundle.\n     *\n     * once a bundle has been unloaded, you need to load it again to have access to the assets.\n     * @example\n     * import { Assets } from 'pixi.js';\n     *\n     * Assets.addBundle({\n     *     'thumper': 'http://some.url.com/thumper.png',\n     * })\n     *\n     * const assets = await Assets.loadBundle('thumper');\n     *\n     * // Now to unload...\n     *\n     * await Assets.unloadBundle('thumper');\n     *\n     * // All assets in the assets object will now have been destroyed and purged from the cache\n     * @param bundleIds - the bundle id or ids to unload\n     */\n    public async unloadBundle(bundleIds: string | string[]): Promise<void>\n    {\n        if (!this._initialized)\n        {\n            await this.init();\n        }\n\n        bundleIds = convertToList<string>(bundleIds);\n\n        const resolveResults = this.resolver.resolveBundle(bundleIds);\n\n        const promises = Object.keys(resolveResults).map((bundleId) =>\n            this._unloadFromResolved(resolveResults[bundleId]));\n\n        await Promise.all(promises);\n    }\n\n    private async _unloadFromResolved(resolveResult: ResolveAsset | Record<string, ResolveAsset>)\n    {\n        const resolveArray = Object.values(resolveResult);\n\n        resolveArray.forEach((resolveResult) =>\n        {\n            Cache.remove(resolveResult.src);\n        });\n\n        await this.loader.unload(resolveArray);\n    }\n\n    /** All the detection parsers currently added to the Assets class. */\n    public get detections(): FormatDetectionParser[]\n    {\n        return this._detections;\n    }\n\n    /**\n     * @deprecated since 7.2.0\n     * @see {@link Assets.setPreferences}\n     */\n    public get preferWorkers(): boolean\n    {\n        return loadTextures.config.preferWorkers;\n    }\n    public set preferWorkers(value: boolean)\n    {\n        // #if _DEBUG\n        utils.deprecation('7.2.0', 'Assets.prefersWorkers is deprecated, '\n            + 'use Assets.setPreferences({ preferWorkers: true }) instead.');\n        // #endif\n        this.setPreferences({ preferWorkers: value });\n    }\n\n    /**\n     * General setter for preferences. This is a helper function to set preferences on all parsers.\n     * @param preferences - the preferences to set\n     */\n    public setPreferences(preferences: Partial<AssetsPreferences>): void\n    {\n        // Find matching config keys in loaders with preferences\n        // and set the values\n        this.loader.parsers.forEach((parser) =>\n        {\n            if (!parser.config) return;\n\n            (Object.keys(parser.config) as (keyof AssetsPreferences)[])\n                .filter((key) => key in preferences)\n                .forEach((key) =>\n                {\n                    parser.config[key] = preferences[key];\n                });\n        });\n    }\n}\n\nexport const Assets = new AssetsClass();\n\n// Handle registration of extensions\nextensions\n    .handleByList(ExtensionType.LoadParser, Assets.loader.parsers)\n    .handleByList(ExtensionType.ResolveParser, Assets.resolver.parsers)\n    .handleByList(ExtensionType.CacheParser, Assets.cache.parsers)\n    .handleByList(ExtensionType.DetectionParser, Assets.detections);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}