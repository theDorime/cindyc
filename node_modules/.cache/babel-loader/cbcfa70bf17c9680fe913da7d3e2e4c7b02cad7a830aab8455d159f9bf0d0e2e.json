{"ast":null,"code":"import { PI_2 } from '@pixi/core';\nimport { curves } from '../const.mjs';\nclass ArcUtils {\n  static curveTo(x1, y1, x2, y2, radius, points) {\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n    const a1 = fromY - y1;\n    const b1 = fromX - x1;\n    const a2 = y2 - y1;\n    const b2 = x2 - x1;\n    const mm = Math.abs(a1 * b2 - b1 * a2);\n    if (mm < 1e-8 || radius === 0) {\n      if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1) {\n        points.push(x1, y1);\n      }\n      return null;\n    }\n    const dd = a1 * a1 + b1 * b1;\n    const cc = a2 * a2 + b2 * b2;\n    const tt = a1 * a2 + b1 * b2;\n    const k1 = radius * Math.sqrt(dd) / mm;\n    const k2 = radius * Math.sqrt(cc) / mm;\n    const j1 = k1 * tt / dd;\n    const j2 = k2 * tt / cc;\n    const cx = k1 * b2 + k2 * b1;\n    const cy = k1 * a2 + k2 * a1;\n    const px = b1 * (k2 + j1);\n    const py = a1 * (k2 + j1);\n    const qx = b2 * (k1 + j2);\n    const qy = a2 * (k1 + j2);\n    const startAngle = Math.atan2(py - cy, px - cx);\n    const endAngle = Math.atan2(qy - cy, qx - cx);\n    return {\n      cx: cx + x1,\n      cy: cy + y1,\n      radius,\n      startAngle,\n      endAngle,\n      anticlockwise: b1 * a2 > b2 * a1\n    };\n  }\n  static arc(_startX, _startY, cx, cy, radius, startAngle, endAngle, _anticlockwise, points) {\n    const sweep = endAngle - startAngle;\n    const n = curves._segmentsCount(Math.abs(sweep) * radius, Math.ceil(Math.abs(sweep) / PI_2) * 40);\n    const theta = sweep / (n * 2);\n    const theta2 = theta * 2;\n    const cTheta = Math.cos(theta);\n    const sTheta = Math.sin(theta);\n    const segMinus = n - 1;\n    const remainder = segMinus % 1 / segMinus;\n    for (let i = 0; i <= segMinus; ++i) {\n      const real = i + remainder * i;\n      const angle = theta + startAngle + theta2 * real;\n      const c = Math.cos(angle);\n      const s = -Math.sin(angle);\n      points.push((cTheta * c + sTheta * s) * radius + cx, (cTheta * -s + sTheta * c) * radius + cy);\n    }\n  }\n}\nexport { ArcUtils };","map":{"version":3,"names":["ArcUtils","curveTo","x1","y1","x2","y2","radius","points","fromX","length","fromY","a1","b1","a2","b2","mm","Math","abs","push","dd","cc","tt","k1","sqrt","k2","j1","j2","cx","cy","px","py","qx","qy","startAngle","atan2","endAngle","anticlockwise","arc","_startX","_startY","_anticlockwise","sweep","n","curves","_segmentsCount","ceil","PI_2","theta","theta2","cTheta","cos","sTheta","sin","segMinus","remainder","i","real","angle","c","s"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\graphics\\src\\utils\\ArcUtils.ts"],"sourcesContent":["import { PI_2 } from '@pixi/core';\nimport { curves } from '../const';\n\ninterface IArcLikeShape\n{\n    cx: number;\n    cy: number;\n    radius: number;\n    startAngle: number;\n    endAngle: number;\n    anticlockwise: boolean;\n}\n\n/**\n * Utilities for arc curves.\n * @private\n */\nexport class ArcUtils\n{\n    /**\n     * Calculate information of the arc for {@link PIXI.Graphics.arcTo}.\n     * @private\n     * @param x1 - The x-coordinate of the first control point of the arc\n     * @param y1 - The y-coordinate of the first control point of the arc\n     * @param x2 - The x-coordinate of the second control point of the arc\n     * @param y2 - The y-coordinate of the second control point of the arc\n     * @param radius - The radius of the arc\n     * @param points - Collection of points to add to\n     * @returns - If the arc length is valid, return center of circle, radius and other info otherwise `null`.\n     */\n    static curveTo(x1: number, y1: number, x2: number, y2: number, radius: number, points: Array<number>): IArcLikeShape\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        const a1 = fromY - y1;\n        const b1 = fromX - x1;\n        const a2 = y2 - y1;\n        const b2 = x2 - x1;\n        const mm = Math.abs((a1 * b2) - (b1 * a2));\n\n        if (mm < 1.0e-8 || radius === 0)\n        {\n            if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1)\n            {\n                points.push(x1, y1);\n            }\n\n            return null;\n        }\n\n        const dd = (a1 * a1) + (b1 * b1);\n        const cc = (a2 * a2) + (b2 * b2);\n        const tt = (a1 * a2) + (b1 * b2);\n        const k1 = radius * Math.sqrt(dd) / mm;\n        const k2 = radius * Math.sqrt(cc) / mm;\n        const j1 = k1 * tt / dd;\n        const j2 = k2 * tt / cc;\n        const cx = (k1 * b2) + (k2 * b1);\n        const cy = (k1 * a2) + (k2 * a1);\n        const px = b1 * (k2 + j1);\n        const py = a1 * (k2 + j1);\n        const qx = b2 * (k1 + j2);\n        const qy = a2 * (k1 + j2);\n        const startAngle = Math.atan2(py - cy, px - cx);\n        const endAngle = Math.atan2(qy - cy, qx - cx);\n\n        return {\n            cx: (cx + x1),\n            cy: (cy + y1),\n            radius,\n            startAngle,\n            endAngle,\n            anticlockwise: (b1 * a2 > b2 * a1),\n        };\n    }\n\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     * @private\n     * @param _startX - Start x location of arc\n     * @param _startY - Start y location of arc\n     * @param cx - The x-coordinate of the center of the circle\n     * @param cy - The y-coordinate of the center of the circle\n     * @param radius - The radius of the circle\n     * @param startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param endAngle - The ending angle, in radians\n     * @param _anticlockwise - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @param points - Collection of points to add to\n     */\n    static arc(_startX: number, _startY: number, cx: number, cy: number, radius: number,\n        startAngle: number, endAngle: number, _anticlockwise: boolean, points: Array<number>): void\n    {\n        const sweep = endAngle - startAngle;\n        const n = curves._segmentsCount(\n            Math.abs(sweep) * radius,\n            Math.ceil(Math.abs(sweep) / PI_2) * 40\n        );\n\n        const theta = (sweep) / (n * 2);\n        const theta2 = theta * 2;\n        const cTheta = Math.cos(theta);\n        const sTheta = Math.sin(theta);\n        const segMinus = n - 1;\n        const remainder = (segMinus % 1) / segMinus;\n\n        for (let i = 0; i <= segMinus; ++i)\n        {\n            const real = i + (remainder * i);\n            const angle = ((theta) + startAngle + (theta2 * real));\n            const c = Math.cos(angle);\n            const s = -Math.sin(angle);\n\n            points.push(\n                (((cTheta * c) + (sTheta * s)) * radius) + cx,\n                (((cTheta * -s) + (sTheta * c)) * radius) + cy\n            );\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}