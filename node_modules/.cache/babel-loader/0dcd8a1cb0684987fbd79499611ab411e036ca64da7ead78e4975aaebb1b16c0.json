{"ast":null,"code":"import { TEXT_GRADIENT } from '@pixi/text';\nfunction generateFillStyle(canvas, context, style, resolution, lines, metrics) {\n  const fillStyle = style.fill;\n  if (!Array.isArray(fillStyle)) {\n    return fillStyle;\n  } else if (fillStyle.length === 1) {\n    return fillStyle[0];\n  }\n  let gradient;\n  const dropShadowCorrection = style.dropShadow ? style.dropShadowDistance : 0;\n  const padding = style.padding || 0;\n  const width = canvas.width / resolution - dropShadowCorrection - padding * 2;\n  const height = canvas.height / resolution - dropShadowCorrection - padding * 2;\n  const fill = fillStyle.slice();\n  const fillGradientStops = style.fillGradientStops.slice();\n  if (!fillGradientStops.length) {\n    const lengthPlus1 = fill.length + 1;\n    for (let i = 1; i < lengthPlus1; ++i) {\n      fillGradientStops.push(i / lengthPlus1);\n    }\n  }\n  fill.unshift(fillStyle[0]);\n  fillGradientStops.unshift(0);\n  fill.push(fillStyle[fillStyle.length - 1]);\n  fillGradientStops.push(1);\n  if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL) {\n    gradient = context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n    let lastIterationStop = 0;\n    const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n    const gradStopLineHeight = textHeight / height;\n    for (let i = 0; i < lines.length; i++) {\n      const thisLineTop = metrics.lineHeight * i;\n      for (let j = 0; j < fill.length; j++) {\n        let lineStop = 0;\n        if (typeof fillGradientStops[j] === \"number\") {\n          lineStop = fillGradientStops[j];\n        } else {\n          lineStop = j / fill.length;\n        }\n        const globalStop = thisLineTop / height + lineStop * gradStopLineHeight;\n        let clampedStop = Math.max(lastIterationStop, globalStop);\n        clampedStop = Math.min(clampedStop, 1);\n        gradient.addColorStop(clampedStop, fill[j]);\n        lastIterationStop = clampedStop;\n      }\n    }\n  } else {\n    gradient = context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n    const totalIterations = fill.length + 1;\n    let currentIteration = 1;\n    for (let i = 0; i < fill.length; i++) {\n      let stop;\n      if (typeof fillGradientStops[i] === \"number\") {\n        stop = fillGradientStops[i];\n      } else {\n        stop = currentIteration / totalIterations;\n      }\n      gradient.addColorStop(stop, fill[i]);\n      currentIteration++;\n    }\n  }\n  return gradient;\n}\nexport { generateFillStyle };","map":{"version":3,"names":["generateFillStyle","canvas","context","style","resolution","lines","metrics","fillStyle","fill","Array","isArray","length","gradient","dropShadowCorrection","dropShadow","dropShadowDistance","padding","width","height","slice","fillGradientStops","lengthPlus1","i","push","unshift","fillGradientType","TEXT_GRADIENT","LINEAR_VERTICAL","createLinearGradient","lastIterationStop","textHeight","fontProperties","fontSize","strokeThickness","gradStopLineHeight","thisLineTop","lineHeight","j","lineStop","globalStop","clampedStop","Math","max","min","addColorStop","totalIterations","currentIteration","stop"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\text-bitmap\\src\\utils\\generateFillStyle.ts"],"sourcesContent":["import { TEXT_GRADIENT } from '@pixi/text';\n\nimport type { ICanvas, ICanvasRenderingContext2D } from '@pixi/core';\nimport type { TextMetrics, TextStyle } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w generateFillStyle & Text#generateFillStyle\n\n/**\n * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n * @private\n * @param canvas\n * @param context\n * @param {object} style - The style.\n * @param resolution\n * @param {string[]} lines - The lines of text.\n * @param metrics\n * @returns {string|number|CanvasGradient} The fill style\n */\nexport function generateFillStyle(\n    canvas: ICanvas,\n    context: ICanvasRenderingContext2D,\n    style: TextStyle,\n    resolution: number,\n    lines: string[],\n    metrics: TextMetrics\n): string | CanvasGradient | CanvasPattern\n{\n    // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n    //       the setter converts to string. See this thread for more details:\n    //       https://github.com/microsoft/TypeScript/issues/2521\n    const fillStyle: string | string[] | CanvasGradient | CanvasPattern = style.fill as any;\n\n    if (!Array.isArray(fillStyle))\n    {\n        return fillStyle;\n    }\n    else if (fillStyle.length === 1)\n    {\n        return fillStyle[0];\n    }\n\n    // the gradient will be evenly spaced out according to how large the array is.\n    // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n    let gradient: string[] | CanvasGradient;\n\n    // a dropshadow will enlarge the canvas and result in the gradient being\n    // generated with the incorrect dimensions\n    const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n    // should also take padding into account, padding can offset the gradient\n    const padding = style.padding || 0;\n\n    const width = (canvas.width / resolution) - dropShadowCorrection - (padding * 2);\n    const height = (canvas.height / resolution) - dropShadowCorrection - (padding * 2);\n\n    // make a copy of the style settings, so we can manipulate them later\n    const fill = fillStyle.slice();\n    const fillGradientStops = style.fillGradientStops.slice();\n\n    // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n    if (!fillGradientStops.length)\n    {\n        const lengthPlus1 = fill.length + 1;\n\n        for (let i = 1; i < lengthPlus1; ++i)\n        {\n            fillGradientStops.push(i / lengthPlus1);\n        }\n    }\n\n    // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n    // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n    fill.unshift(fillStyle[0]);\n    fillGradientStops.unshift(0);\n\n    fill.push(fillStyle[fillStyle.length - 1]);\n    fillGradientStops.push(1);\n\n    if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n    {\n        // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n        gradient = context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n        // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n        // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n        // There's potential for floating point precision issues at the seams between gradient repeats.\n        // The loop below generates the stops in order, so track the last generated one to prevent\n        // floating point precision from making us go the teeniest bit backwards, resulting in\n        // the first and last colors getting swapped.\n        let lastIterationStop = 0;\n\n        // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n        const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n        // textHeight, but as a 0-1 size in global gradient stop space\n        const gradStopLineHeight = textHeight / height;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const thisLineTop = metrics.lineHeight * i;\n\n            for (let j = 0; j < fill.length; j++)\n            {\n                // 0-1 stop point for the current line, multiplied to global space afterwards\n                let lineStop = 0;\n\n                if (typeof fillGradientStops[j] === 'number')\n                {\n                    lineStop = fillGradientStops[j];\n                }\n                else\n                {\n                    lineStop = j / fill.length;\n                }\n\n                const globalStop = (thisLineTop / height) + (lineStop * gradStopLineHeight);\n\n                // Prevent color stop generation going backwards from floating point imprecision\n                let clampedStop = Math.max(lastIterationStop, globalStop);\n\n                clampedStop = Math.min(clampedStop, 1); // Cap at 1 as well for safety's sake to avoid a possible throw.\n                gradient.addColorStop(clampedStop, fill[j]);\n                lastIterationStop = clampedStop;\n            }\n        }\n    }\n    else\n    {\n        // start the gradient at the center left of the canvas, and end at the center right of the canvas\n        gradient = context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n        // can just evenly space out the gradients in this case, as multiple lines makes no difference\n        // to an even left to right gradient\n        const totalIterations = fill.length + 1;\n        let currentIteration = 1;\n\n        for (let i = 0; i < fill.length; i++)\n        {\n            let stop: number;\n\n            if (typeof fillGradientStops[i] === 'number')\n            {\n                stop = fillGradientStops[i];\n            }\n            else\n            {\n                stop = currentIteration / totalIterations;\n            }\n            gradient.addColorStop(stop, fill[i]);\n            currentIteration++;\n        }\n    }\n\n    return gradient;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}