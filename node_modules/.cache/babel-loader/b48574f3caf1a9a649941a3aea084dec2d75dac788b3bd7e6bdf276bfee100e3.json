{"ast":null,"code":"import { Matrix } from '@pixi/math';\nimport { TextureMatrix } from '../../textures/TextureMatrix.mjs';\nimport { Filter } from '../Filter.mjs';\nimport fragment from './spriteMaskFilter2.mjs';\nimport vertex from './spriteMaskFilter3.mjs';\nclass SpriteMaskFilter extends Filter {\n  constructor(vertexSrc, fragmentSrc, uniforms) {\n    let sprite = null;\n    if (typeof vertexSrc !== \"string\" && fragmentSrc === void 0 && uniforms === void 0) {\n      sprite = vertexSrc;\n      vertexSrc = void 0;\n      fragmentSrc = void 0;\n      uniforms = void 0;\n    }\n    super(vertexSrc || vertex, fragmentSrc || fragment, uniforms);\n    this.maskSprite = sprite;\n    this.maskMatrix = new Matrix();\n  }\n  get maskSprite() {\n    return this._maskSprite;\n  }\n  set maskSprite(value) {\n    this._maskSprite = value;\n    if (this._maskSprite) {\n      this._maskSprite.renderable = false;\n    }\n  }\n  apply(filterManager, input, output, clearMode) {\n    const maskSprite = this._maskSprite;\n    const tex = maskSprite._texture;\n    if (!tex.valid) {\n      return;\n    }\n    if (!tex.uvMatrix) {\n      tex.uvMatrix = new TextureMatrix(tex, 0);\n    }\n    tex.uvMatrix.update();\n    this.uniforms.npmAlpha = tex.baseTexture.alphaMode ? 0 : 1;\n    this.uniforms.mask = tex;\n    this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, maskSprite).prepend(tex.uvMatrix.mapCoord);\n    this.uniforms.alpha = maskSprite.worldAlpha;\n    this.uniforms.maskClamp = tex.uvMatrix.uClampFrame;\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n}\nexport { SpriteMaskFilter };","map":{"version":3,"names":["SpriteMaskFilter","Filter","constructor","vertexSrc","fragmentSrc","uniforms","sprite","vertex","fragment","maskSprite","maskMatrix","Matrix","_maskSprite","value","renderable","apply","filterManager","input","output","clearMode","tex","_texture","valid","uvMatrix","TextureMatrix","update","npmAlpha","baseTexture","alphaMode","mask","otherMatrix","calculateSpriteMatrix","prepend","mapCoord","alpha","worldAlpha","maskClamp","uClampFrame","applyFilter"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\filters\\spriteMask\\SpriteMaskFilter.ts"],"sourcesContent":["import { Matrix } from '@pixi/math';\nimport { TextureMatrix } from '../../textures/TextureMatrix';\nimport { Filter } from '../Filter';\nimport fragment from './spriteMaskFilter.frag';\nimport vertex from './spriteMaskFilter.vert';\n\nimport type { CLEAR_MODES } from '@pixi/constants';\nimport type { Point } from '@pixi/math';\nimport type { Dict } from '@pixi/utils';\nimport type { IMaskTarget } from '../../mask/MaskData';\nimport type { RenderTexture } from '../../renderTexture/RenderTexture';\nimport type { Texture } from '../../textures/Texture';\nimport type { FilterSystem } from '../FilterSystem';\n\nexport interface ISpriteMaskTarget extends IMaskTarget\n{\n    _texture: Texture;\n    worldAlpha: number;\n    anchor: Point;\n}\n\nexport interface ISpriteMaskFilter extends Filter\n{\n    maskSprite: IMaskTarget;\n}\n\n/**\n * This handles a Sprite acting as a mask, as opposed to a Graphic.\n *\n * WebGL only.\n * @memberof PIXI\n */\nexport class SpriteMaskFilter extends Filter\n{\n    /** @private */\n    _maskSprite: IMaskTarget;\n\n    /** Mask matrix */\n    maskMatrix: Matrix;\n\n    /**\n     * @param {PIXI.Sprite} sprite - The target sprite.\n     */\n    constructor(sprite: IMaskTarget);\n\n    /**\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param uniforms - Custom uniforms to use to augment the built-in ones.\n     */\n    constructor(vertexSrc?: string, fragmentSrc?: string, uniforms?: Dict<any>);\n\n    /** @ignore */\n    constructor(vertexSrc?: string | IMaskTarget, fragmentSrc?: string, uniforms?: Dict<any>)\n    {\n        let sprite = null;\n\n        if (typeof vertexSrc !== 'string' && fragmentSrc === undefined && uniforms === undefined)\n        {\n            sprite = vertexSrc as IMaskTarget;\n            vertexSrc = undefined;\n            fragmentSrc = undefined;\n            uniforms = undefined;\n        }\n\n        super(vertexSrc as string || vertex, fragmentSrc || fragment, uniforms);\n\n        this.maskSprite = sprite;\n        this.maskMatrix = new Matrix();\n    }\n\n    /**\n     * Sprite mask\n     * @type {PIXI.DisplayObject}\n     */\n    get maskSprite(): IMaskTarget\n    {\n        return this._maskSprite;\n    }\n\n    set maskSprite(value: IMaskTarget)\n    {\n        this._maskSprite = value;\n\n        if (this._maskSprite)\n        {\n            this._maskSprite.renderable = false;\n        }\n    }\n\n    /**\n     * Applies the filter\n     * @param filterManager - The renderer to retrieve the filter from\n     * @param input - The input render target.\n     * @param output - The target to output to.\n     * @param clearMode - Should the output be cleared before rendering to it.\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES): void\n    {\n        const maskSprite = this._maskSprite as ISpriteMaskTarget;\n        const tex = maskSprite._texture;\n\n        if (!tex.valid)\n        {\n            return;\n        }\n        if (!tex.uvMatrix)\n        {\n            // margin = 0.0, let it bleed a bit, shader code becomes easier\n            // assuming that atlas textures were made with 1-pixel padding\n            tex.uvMatrix = new TextureMatrix(tex, 0.0);\n        }\n        tex.uvMatrix.update();\n\n        this.uniforms.npmAlpha = tex.baseTexture.alphaMode ? 0.0 : 1.0;\n        this.uniforms.mask = tex;\n        // get _normalized sprite texture coords_ and convert them to _normalized atlas texture coords_ with `prepend`\n        this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, maskSprite)\n            .prepend(tex.uvMatrix.mapCoord);\n        this.uniforms.alpha = maskSprite.worldAlpha;\n        this.uniforms.maskClamp = tex.uvMatrix.uClampFrame;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n}\n"],"mappings":";;;;;AAgCO,MAAMA,gBAAA,SAAyBC,MACtC;EAoBIC,YAAYC,SAAkC,EAAAC,WAAA,EAAsBC,QACpE;IACI,IAAIC,MAAS;IAEb,IAAI,OAAOH,SAAc,iBAAYC,WAAgB,eAAaC,QAAA,KAAa,KAC/E;MACaC,MAAA,GAAAH,SAAA;MACGA,SAAA;MACEC,WAAA;MACHC,QAAA;IAAA;IAGf,MAAMF,SAAuB,IAAAI,MAAA,EAAQH,WAAe,IAAAI,QAAA,EAAUH,QAAQ;IAEtE,KAAKI,UAAa,GAAAH,MAAA;IACb,KAAAI,UAAA,GAAa,IAAIC,MAAO;EAAA;EAOjC,IAAIF,UACJA,CAAA;IACI,OAAO,IAAK,CAAAG,WAAA;EAAA;EAGhB,IAAIH,WAAWI,KACf;IACI,KAAKD,WAAc,GAAAC,KAAA;IAEnB,IAAI,KAAKD,WACT;MACI,KAAKA,WAAA,CAAYE,UAAa;IAAA;EAClC;EAUJC,KAAMA,CAAAC,aAAA,EAA6BC,KAAsB,EAAAC,MAAA,EAAuBC,SAChF;IACI,MAAMV,UAAA,GAAa,IAAK,CAAAG,WAAA;IACxB,MAAMQ,GAAA,GAAMX,UAAW,CAAAY,QAAA;IAEnB,KAACD,GAAA,CAAIE,KACT;MACI;IAAA;IAEA,KAACF,GAAA,CAAIG,QACT;MAGIH,GAAA,CAAIG,QAAW,OAAIC,aAAc,CAAAJ,GAAA,EAAK,CAAG;IAAA;IAE7CA,GAAA,CAAIG,QAAA,CAASE,MAAO;IAEpB,KAAKpB,QAAS,CAAAqB,QAAA,GAAWN,GAAI,CAAAO,WAAA,CAAYC,SAAA,GAAY,CAAM;IAC3D,KAAKvB,QAAA,CAASwB,IAAO,GAAAT,GAAA;IAEhB,KAAAf,QAAA,CAASyB,WAAc,GAAAd,aAAA,CAAce,qBAAsB,MAAKrB,UAAY,EAAAD,UAAU,CACtF,CAAAuB,OAAA,CAAQZ,GAAI,CAAAG,QAAA,CAASU,QAAQ;IAC7B,KAAA5B,QAAA,CAAS6B,KAAA,GAAQzB,UAAW,CAAA0B,UAAA;IAC5B,KAAA9B,QAAA,CAAS+B,SAAY,GAAAhB,GAAA,CAAIG,QAAS,CAAAc,WAAA;IAEvCrB,aAAA,CAAcsB,WAAY,OAAMrB,KAAO,EAAAC,MAAA,EAAQC,SAAS;EAAA;AAEhE"},"metadata":{},"sourceType":"module","externalDependencies":[]}