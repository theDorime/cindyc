{"ast":null,"code":"import { SHAPES } from '../const.mjs';\nimport { Rectangle } from './Rectangle.mjs';\nclass Ellipse {\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let halfWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let halfHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    this.x = x;\n    this.y = y;\n    this.width = halfWidth;\n    this.height = halfHeight;\n    this.type = SHAPES.ELIP;\n  }\n  clone() {\n    return new Ellipse(this.x, this.y, this.width, this.height);\n  }\n  contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    let normx = (x - this.x) / this.width;\n    let normy = (y - this.y) / this.height;\n    normx *= normx;\n    normy *= normy;\n    return normx + normy <= 1;\n  }\n  getBounds() {\n    return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n  }\n  toString() {\n    return `[@pixi/math:Ellipse x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n  }\n}\nexport { Ellipse };","map":{"version":3,"names":["Ellipse","constructor","x","arguments","length","undefined","y","halfWidth","halfHeight","width","height","type","SHAPES","ELIP","clone","contains","normx","normy","getBounds","Rectangle","toString"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\math\\src\\shapes\\Ellipse.ts"],"sourcesContent":["import { SHAPES } from '../const';\nimport { Rectangle } from './Rectangle';\n\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n * @memberof PIXI\n */\nexport class Ellipse\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.ELIP\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.ELIP;\n\n    /**\n     * @param x - The X coordinate of the center of this ellipse\n     * @param y - The Y coordinate of the center of this ellipse\n     * @param halfWidth - The half width of this ellipse\n     * @param halfHeight - The half height of this ellipse\n     */\n    constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.width = halfWidth;\n        this.height = halfHeight;\n\n        this.type = SHAPES.ELIP;\n    }\n\n    /**\n     * Creates a clone of this Ellipse instance\n     * @returns {PIXI.Ellipse} A copy of the ellipse\n     */\n    clone(): Ellipse\n    {\n        return new Ellipse(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coords are within this ellipse\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        // normalize the coords to an ellipse with center 0,0\n        let normx = ((x - this.x) / this.width);\n        let normy = ((y - this.y) / this.height);\n\n        normx *= normx;\n        normy *= normy;\n\n        return (normx + normy <= 1);\n    }\n\n    /**\n     * Returns the framing rectangle of the ellipse as a Rectangle object\n     * @returns The framing rectangle\n     */\n    getBounds(): Rectangle\n    {\n        return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Ellipse x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n    }\n    // #endif\n}\n"],"mappings":";;AAOO,MAAMA,OACb;EA0BIC,YAAA,EACA;IAAA,IADYC,CAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAI,CAAG;IAAA,IAAAG,CAAA,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAI;IAAA,IAAGI,SAAY,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;IAAA,IAAGK,UAAA,GAAAL,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAa,CACtD;IACI,KAAKD,CAAI,GAAAA,CAAA;IACT,KAAKI,CAAI,GAAAA,CAAA;IACT,KAAKG,KAAQ,GAAAF,SAAA;IACb,KAAKG,MAAS,GAAAF,UAAA;IAEd,KAAKG,IAAA,GAAOC,MAAO,CAAAC,IAAA;EAAA;EAOvBC,KACAA,CAAA;IACW,WAAId,OAAA,CAAQ,IAAK,CAAAE,CAAA,EAAG,KAAKI,CAAG,OAAKG,KAAO,OAAKC,MAAM;EAAA;EAS9DK,SAASb,CAAA,EAAWI,CACpB;IACI,IAAI,IAAK,CAAAG,KAAA,IAAS,CAAK,SAAKC,MAAA,IAAU,CACtC;MACW;IAAA;IAIX,IAAIM,KAAU,IAAAd,CAAA,GAAI,IAAK,CAAAA,CAAA,IAAK,IAAK,CAAAO,KAAA;IACjC,IAAIQ,KAAU,IAAAX,CAAA,GAAI,IAAK,CAAAA,CAAA,IAAK,IAAK,CAAAI,MAAA;IAExBM,KAAA,IAAAA,KAAA;IACAC,KAAA,IAAAA,KAAA;IAET,OAAQD,KAAA,GAAQC,KAAS;EAAA;EAO7BC,SACAA,CAAA;IACI,OAAO,IAAIC,SAAA,CAAU,IAAK,CAAAjB,CAAA,GAAI,IAAK,CAAAO,KAAA,EAAO,IAAK,CAAAH,CAAA,GAAI,IAAK,CAAAI,MAAA,EAAQ,IAAK,CAAAD,KAAA,EAAO,KAAKC,MAAM;EAAA;EAI3FU,QACAA,CAAA;IACI,OAAO,yBAAyB,IAAK,CAAAlB,CAAA,MAAO,KAAKI,CAAW,eAAKG,KAAA,WAAgB,IAAK,CAAAC,MAAA;EAAA;AAG9F"},"metadata":{},"sourceType":"module","externalDependencies":[]}