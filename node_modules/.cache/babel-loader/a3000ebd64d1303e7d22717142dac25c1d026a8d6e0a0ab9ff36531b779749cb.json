{"ast":null,"code":"import { SHAPES } from '../const.mjs';\nclass RoundedRectangle {\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let radius = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 20;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.radius = radius;\n    this.type = SHAPES.RREC;\n  }\n  clone() {\n    return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n  }\n  contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    if (x >= this.x && x <= this.x + this.width) {\n      if (y >= this.y && y <= this.y + this.height) {\n        const radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n        if (y >= this.y + radius && y <= this.y + this.height - radius || x >= this.x + radius && x <= this.x + this.width - radius) {\n          return true;\n        }\n        let dx = x - (this.x + radius);\n        let dy = y - (this.y + radius);\n        const radius2 = radius * radius;\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + this.width - radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dy = y - (this.y + this.height - radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  toString() {\n    return `[@pixi/math:RoundedRectangle x=${this.x} y=${this.y}width=${this.width} height=${this.height} radius=${this.radius}]`;\n  }\n}\nexport { RoundedRectangle };","map":{"version":3,"names":["RoundedRectangle","constructor","x","arguments","length","undefined","y","width","height","radius","type","SHAPES","RREC","clone","contains","Math","max","min","dx","dy","radius2","toString"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\math\\src\\shapes\\RoundedRectangle.ts"],"sourcesContent":["import { SHAPES } from '../const';\n\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n * @memberof PIXI\n */\nexport class RoundedRectangle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /** @default 20 */\n    public radius: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.RREC\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.RREC;\n\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n     * @param width - The overall width of this rounded rectangle\n     * @param height - The overall height of this rounded rectangle\n     * @param radius - Controls the radius of the rounded corners\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0, radius = 20)\n    {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.radius = radius;\n        this.type = SHAPES.RREC;\n    }\n\n    /**\n     * Creates a clone of this Rounded Rectangle.\n     * @returns - A copy of the rounded rectangle.\n     */\n    clone(): RoundedRectangle\n    {\n        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this Rounded Rectangle.\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n        if (x >= this.x && x <= this.x + this.width)\n        {\n            if (y >= this.y && y <= this.y + this.height)\n            {\n                const radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n\n                if ((y >= this.y + radius && y <= this.y + this.height - radius)\n                || (x >= this.x + radius && x <= this.x + this.width - radius))\n                {\n                    return true;\n                }\n                let dx = x - (this.x + radius);\n                let dy = y - (this.y + radius);\n                const radius2 = radius * radius;\n\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.width - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dy = y - (this.y + this.height - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:RoundedRectangle x=${this.x} y=${this.y}`\n            + `width=${this.width} height=${this.height} radius=${this.radius}]`;\n    }\n    // #endif\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}