{"ast":null,"code":"import { splitTextToCharacters } from './splitTextToCharacters.mjs';\nfunction resolveCharacters(chars) {\n  if (typeof chars === \"string\") {\n    chars = [chars];\n  }\n  const result = [];\n  for (let i = 0, j = chars.length; i < j; i++) {\n    const item = chars[i];\n    if (Array.isArray(item)) {\n      if (item.length !== 2) {\n        throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n      }\n      const startCode = item[0].charCodeAt(0);\n      const endCode = item[1].charCodeAt(0);\n      if (endCode < startCode) {\n        throw new Error(\"[BitmapFont]: Invalid character range.\");\n      }\n      for (let i2 = startCode, j2 = endCode; i2 <= j2; i2++) {\n        result.push(String.fromCharCode(i2));\n      }\n    } else {\n      result.push(...splitTextToCharacters(item));\n    }\n  }\n  if (result.length === 0) {\n    throw new Error(\"[BitmapFont]: Empty set when resolving characters.\");\n  }\n  return result;\n}\nexport { resolveCharacters };","map":{"version":3,"names":["resolveCharacters","chars","result","i","j","length","item","Array","isArray","Error","startCode","charCodeAt","endCode","i2","j2","push","String","fromCharCode","splitTextToCharacters"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\text-bitmap\\src\\utils\\resolveCharacters.ts"],"sourcesContent":["import { splitTextToCharacters } from './splitTextToCharacters';\n\n/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]} the flattened array of characters\n */\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        // Handle a character set string\n        else\n        {\n            result.push(...splitTextToCharacters(item));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n"],"mappings":";AAUO,SAAAA,kBAA2BC,KAClC;EAEQ,WAAOA,KAAA,KAAU,QACrB;IACIA,KAAA,GAAQ,CAACA,KAAK;EAAA;EAIlB,MAAMC,MAAA,GAAmB,EAAC;EAE1B,SAASC,CAAA,GAAI,CAAG,EAAAC,CAAA,GAAIH,KAAA,CAAMI,MAAQ,EAAAF,CAAA,GAAIC,CAAA,EAAGD,CACzC;IACI,MAAMG,IAAA,GAAOL,KAAM,CAAAE,CAAA;IAGf,IAAAI,KAAA,CAAMC,OAAQ,CAAAF,IAAI,CACtB;MACQ,IAAAA,IAAA,CAAKD,MAAA,KAAW,CACpB;QACI,MAAM,IAAII,KAAA,CAAuE,iEAAAH,IAAA,CAAKD,MAAS;MAAA;MAGnG,MAAMK,SAAY,GAAAJ,IAAA,CAAK,CAAG,EAAAK,UAAA,CAAW,CAAC;MACtC,MAAMC,OAAU,GAAAN,IAAA,CAAK,CAAG,EAAAK,UAAA,CAAW,CAAC;MAEpC,IAAIC,OAAA,GAAUF,SACd;QACU,UAAID,KAAA,CAAM,wCAAwC;MAAA;MAG5D,SAASI,EAAA,GAAIH,SAAW,EAAAI,EAAA,GAAIF,OAAS,EAAAC,EAAA,IAAKC,EAAA,EAAGD,EAC7C;QACIX,MAAA,CAAOa,IAAK,CAAAC,MAAA,CAAOC,YAAa,CAAAJ,EAAC,CAAC;MAAA;IACtC,CAIJ;MACIX,MAAA,CAAOa,IAAK,IAAGG,qBAAsB,CAAAZ,IAAI,CAAC;IAAA;EAC9C;EAGA,IAAAJ,MAAA,CAAOG,MAAA,KAAW,CACtB;IACU,UAAII,KAAA,CAAM,oDAAoD;EAAA;EAGjE,OAAAP,MAAA;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}