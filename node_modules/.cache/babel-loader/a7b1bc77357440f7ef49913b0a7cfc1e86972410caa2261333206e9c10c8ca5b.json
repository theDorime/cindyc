{"ast":null,"code":"import { UPDATE_PRIORITY } from './const.mjs';\nimport { TickerListener } from './TickerListener.mjs';\nconst _Ticker = class {\n  constructor() {\n    this.autoStart = false;\n    this.deltaTime = 1;\n    this.lastTime = -1;\n    this.speed = 1;\n    this.started = false;\n    this._requestId = null;\n    this._maxElapsedMS = 100;\n    this._minElapsedMS = 0;\n    this._protected = false;\n    this._lastFrame = -1;\n    this._head = new TickerListener(null, null, Infinity);\n    this.deltaMS = 1 / _Ticker.targetFPMS;\n    this.elapsedMS = 1 / _Ticker.targetFPMS;\n    this._tick = time => {\n      this._requestId = null;\n      if (this.started) {\n        this.update(time);\n        if (this.started && this._requestId === null && this._head.next) {\n          this._requestId = requestAnimationFrame(this._tick);\n        }\n      }\n    };\n  }\n  _requestIfNeeded() {\n    if (this._requestId === null && this._head.next) {\n      this.lastTime = performance.now();\n      this._lastFrame = this.lastTime;\n      this._requestId = requestAnimationFrame(this._tick);\n    }\n  }\n  _cancelIfNeeded() {\n    if (this._requestId !== null) {\n      cancelAnimationFrame(this._requestId);\n      this._requestId = null;\n    }\n  }\n  _startIfPossible() {\n    if (this.started) {\n      this._requestIfNeeded();\n    } else if (this.autoStart) {\n      this.start();\n    }\n  }\n  add(fn, context) {\n    let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : UPDATE_PRIORITY.NORMAL;\n    return this._addListener(new TickerListener(fn, context, priority));\n  }\n  addOnce(fn, context) {\n    let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : UPDATE_PRIORITY.NORMAL;\n    return this._addListener(new TickerListener(fn, context, priority, true));\n  }\n  _addListener(listener) {\n    let current = this._head.next;\n    let previous = this._head;\n    if (!current) {\n      listener.connect(previous);\n    } else {\n      while (current) {\n        if (listener.priority > current.priority) {\n          listener.connect(previous);\n          break;\n        }\n        previous = current;\n        current = current.next;\n      }\n      if (!listener.previous) {\n        listener.connect(previous);\n      }\n    }\n    this._startIfPossible();\n    return this;\n  }\n  remove(fn, context) {\n    let listener = this._head.next;\n    while (listener) {\n      if (listener.match(fn, context)) {\n        listener = listener.destroy();\n      } else {\n        listener = listener.next;\n      }\n    }\n    if (!this._head.next) {\n      this._cancelIfNeeded();\n    }\n    return this;\n  }\n  get count() {\n    if (!this._head) {\n      return 0;\n    }\n    let count = 0;\n    let current = this._head;\n    while (current = current.next) {\n      count++;\n    }\n    return count;\n  }\n  start() {\n    if (!this.started) {\n      this.started = true;\n      this._requestIfNeeded();\n    }\n  }\n  stop() {\n    if (this.started) {\n      this.started = false;\n      this._cancelIfNeeded();\n    }\n  }\n  destroy() {\n    if (!this._protected) {\n      this.stop();\n      let listener = this._head.next;\n      while (listener) {\n        listener = listener.destroy(true);\n      }\n      this._head.destroy();\n      this._head = null;\n    }\n  }\n  update() {\n    let currentTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : performance.now();\n    let elapsedMS;\n    if (currentTime > this.lastTime) {\n      elapsedMS = this.elapsedMS = currentTime - this.lastTime;\n      if (elapsedMS > this._maxElapsedMS) {\n        elapsedMS = this._maxElapsedMS;\n      }\n      elapsedMS *= this.speed;\n      if (this._minElapsedMS) {\n        const delta = currentTime - this._lastFrame | 0;\n        if (delta < this._minElapsedMS) {\n          return;\n        }\n        this._lastFrame = currentTime - delta % this._minElapsedMS;\n      }\n      this.deltaMS = elapsedMS;\n      this.deltaTime = this.deltaMS * _Ticker.targetFPMS;\n      const head = this._head;\n      let listener = head.next;\n      while (listener) {\n        listener = listener.emit(this.deltaTime);\n      }\n      if (!head.next) {\n        this._cancelIfNeeded();\n      }\n    } else {\n      this.deltaTime = this.deltaMS = this.elapsedMS = 0;\n    }\n    this.lastTime = currentTime;\n  }\n  get FPS() {\n    return 1e3 / this.elapsedMS;\n  }\n  get minFPS() {\n    return 1e3 / this._maxElapsedMS;\n  }\n  set minFPS(fps) {\n    const minFPS = Math.min(this.maxFPS, fps);\n    const minFPMS = Math.min(Math.max(0, minFPS) / 1e3, _Ticker.targetFPMS);\n    this._maxElapsedMS = 1 / minFPMS;\n  }\n  get maxFPS() {\n    if (this._minElapsedMS) {\n      return Math.round(1e3 / this._minElapsedMS);\n    }\n    return 0;\n  }\n  set maxFPS(fps) {\n    if (fps === 0) {\n      this._minElapsedMS = 0;\n    } else {\n      const maxFPS = Math.max(this.minFPS, fps);\n      this._minElapsedMS = 1 / (maxFPS / 1e3);\n    }\n  }\n  static get shared() {\n    if (!_Ticker._shared) {\n      const shared = _Ticker._shared = new _Ticker();\n      shared.autoStart = true;\n      shared._protected = true;\n    }\n    return _Ticker._shared;\n  }\n  static get system() {\n    if (!_Ticker._system) {\n      const system = _Ticker._system = new _Ticker();\n      system.autoStart = true;\n      system._protected = true;\n    }\n    return _Ticker._system;\n  }\n};\nlet Ticker = _Ticker;\nTicker.targetFPMS = 0.06;\nexport { Ticker };","map":{"version":3,"names":["_Ticker","constructor","autoStart","deltaTime","lastTime","speed","started","_requestId","_maxElapsedMS","_minElapsedMS","_protected","_lastFrame","_head","TickerListener","Infinity","deltaMS","targetFPMS","elapsedMS","_tick","time","update","next","requestAnimationFrame","_requestIfNeeded","performance","now","_cancelIfNeeded","cancelAnimationFrame","_startIfPossible","start","add","fn","context","priority","arguments","length","undefined","UPDATE_PRIORITY","NORMAL","_addListener","addOnce","listener","current","previous","connect","remove","match","destroy","count","stop","currentTime","delta","head","emit","FPS","minFPS","fps","Math","min","maxFPS","minFPMS","max","round","shared","_shared","system","_system","Ticker"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\ticker\\src\\Ticker.ts"],"sourcesContent":["import { UPDATE_PRIORITY } from './const';\nimport { TickerListener } from './TickerListener';\n\nexport type TickerCallback<T> = (this: T, dt: number) => any;\n\n/**\n * A Ticker class that runs an update loop that other objects listen to.\n *\n * This class is composed around listeners meant for execution on the next requested animation frame.\n * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.\n * @class\n * @memberof PIXI\n */\nexport class Ticker\n{\n    /**\n     * Target frames per millisecond.\n     * @static\n     */\n    public static targetFPMS = 0.06;\n\n    /** The private shared ticker instance */\n    private static _shared: Ticker;\n    /** The private system ticker instance  */\n    private static _system: Ticker;\n\n    /**\n     * Whether or not this ticker should invoke the method\n     * {@link PIXI.Ticker#start} automatically\n     * when a listener is added.\n     */\n    public autoStart = false;\n    /**\n     * Scalar time value from last frame to this frame.\n     * This value is capped by setting {@link PIXI.Ticker#minFPS}\n     * and is scaled with {@link PIXI.Ticker#speed}.\n     * **Note:** The cap may be exceeded by scaling.\n     */\n    public deltaTime = 1;\n    /**\n     * Scaler time elapsed in milliseconds from last frame to this frame.\n     * This value is capped by setting {@link PIXI.Ticker#minFPS}\n     * and is scaled with {@link PIXI.Ticker#speed}.\n     * **Note:** The cap may be exceeded by scaling.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 µs.\n     * Defaults to target frame time\n     * @default 16.66\n     */\n    public deltaMS: number;\n    /**\n     * Time elapsed in milliseconds from last frame to this frame.\n     * Opposed to what the scalar {@link PIXI.Ticker#deltaTime}\n     * is based, this value is neither capped nor scaled.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 µs.\n     * Defaults to target frame time\n     * @default 16.66\n     */\n    public elapsedMS: number;\n    /**\n     * The last time {@link PIXI.Ticker#update} was invoked.\n     * This value is also reset internally outside of invoking\n     * update, but only when a new animation frame is requested.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 µs.\n     */\n    public lastTime = -1;\n    /**\n     * Factor of current {@link PIXI.Ticker#deltaTime}.\n     * @example\n     * // Scales ticker.deltaTime to what would be\n     * // the equivalent of approximately 120 FPS\n     * ticker.speed = 2;\n     */\n    public speed = 1;\n    /**\n     * Whether or not this ticker has been started.\n     * `true` if {@link PIXI.Ticker#start} has been called.\n     * `false` if {@link PIXI.Ticker#stop} has been called.\n     * While `false`, this value may change to `true` in the\n     * event of {@link PIXI.Ticker#autoStart} being `true`\n     * and a listener is added.\n     */\n    public started = false;\n\n    /** The first listener. All new listeners added are chained on this. */\n    private _head: TickerListener;\n    /** Internal current frame request ID */\n    private _requestId: number = null;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the maximum allowed milliseconds between updates.\n     */\n    private _maxElapsedMS = 100;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the minimum allowed milliseconds between updates.\n     */\n    private _minElapsedMS = 0;\n    /** If enabled, deleting is disabled.*/\n    private _protected = false;\n    /** The last time keyframe was executed. Maintains a relatively fixed interval with the previous value. */\n    private _lastFrame = -1;\n    /**\n     * Internal tick method bound to ticker instance.\n     * This is because in early 2015, Function.bind\n     * is still 60% slower in high performance scenarios.\n     * Also separating frame requests from update method\n     * so listeners may be called at any time and with\n     * any animation API, just invoke ticker.update(time).\n     * @param time - Time since last tick.\n     */\n    private _tick: (time: number) => any;\n\n    constructor()\n    {\n        this._head = new TickerListener(null, null, Infinity);\n        this.deltaMS = 1 / Ticker.targetFPMS;\n        this.elapsedMS = 1 / Ticker.targetFPMS;\n\n        this._tick = (time: number): void =>\n        {\n            this._requestId = null;\n\n            if (this.started)\n            {\n                // Invoke listeners now\n                this.update(time);\n                // Listener side effects may have modified ticker state.\n                if (this.started && this._requestId === null && this._head.next)\n                {\n                    this._requestId = requestAnimationFrame(this._tick);\n                }\n            }\n        };\n    }\n\n    /**\n     * Conditionally requests a new animation frame.\n     * If a frame has not already been requested, and if the internal\n     * emitter has listeners, a new frame is requested.\n     * @private\n     */\n    private _requestIfNeeded(): void\n    {\n        if (this._requestId === null && this._head.next)\n        {\n            // ensure callbacks get correct delta\n            this.lastTime = performance.now();\n            this._lastFrame = this.lastTime;\n            this._requestId = requestAnimationFrame(this._tick);\n        }\n    }\n\n    /**\n     * Conditionally cancels a pending animation frame.\n     * @private\n     */\n    private _cancelIfNeeded(): void\n    {\n        if (this._requestId !== null)\n        {\n            cancelAnimationFrame(this._requestId);\n            this._requestId = null;\n        }\n    }\n\n    /**\n     * Conditionally requests a new animation frame.\n     * If the ticker has been started it checks if a frame has not already\n     * been requested, and if the internal emitter has listeners. If these\n     * conditions are met, a new frame is requested. If the ticker has not\n     * been started, but autoStart is `true`, then the ticker starts now,\n     * and continues with the previous conditions to request a new frame.\n     * @private\n     */\n    private _startIfPossible(): void\n    {\n        if (this.started)\n        {\n            this._requestIfNeeded();\n        }\n        else if (this.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Register a handler for tick events. Calls continuously unless\n     * it is removed or the ticker is stopped.\n     * @param fn - The listener function to be added for updates\n     * @param context - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */\n    add<T = any>(fn: TickerCallback<T>, context?: T, priority = UPDATE_PRIORITY.NORMAL): this\n    {\n        return this._addListener(new TickerListener(fn, context, priority));\n    }\n\n    /**\n     * Add a handler for the tick event which is only execute once.\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */\n    addOnce<T = any>(fn: TickerCallback<T>, context?: T, priority = UPDATE_PRIORITY.NORMAL): this\n    {\n        return this._addListener(new TickerListener(fn, context, priority, true));\n    }\n\n    /**\n     * Internally adds the event handler so that it can be sorted by priority.\n     * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run\n     * before the rendering.\n     * @private\n     * @param listener - Current listener being added.\n     * @returns This instance of a ticker\n     */\n    private _addListener(listener: TickerListener): this\n    {\n        // For attaching to head\n        let current = this._head.next;\n        let previous = this._head;\n\n        // Add the first item\n        if (!current)\n        {\n            listener.connect(previous);\n        }\n        else\n        {\n            // Go from highest to lowest priority\n            while (current)\n            {\n                if (listener.priority > current.priority)\n                {\n                    listener.connect(previous);\n                    break;\n                }\n                previous = current;\n                current = current.next;\n            }\n\n            // Not yet connected\n            if (!listener.previous)\n            {\n                listener.connect(previous);\n            }\n        }\n\n        this._startIfPossible();\n\n        return this;\n    }\n\n    /**\n     * Removes any handlers matching the function and context parameters.\n     * If no handlers are left after removing, then it cancels the animation frame.\n     * @param fn - The listener function to be removed\n     * @param context - The listener context to be removed\n     * @returns This instance of a ticker\n     */\n    remove<T = any>(fn: TickerCallback<T>, context?: T): this\n    {\n        let listener = this._head.next;\n\n        while (listener)\n        {\n            // We found a match, lets remove it\n            // no break to delete all possible matches\n            // incase a listener was added 2+ times\n            if (listener.match(fn, context))\n            {\n                listener = listener.destroy();\n            }\n            else\n            {\n                listener = listener.next;\n            }\n        }\n\n        if (!this._head.next)\n        {\n            this._cancelIfNeeded();\n        }\n\n        return this;\n    }\n\n    /**\n     * The number of listeners on this ticker, calculated by walking through linked list\n     * @readonly\n     * @member {number}\n     */\n    get count(): number\n    {\n        if (!this._head)\n        {\n            return 0;\n        }\n\n        let count = 0;\n        let current = this._head;\n\n        while ((current = current.next))\n        {\n            count++;\n        }\n\n        return count;\n    }\n\n    /** Starts the ticker. If the ticker has listeners a new animation frame is requested at this point. */\n    start(): void\n    {\n        if (!this.started)\n        {\n            this.started = true;\n            this._requestIfNeeded();\n        }\n    }\n\n    /** Stops the ticker. If the ticker has requested an animation frame it is canceled at this point. */\n    stop(): void\n    {\n        if (this.started)\n        {\n            this.started = false;\n            this._cancelIfNeeded();\n        }\n    }\n\n    /** Destroy the ticker and don't use after this. Calling this method removes all references to internal events. */\n    destroy(): void\n    {\n        if (!this._protected)\n        {\n            this.stop();\n\n            let listener = this._head.next;\n\n            while (listener)\n            {\n                listener = listener.destroy(true);\n            }\n\n            this._head.destroy();\n            this._head = null;\n        }\n    }\n\n    /**\n     * Triggers an update. An update entails setting the\n     * current {@link PIXI.Ticker#elapsedMS},\n     * the current {@link PIXI.Ticker#deltaTime},\n     * invoking all listeners with current deltaTime,\n     * and then finally setting {@link PIXI.Ticker#lastTime}\n     * with the value of currentTime that was provided.\n     * This method will be called automatically by animation\n     * frame callbacks if the ticker instance has been started\n     * and listeners are added.\n     * @param {number} [currentTime=performance.now()] - the current time of execution\n     */\n    update(currentTime = performance.now()): void\n    {\n        let elapsedMS;\n\n        // If the difference in time is zero or negative, we ignore most of the work done here.\n        // If there is no valid difference, then should be no reason to let anyone know about it.\n        // A zero delta, is exactly that, nothing should update.\n        //\n        // The difference in time can be negative, and no this does not mean time traveling.\n        // This can be the result of a race condition between when an animation frame is requested\n        // on the current JavaScript engine event loop, and when the ticker's start method is invoked\n        // (which invokes the internal _requestIfNeeded method). If a frame is requested before\n        // _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,\n        // can receive a time argument that can be less than the lastTime value that was set within\n        // _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.\n        //\n        // This check covers this browser engine timing issue, as well as if consumers pass an invalid\n        // currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.\n\n        if (currentTime > this.lastTime)\n        {\n            // Save uncapped elapsedMS for measurement\n            elapsedMS = this.elapsedMS = currentTime - this.lastTime;\n\n            // cap the milliseconds elapsed used for deltaTime\n            if (elapsedMS > this._maxElapsedMS)\n            {\n                elapsedMS = this._maxElapsedMS;\n            }\n\n            elapsedMS *= this.speed;\n\n            // If not enough time has passed, exit the function.\n            // Get ready for next frame by setting _lastFrame, but based on _minElapsedMS\n            // adjustment to ensure a relatively stable interval.\n            if (this._minElapsedMS)\n            {\n                const delta = currentTime - this._lastFrame | 0;\n\n                if (delta < this._minElapsedMS)\n                {\n                    return;\n                }\n\n                this._lastFrame = currentTime - (delta % this._minElapsedMS);\n            }\n\n            this.deltaMS = elapsedMS;\n            this.deltaTime = this.deltaMS * Ticker.targetFPMS;\n\n            // Cache a local reference, in-case ticker is destroyed\n            // during the emit, we can still check for head.next\n            const head = this._head;\n\n            // Invoke listeners added to internal emitter\n            let listener = head.next;\n\n            while (listener)\n            {\n                listener = listener.emit(this.deltaTime);\n            }\n\n            if (!head.next)\n            {\n                this._cancelIfNeeded();\n            }\n        }\n        else\n        {\n            this.deltaTime = this.deltaMS = this.elapsedMS = 0;\n        }\n\n        this.lastTime = currentTime;\n    }\n\n    /**\n     * The frames per second at which this ticker is running.\n     * The default is approximately 60 in most modern browsers.\n     * **Note:** This does not factor in the value of\n     * {@link PIXI.Ticker#speed}, which is specific\n     * to scaling {@link PIXI.Ticker#deltaTime}.\n     * @member {number}\n     * @readonly\n     */\n    get FPS(): number\n    {\n        return 1000 / this.elapsedMS;\n    }\n\n    /**\n     * Manages the maximum amount of milliseconds allowed to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This value is used to cap {@link PIXI.Ticker#deltaTime},\n     * but does not effect the measured value of {@link PIXI.Ticker#FPS}.\n     * When setting this property it is clamped to a value between\n     * `0` and `Ticker.targetFPMS * 1000`.\n     * @member {number}\n     * @default 10\n     */\n    get minFPS(): number\n    {\n        return 1000 / this._maxElapsedMS;\n    }\n\n    set minFPS(fps: number)\n    {\n        // Minimum must be below the maxFPS\n        const minFPS = Math.min(this.maxFPS, fps);\n\n        // Must be at least 0, but below 1 / Ticker.targetFPMS\n        const minFPMS = Math.min(Math.max(0, minFPS) / 1000, Ticker.targetFPMS);\n\n        this._maxElapsedMS = 1 / minFPMS;\n    }\n\n    /**\n     * Manages the minimum amount of milliseconds required to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This will effect the measured value of {@link PIXI.Ticker#FPS}.\n     * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.\n     * Otherwise it will be at least `minFPS`\n     * @member {number}\n     * @default 0\n     */\n    get maxFPS(): number\n    {\n        if (this._minElapsedMS)\n        {\n            return Math.round(1000 / this._minElapsedMS);\n        }\n\n        return 0;\n    }\n\n    set maxFPS(fps: number)\n    {\n        if (fps === 0)\n        {\n            this._minElapsedMS = 0;\n        }\n        else\n        {\n            // Max must be at least the minFPS\n            const maxFPS = Math.max(this.minFPS, fps);\n\n            this._minElapsedMS = 1 / (maxFPS / 1000);\n        }\n    }\n\n    /**\n     * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by\n     * {@link PIXI.VideoResource} to update animation frames / video textures.\n     *\n     * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.\n     * @example\n     * import { Ticker } from 'pixi.js';\n     *\n     * const ticker = Ticker.shared;\n     * // Set this to prevent starting this ticker when listeners are added.\n     * // By default this is true only for the PIXI.Ticker.shared instance.\n     * ticker.autoStart = false;\n     *\n     * // FYI, call this to ensure the ticker is stopped. It should be stopped\n     * // if you have not attempted to render anything yet.\n     * ticker.stop();\n     *\n     * // Call this when you are ready for a running shared ticker.\n     * ticker.start();\n     * @example\n     * import { autoDetectRenderer, Container } from 'pixi.js';\n     *\n     * // You may use the shared ticker to render...\n     * const renderer = autoDetectRenderer();\n     * const stage = new Container();\n     * document.body.appendChild(renderer.view);\n     * ticker.add((time) => renderer.render(stage));\n     *\n     * // Or you can just update it manually.\n     * ticker.autoStart = false;\n     * ticker.stop();\n     * const animate = (time) => {\n     *     ticker.update(time);\n     *     renderer.render(stage);\n     *     requestAnimationFrame(animate);\n     * };\n     * animate(performance.now());\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    static get shared(): Ticker\n    {\n        if (!Ticker._shared)\n        {\n            const shared = Ticker._shared = new Ticker();\n\n            shared.autoStart = true;\n            shared._protected = true;\n        }\n\n        return Ticker._shared;\n    }\n\n    /**\n     * The system ticker instance used by {@link PIXI.BasePrepare} for core timing\n     * functionality that shouldn't usually need to be paused, unlike the `shared`\n     * ticker which drives visual animations and rendering which may want to be paused.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    static get system(): Ticker\n    {\n        if (!Ticker._system)\n        {\n            const system = Ticker._system = new Ticker();\n\n            system.autoStart = true;\n            system._protected = true;\n        }\n\n        return Ticker._system;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}