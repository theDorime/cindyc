{"ast":null,"code":"import { GLProgram } from '../GLProgram.mjs';\nimport { compileShader } from './compileShader.mjs';\nimport { defaultValue } from './defaultValue.mjs';\nimport { getAttributeData } from './getAttributeData.mjs';\nimport { getUniformData } from './getUniformData.mjs';\nimport { logProgramError } from './logProgramError.mjs';\nfunction generateProgram(gl, program) {\n  const glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertexSrc);\n  const glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragmentSrc);\n  const webGLProgram = gl.createProgram();\n  gl.attachShader(webGLProgram, glVertShader);\n  gl.attachShader(webGLProgram, glFragShader);\n  const transformFeedbackVaryings = program.extra?.transformFeedbackVaryings;\n  if (transformFeedbackVaryings) {\n    if (typeof gl.transformFeedbackVaryings !== \"function\") {\n      console.warn(`TransformFeedback is not supported but TransformFeedbackVaryings are given.`);\n    } else {\n      gl.transformFeedbackVaryings(webGLProgram, transformFeedbackVaryings.names, transformFeedbackVaryings.bufferMode === \"separate\" ? gl.SEPARATE_ATTRIBS : gl.INTERLEAVED_ATTRIBS);\n    }\n  }\n  gl.linkProgram(webGLProgram);\n  if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS)) {\n    logProgramError(gl, webGLProgram, glVertShader, glFragShader);\n  }\n  program.attributeData = getAttributeData(webGLProgram, gl);\n  program.uniformData = getUniformData(webGLProgram, gl);\n  if (!/^[ \\t]*#[ \\t]*version[ \\t]+300[ \\t]+es[ \\t]*$/m.test(program.vertexSrc)) {\n    const keys = Object.keys(program.attributeData);\n    keys.sort((a, b) => a > b ? 1 : -1);\n    for (let i = 0; i < keys.length; i++) {\n      program.attributeData[keys[i]].location = i;\n      gl.bindAttribLocation(webGLProgram, i, keys[i]);\n    }\n    gl.linkProgram(webGLProgram);\n  }\n  gl.deleteShader(glVertShader);\n  gl.deleteShader(glFragShader);\n  const uniformData = {};\n  for (const i in program.uniformData) {\n    const data = program.uniformData[i];\n    uniformData[i] = {\n      location: gl.getUniformLocation(webGLProgram, i),\n      value: defaultValue(data.type, data.size)\n    };\n  }\n  const glProgram = new GLProgram(webGLProgram, uniformData);\n  return glProgram;\n}\nexport { generateProgram };","map":{"version":3,"names":["generateProgram","gl","program","glVertShader","compileShader","VERTEX_SHADER","vertexSrc","glFragShader","FRAGMENT_SHADER","fragmentSrc","webGLProgram","createProgram","attachShader","transformFeedbackVaryings","extra","console","warn","names","bufferMode","SEPARATE_ATTRIBS","INTERLEAVED_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","logProgramError","attributeData","getAttributeData","uniformData","getUniformData","test","keys","Object","sort","a","b","i","length","location","bindAttribLocation","deleteShader","data","getUniformLocation","value","defaultValue","type","size","glProgram","GLProgram"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\shader\\utils\\generateProgram.ts"],"sourcesContent":["import { GLProgram } from '../GLProgram';\nimport { compileShader } from './compileShader';\nimport { defaultValue } from './defaultValue';\nimport { getAttributeData } from './getAttributeData';\nimport { getUniformData } from './getUniformData';\nimport { logProgramError } from './logProgramError';\n\nimport type { IRenderingContext } from '../../IRenderer';\nimport type { IGLUniformData } from '../GLProgram';\nimport type { Program } from '../Program';\n\n/**\n * generates a WebGL Program object from a high level Pixi Program.\n * @param gl - a rendering context on which to generate the program\n * @param program - the high level Pixi Program.\n */\nexport function generateProgram(gl: IRenderingContext, program: Program): GLProgram\n{\n    const glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertexSrc);\n    const glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragmentSrc);\n\n    const webGLProgram = gl.createProgram();\n\n    gl.attachShader(webGLProgram, glVertShader);\n    gl.attachShader(webGLProgram, glFragShader);\n\n    const transformFeedbackVaryings = program.extra?.transformFeedbackVaryings;\n\n    if (transformFeedbackVaryings)\n    {\n        if (typeof gl.transformFeedbackVaryings !== 'function')\n        {\n            // #if _DEBUG\n            console.warn(`TransformFeedback is not supported but TransformFeedbackVaryings are given.`);\n            // #endif\n        }\n        else\n        {\n            gl.transformFeedbackVaryings(\n                webGLProgram,\n                transformFeedbackVaryings.names,\n                transformFeedbackVaryings.bufferMode === 'separate'\n                    ? gl.SEPARATE_ATTRIBS\n                    : gl.INTERLEAVED_ATTRIBS\n            );\n        }\n    }\n\n    gl.linkProgram(webGLProgram);\n\n    if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS))\n    {\n        logProgramError(gl, webGLProgram, glVertShader, glFragShader);\n    }\n\n    program.attributeData = getAttributeData(webGLProgram, gl);\n    program.uniformData = getUniformData(webGLProgram, gl);\n\n    // GLSL 1.00: bind attributes sorted by name in ascending order\n    // GLSL 3.00: don't change the attribute locations that where chosen by the compiler\n    //            or assigned by the layout specifier in the shader source code\n    if (!(/^[ \\t]*#[ \\t]*version[ \\t]+300[ \\t]+es[ \\t]*$/m).test(program.vertexSrc))\n    {\n        const keys = Object.keys(program.attributeData);\n\n        keys.sort((a, b) => (a > b) ? 1 : -1); // eslint-disable-line no-confusing-arrow\n\n        for (let i = 0; i < keys.length; i++)\n        {\n            program.attributeData[keys[i]].location = i;\n\n            gl.bindAttribLocation(webGLProgram, i, keys[i]);\n        }\n\n        gl.linkProgram(webGLProgram);\n    }\n\n    gl.deleteShader(glVertShader);\n    gl.deleteShader(glFragShader);\n\n    const uniformData: {[key: string]: IGLUniformData} = {};\n\n    for (const i in program.uniformData)\n    {\n        const data = program.uniformData[i];\n\n        uniformData[i] = {\n            location: gl.getUniformLocation(webGLProgram, i),\n            value: defaultValue(data.type, data.size),\n        };\n    }\n\n    const glProgram = new GLProgram(webGLProgram, uniformData);\n\n    return glProgram;\n}\n"],"mappings":";;;;;;AAgBO,SAAAA,gBAAyBC,EAAA,EAAuBC,OACvD;EACI,MAAMC,YAAA,GAAeC,aAAc,CAAAH,EAAA,EAAIA,EAAG,CAAAI,aAAA,EAAeH,OAAA,CAAQI,SAAS;EAC1E,MAAMC,YAAA,GAAeH,aAAc,CAAAH,EAAA,EAAIA,EAAG,CAAAO,eAAA,EAAiBN,OAAA,CAAQO,WAAW;EAExE,MAAAC,YAAA,GAAeT,EAAA,CAAGU,aAAc;EAEnCV,EAAA,CAAAW,YAAA,CAAaF,YAAA,EAAcP,YAAY;EACvCF,EAAA,CAAAW,YAAA,CAAaF,YAAA,EAAcH,YAAY;EAEpC,MAAAM,yBAAA,GAA4BX,OAAA,CAAQY,KAAO,EAAAD,yBAAA;EAEjD,IAAIA,yBACJ;IACQ,WAAOZ,EAAG,CAAAY,yBAAA,KAA8B,UAC5C;MAEIE,OAAA,CAAQC,IAAA,CAAkF;IAAA,CAI9F;MACOf,EAAA,CAAAY,yBAAA,CACCH,YACA,EAAAG,yBAAA,CAA0BI,KAC1B,EAAAJ,yBAAA,CAA0BK,UAAA,KAAe,UACnC,GAAAjB,EAAA,CAAGkB,gBACH,GAAAlB,EAAA,CAAGmB,mBACb;IAAA;EACJ;EAGJnB,EAAA,CAAGoB,WAAA,CAAYX,YAAY;EAE3B,IAAI,CAACT,EAAG,CAAAqB,mBAAA,CAAoBZ,YAAc,EAAAT,EAAA,CAAGsB,WAAW,CACxD;IACoBC,eAAA,CAAAvB,EAAA,EAAIS,YAAc,EAAAP,YAAA,EAAcI,YAAY;EAAA;EAGxDL,OAAA,CAAAuB,aAAA,GAAgBC,gBAAiB,CAAAhB,YAAA,EAAcT,EAAE;EACjDC,OAAA,CAAAyB,WAAA,GAAcC,cAAe,CAAAlB,YAAA,EAAcT,EAAE;EAKrD,IAAI,CAAE,iDAAkD4B,IAAK,CAAA3B,OAAA,CAAQI,SAAS,CAC9E;IACI,MAAMwB,IAAO,GAAAC,MAAA,CAAOD,IAAK,CAAA5B,OAAA,CAAQuB,aAAa;IAE9CK,IAAA,CAAKE,IAAA,CAAK,CAACC,CAAA,EAAGC,CAAA,KAAOD,CAAI,GAAAC,CAAA,GAAK,IAAI,CAAE;IAEpC,SAASC,CAAI,MAAGA,CAAI,GAAAL,IAAA,CAAKM,MAAA,EAAQD,CACjC;MACYjC,OAAA,CAAAuB,aAAA,CAAcK,IAAK,CAAAK,CAAA,GAAIE,QAAW,GAAAF,CAAA;MAE1ClC,EAAA,CAAGqC,kBAAmB,CAAA5B,YAAA,EAAcyB,CAAG,EAAAL,IAAA,CAAKK,CAAE;IAAA;IAGlDlC,EAAA,CAAGoB,WAAA,CAAYX,YAAY;EAAA;EAG/BT,EAAA,CAAGsC,YAAA,CAAapC,YAAY;EAC5BF,EAAA,CAAGsC,YAAA,CAAahC,YAAY;EAE5B,MAAMoB,WAAA,GAA+C,EAAC;EAE3C,WAAAQ,CAAA,IAAKjC,OAAA,CAAQyB,WACxB;IACU,MAAAa,IAAA,GAAOtC,OAAA,CAAQyB,WAAY,CAAAQ,CAAA;IAEjCR,WAAA,CAAYQ,CAAK;MACbE,QAAU,EAAApC,EAAA,CAAGwC,kBAAmB,CAAA/B,YAAA,EAAcyB,CAAC;MAC/CO,KAAO,EAAAC,YAAA,CAAaH,IAAK,CAAAI,IAAA,EAAMJ,IAAA,CAAKK,IAAI;IAAA,CAC5C;EAAA;EAGJ,MAAMC,SAAY,OAAIC,SAAU,CAAArC,YAAA,EAAciB,WAAW;EAElD,OAAAmB,SAAA;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}