{"ast":null,"code":"import { getBufferType } from './getBufferType.mjs';\nconst map = {\n  Float32Array,\n  Uint32Array,\n  Int32Array,\n  Uint8Array\n};\nfunction interleaveTypedArrays(arrays, sizes) {\n  let outSize = 0;\n  let stride = 0;\n  const views = {};\n  for (let i = 0; i < arrays.length; i++) {\n    stride += sizes[i];\n    outSize += arrays[i].length;\n  }\n  const buffer = new ArrayBuffer(outSize * 4);\n  let out = null;\n  let littleOffset = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const size = sizes[i];\n    const array = arrays[i];\n    const type = getBufferType(array);\n    if (!views[type]) {\n      views[type] = new map[type](buffer);\n    }\n    out = views[type];\n    for (let j = 0; j < array.length; j++) {\n      const indexStart = (j / size | 0) * stride + littleOffset;\n      const index = j % size;\n      out[indexStart + index] = array[j];\n    }\n    littleOffset += size;\n  }\n  return new Float32Array(buffer);\n}\nexport { interleaveTypedArrays };","map":{"version":3,"names":["map","Float32Array","Uint32Array","Int32Array","Uint8Array","interleaveTypedArrays","arrays","sizes","outSize","stride","views","i","length","buffer","ArrayBuffer","out","littleOffset","size","array","type","getBufferType","j","indexStart","index"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\utils\\src\\data\\interleaveTypedArrays.ts"],"sourcesContent":["import { getBufferType } from './getBufferType';\n\n/* eslint-disable object-shorthand */\nconst map = { Float32Array: Float32Array, Uint32Array: Uint32Array, Int32Array: Int32Array, Uint8Array: Uint8Array };\n\ntype PackedArray = Float32Array | Uint32Array | Int32Array | Uint8Array;\n\nexport function interleaveTypedArrays(arrays: PackedArray[], sizes: number[]): Float32Array\n{\n    let outSize = 0;\n    let stride = 0;\n    const views: {[key: string]: PackedArray} = {};\n\n    for (let i = 0; i < arrays.length; i++)\n    {\n        stride += sizes[i];\n        outSize += arrays[i].length;\n    }\n\n    const buffer = new ArrayBuffer(outSize * 4);\n\n    let out = null;\n    let littleOffset = 0;\n\n    for (let i = 0; i < arrays.length; i++)\n    {\n        const size = sizes[i];\n        const array = arrays[i];\n\n        /*\n        @todo This is unsafe casting but consistent with how the code worked previously. Should it stay this way\n              or should and `getBufferTypeUnsafe` function be exposed that throws an Error if unsupported type is passed?\n         */\n        const type = getBufferType(array) as keyof typeof map;\n\n        if (!views[type])\n        {\n            views[type] = new map[type](buffer);\n        }\n\n        out = views[type];\n\n        for (let j = 0; j < array.length; j++)\n        {\n            const indexStart = ((j / size | 0) * stride) + littleOffset;\n            const index = j % size;\n\n            out[indexStart + index] = array[j];\n        }\n\n        littleOffset += size;\n    }\n\n    return new Float32Array(buffer);\n}\n"],"mappings":";AAGA,MAAMA,GAAM;EAAEC,YAA4B;EAAAC,WAAA;EAA0BC,UAAA;EAAwBC;AAAuB;AAI5G,SAAAC,sBAA+BC,MAAA,EAAuBC,KAC7D;EACI,IAAIC,OAAU;EACd,IAAIC,MAAS;EACb,MAAMC,KAAA,GAAsC,EAAC;EAE7C,SAASC,CAAI,MAAGA,CAAI,GAAAL,MAAA,CAAOM,MAAA,EAAQD,CACnC;IACIF,MAAA,IAAUF,KAAM,CAAAI,CAAA;IAChBH,OAAA,IAAWF,MAAA,CAAOK,CAAG,EAAAC,MAAA;EAAA;EAGzB,MAAMC,MAAS,OAAIC,WAAY,CAAAN,OAAA,GAAU,CAAC;EAE1C,IAAIO,GAAM;EACV,IAAIC,YAAe;EAEnB,SAASL,CAAI,MAAGA,CAAI,GAAAL,MAAA,CAAOM,MAAA,EAAQD,CACnC;IACI,MAAMM,IAAA,GAAOV,KAAM,CAAAI,CAAA;IACnB,MAAMO,KAAA,GAAQZ,MAAO,CAAAK,CAAA;IAMf,MAAAQ,IAAA,GAAOC,aAAA,CAAcF,KAAK;IAE5B,KAACR,KAAA,CAAMS,IACX;MACIT,KAAA,CAAMS,IAAQ,QAAInB,GAAI,CAAAmB,IAAA,EAAMN,MAAM;IAAA;IAGtCE,GAAA,GAAML,KAAM,CAAAS,IAAA;IAEZ,SAASE,CAAI,MAAGA,CAAI,GAAAH,KAAA,CAAMN,MAAA,EAAQS,CAClC;MACI,MAAMC,UAAe,IAAAD,CAAA,GAAIJ,IAAO,QAAKR,MAAU,GAAAO,YAAA;MAC/C,MAAMO,KAAA,GAAQF,CAAI,GAAAJ,IAAA;MAEdF,GAAA,CAAAO,UAAA,GAAaC,KAAA,IAASL,KAAM,CAAAG,CAAA;IAAA;IAGpBL,YAAA,IAAAC,IAAA;EAAA;EAGb,WAAIhB,YAAA,CAAaY,MAAM;AAClC"},"metadata":{},"sourceType":"module","externalDependencies":[]}