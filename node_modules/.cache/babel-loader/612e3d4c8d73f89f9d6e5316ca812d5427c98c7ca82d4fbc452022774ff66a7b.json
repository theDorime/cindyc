{"ast":null,"code":"import { MeshGeometry } from '@pixi/mesh';\nclass PlaneGeometry extends MeshGeometry {\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n    let segWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n    let segHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n    super();\n    this.segWidth = segWidth;\n    this.segHeight = segHeight;\n    this.width = width;\n    this.height = height;\n    this.build();\n  }\n  build() {\n    const total = this.segWidth * this.segHeight;\n    const verts = [];\n    const uvs = [];\n    const indices = [];\n    const segmentsX = this.segWidth - 1;\n    const segmentsY = this.segHeight - 1;\n    const sizeX = this.width / segmentsX;\n    const sizeY = this.height / segmentsY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.segWidth;\n      const y = i / this.segWidth | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / segmentsX, y / segmentsY);\n    }\n    const totalSub = segmentsX * segmentsY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % segmentsX;\n      const ypos = i / segmentsX | 0;\n      const value = ypos * this.segWidth + xpos;\n      const value2 = ypos * this.segWidth + xpos + 1;\n      const value3 = (ypos + 1) * this.segWidth + xpos;\n      const value4 = (ypos + 1) * this.segWidth + xpos + 1;\n      indices.push(value, value2, value3, value2, value4, value3);\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint16Array(indices);\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  }\n}\nexport { PlaneGeometry };","map":{"version":3,"names":["PlaneGeometry","MeshGeometry","constructor","width","arguments","length","undefined","height","segWidth","segHeight","build","total","verts","uvs","indices","segmentsX","segmentsY","sizeX","sizeY","i","x","y","push","totalSub","xpos","ypos","value","value2","value3","value4","buffers","data","Float32Array","indexBuffer","Uint16Array","update"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\mesh-extras\\src\\geometry\\PlaneGeometry.ts"],"sourcesContent":["import { MeshGeometry } from '@pixi/mesh';\n\n/**\n * @memberof PIXI\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public segWidth: number;\n    public segHeight: number;\n    public width: number;\n    public height: number;\n\n    /**\n     * @param width - The width of the plane.\n     * @param height - The height of the plane.\n     * @param segWidth - Number of horizontal segments.\n     * @param segHeight - Number of vertical segments.\n     */\n    constructor(width = 100, height = 100, segWidth = 10, segHeight = 10)\n    {\n        super();\n\n        this.segWidth = segWidth;\n        this.segHeight = segHeight;\n\n        this.width = width;\n        this.height = height;\n\n        this.build();\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @private\n     */\n    build(): void\n    {\n        const total = this.segWidth * this.segHeight;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const segmentsX = this.segWidth - 1;\n        const segmentsY = this.segHeight - 1;\n\n        const sizeX = (this.width) / segmentsX;\n        const sizeY = (this.height) / segmentsY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.segWidth);\n            const y = ((i / this.segWidth) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / segmentsX, y / segmentsY);\n        }\n\n        const totalSub = segmentsX * segmentsY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % segmentsX;\n            const ypos = (i / segmentsX) | 0;\n\n            const value = (ypos * this.segWidth) + xpos;\n            const value2 = (ypos * this.segWidth) + xpos + 1;\n            const value3 = ((ypos + 1) * this.segWidth) + xpos;\n            const value4 = ((ypos + 1) * this.segWidth) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint16Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n"],"mappings":";AAKO,MAAMA,aAAA,SAAsBC,YACnC;EAYIC,YAAA,EACA;IAAA,IADYC,KAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAQ,GAAK;IAAA,IAAAG,MAAA,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAS;IAAA,IAAKI,QAAW,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;IAAA,IAAIK,SAAA,GAAAL,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAY,EAClE;IACU;IAEN,KAAKI,QAAW,GAAAA,QAAA;IAChB,KAAKC,SAAY,GAAAA,SAAA;IAEjB,KAAKN,KAAQ,GAAAA,KAAA;IACb,KAAKI,MAAS,GAAAA,MAAA;IAEd,KAAKG,KAAM;EAAA;EAOfA,KACAA,CAAA;IACU,MAAAC,KAAA,GAAQ,IAAK,CAAAH,QAAA,GAAW,IAAK,CAAAC,SAAA;IACnC,MAAMG,KAAA,GAAQ,EAAC;IACf,MAAMC,GAAA,GAAM,EAAC;IACb,MAAMC,OAAA,GAAU,EAAC;IAEX,MAAAC,SAAA,GAAY,KAAKP,QAAW;IAC5B,MAAAQ,SAAA,GAAY,KAAKP,SAAY;IAE7B,MAAAQ,KAAA,GAAS,KAAKd,KAAS,GAAAY,SAAA;IACvB,MAAAG,KAAA,GAAS,KAAKX,MAAU,GAAAS,SAAA;IAE9B,SAASG,CAAI,MAAGA,CAAI,GAAAR,KAAA,EAAOQ,CAC3B;MACU,MAAAC,CAAA,GAAKD,CAAA,GAAI,IAAK,CAAAX,QAAA;MACd,MAAAa,CAAA,GAAMF,CAAI,QAAKX,QAAY;MAEjCI,KAAA,CAAMU,IAAK,CAAAF,CAAA,GAAIH,KAAO,EAAAI,CAAA,GAAIH,KAAK;MAC/BL,GAAA,CAAIS,IAAK,CAAAF,CAAA,GAAIL,SAAW,EAAAM,CAAA,GAAIL,SAAS;IAAA;IAGzC,MAAMO,QAAA,GAAWR,SAAY,GAAAC,SAAA;IAE7B,SAASG,CAAI,MAAGA,CAAI,GAAAI,QAAA,EAAUJ,CAC9B;MACI,MAAMK,IAAA,GAAOL,CAAI,GAAAJ,SAAA;MACX,MAAAU,IAAA,GAAQN,CAAA,GAAIJ,SAAa;MAEzB,MAAAW,KAAA,GAASD,IAAO,QAAKjB,QAAY,GAAAgB,IAAA;MACvC,MAAMG,MAAU,GAAAF,IAAA,GAAO,IAAK,CAAAjB,QAAA,GAAYgB,IAAO;MAC/C,MAAMI,MAAW,IAAAH,IAAA,GAAO,CAAK,SAAKjB,QAAY,GAAAgB,IAAA;MAC9C,MAAMK,MAAW,IAAAJ,IAAA,GAAO,CAAK,SAAKjB,QAAA,GAAYgB,IAAO;MAErDV,OAAA,CAAQQ,IAAA,CAAKI,KAAO,EAAAC,MAAA,EAAQC,MACxB,EAAAD,MAAA,EAAQE,MAAA,EAAQD,MAAM;IAAA;IAG9B,KAAKE,OAAQ,IAAGC,IAAO,OAAIC,YAAA,CAAapB,KAAK;IAC7C,KAAKkB,OAAQ,IAAGC,IAAO,OAAIC,YAAA,CAAanB,GAAG;IAC3C,KAAKoB,WAAY,CAAAF,IAAA,GAAO,IAAIG,WAAA,CAAYpB,OAAO;IAG1C,KAAAgB,OAAA,CAAQ,GAAGK,MAAO;IAClB,KAAAL,OAAA,CAAQ,GAAGK,MAAO;IACvB,KAAKF,WAAA,CAAYE,MAAO;EAAA;AAEhC"},"metadata":{},"sourceType":"module","externalDependencies":[]}