{"ast":null,"code":"import { Point, Transform, TextureMatrix, Rectangle, Texture } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nconst tempPoint = new Point();\nclass TilingSprite extends Sprite {\n  constructor(texture) {\n    let width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n    let height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n    super(texture);\n    this.tileTransform = new Transform();\n    this._width = width;\n    this._height = height;\n    this.uvMatrix = this.texture.uvMatrix || new TextureMatrix(texture);\n    this.pluginName = \"tilingSprite\";\n    this.uvRespectAnchor = false;\n  }\n  get clampMargin() {\n    return this.uvMatrix.clampMargin;\n  }\n  set clampMargin(value) {\n    this.uvMatrix.clampMargin = value;\n    this.uvMatrix.update(true);\n  }\n  get tileScale() {\n    return this.tileTransform.scale;\n  }\n  set tileScale(value) {\n    this.tileTransform.scale.copyFrom(value);\n  }\n  get tilePosition() {\n    return this.tileTransform.position;\n  }\n  set tilePosition(value) {\n    this.tileTransform.position.copyFrom(value);\n  }\n  _onTextureUpdate() {\n    if (this.uvMatrix) {\n      this.uvMatrix.texture = this._texture;\n    }\n    this._cachedTint = 16777215;\n  }\n  _render(renderer) {\n    const texture = this._texture;\n    if (!texture || !texture.valid) {\n      return;\n    }\n    this.tileTransform.updateLocalTransform();\n    this.uvMatrix.update();\n    renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n    renderer.plugins[this.pluginName].render(this);\n  }\n  _calculateBounds() {\n    const minX = this._width * -this._anchor._x;\n    const minY = this._height * -this._anchor._y;\n    const maxX = this._width * (1 - this._anchor._x);\n    const maxY = this._height * (1 - this._anchor._y);\n    this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n  }\n  getLocalBounds(rect) {\n    if (this.children.length === 0) {\n      this._bounds.minX = this._width * -this._anchor._x;\n      this._bounds.minY = this._height * -this._anchor._y;\n      this._bounds.maxX = this._width * (1 - this._anchor._x);\n      this._bounds.maxY = this._height * (1 - this._anchor._y);\n      if (!rect) {\n        if (!this._localBoundsRect) {\n          this._localBoundsRect = new Rectangle();\n        }\n        rect = this._localBoundsRect;\n      }\n      return this._bounds.getRectangle(rect);\n    }\n    return super.getLocalBounds.call(this, rect);\n  }\n  containsPoint(point) {\n    this.worldTransform.applyInverse(point, tempPoint);\n    const width = this._width;\n    const height = this._height;\n    const x1 = -width * this.anchor._x;\n    if (tempPoint.x >= x1 && tempPoint.x < x1 + width) {\n      const y1 = -height * this.anchor._y;\n      if (tempPoint.y >= y1 && tempPoint.y < y1 + height) {\n        return true;\n      }\n    }\n    return false;\n  }\n  destroy(options) {\n    super.destroy(options);\n    this.tileTransform = null;\n    this.uvMatrix = null;\n  }\n  static from(source, options) {\n    const texture = source instanceof Texture ? source : Texture.from(source, options);\n    return new TilingSprite(texture, options.width, options.height);\n  }\n  get width() {\n    return this._width;\n  }\n  set width(value) {\n    this._width = value;\n  }\n  get height() {\n    return this._height;\n  }\n  set height(value) {\n    this._height = value;\n  }\n}\nexport { TilingSprite };","map":{"version":3,"names":["tempPoint","Point","TilingSprite","Sprite","constructor","texture","width","arguments","length","undefined","height","tileTransform","Transform","_width","_height","uvMatrix","TextureMatrix","pluginName","uvRespectAnchor","clampMargin","value","update","tileScale","scale","copyFrom","tilePosition","position","_onTextureUpdate","_texture","_cachedTint","_render","renderer","valid","updateLocalTransform","batch","setObjectRenderer","plugins","render","_calculateBounds","minX","_anchor","_x","minY","_y","maxX","maxY","_bounds","addFrame","transform","getLocalBounds","rect","children","_localBoundsRect","Rectangle","getRectangle","call","containsPoint","point","worldTransform","applyInverse","x1","anchor","x","y1","y","destroy","options","from","source","Texture"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\sprite-tiling\\src\\TilingSprite.ts"],"sourcesContent":["import { Point, Rectangle, Texture, TextureMatrix, Transform } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\n\nimport type { IBaseTextureOptions, IPoint, IPointData, ISize, ObservablePoint, Renderer, TextureSource } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\nconst tempPoint = new Point();\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface TilingSprite extends GlobalMixins.TilingSprite {}\n\n/**\n * A tiling sprite is a fast way of rendering a tiling image.\n * @memberof PIXI\n */\nexport class TilingSprite extends Sprite\n{\n    /** Tile transform */\n    public tileTransform: Transform;\n\n    /** Matrix that is applied to UV to get the coords in Texture normalized space to coords in BaseTexture space. */\n    public uvMatrix: TextureMatrix;\n\n    /**\n     * Flags whether the tiling pattern should originate from the origin instead of the top-left corner in\n     * local space.\n     *\n     * This will make the texture coordinates assigned to each vertex dependent on the value of the anchor. Without\n     * this, the top-left corner always gets the (0, 0) texture coordinate.\n     * @default false\n     */\n    public uvRespectAnchor: boolean;\n\n    /**\n     * Note: The wrap mode of the texture is forced to REPEAT on render if the size of the texture\n     * is a power of two, the texture's wrap mode is CLAMP, and the texture hasn't been bound yet.\n     * @param texture - The texture of the tiling sprite.\n     * @param width - The width of the tiling sprite.\n     * @param height - The height of the tiling sprite.\n     */\n    constructor(texture: Texture, width = 100, height = 100)\n    {\n        super(texture);\n\n        this.tileTransform = new Transform();\n\n        // The width of the tiling sprite\n        this._width = width;\n\n        // The height of the tiling sprite\n        this._height = height;\n\n        this.uvMatrix = this.texture.uvMatrix || new TextureMatrix(texture);\n\n        /**\n         * Plugin that is responsible for rendering this element.\n         * Allows to customize the rendering process without overriding '_render' method.\n         * @default 'tilingSprite'\n         */\n        this.pluginName = 'tilingSprite';\n\n        this.uvRespectAnchor = false;\n    }\n    /**\n     * Changes frame clamping in corresponding textureTransform, shortcut\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     * @default 0.5\n     * @member {number}\n     */\n    get clampMargin(): number\n    {\n        return this.uvMatrix.clampMargin;\n    }\n\n    set clampMargin(value: number)\n    {\n        this.uvMatrix.clampMargin = value;\n        this.uvMatrix.update(true);\n    }\n\n    /** The scaling of the image that is being tiled. */\n    get tileScale(): ObservablePoint\n    {\n        return this.tileTransform.scale;\n    }\n\n    set tileScale(value: IPointData)\n    {\n        this.tileTransform.scale.copyFrom(value as IPoint);\n    }\n\n    /** The offset of the image that is being tiled. */\n    get tilePosition(): ObservablePoint\n    {\n        return this.tileTransform.position;\n    }\n\n    set tilePosition(value: ObservablePoint)\n    {\n        this.tileTransform.position.copyFrom(value as IPoint);\n    }\n\n    /**\n     * @protected\n     */\n    protected _onTextureUpdate(): void\n    {\n        if (this.uvMatrix)\n        {\n            this.uvMatrix.texture = this._texture;\n        }\n        this._cachedTint = 0xFFFFFF;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     * @param renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        // tweak our texture temporarily..\n        const texture = this._texture;\n\n        if (!texture || !texture.valid)\n        {\n            return;\n        }\n\n        this.tileTransform.updateLocalTransform();\n        this.uvMatrix.update();\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /** Updates the bounds of the tiling sprite. */\n    protected _calculateBounds(): void\n    {\n        const minX = this._width * -this._anchor._x;\n        const minY = this._height * -this._anchor._y;\n        const maxX = this._width * (1 - this._anchor._x);\n        const maxY = this._height * (1 - this._anchor._y);\n\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     * @param rect - Optional output rectangle.\n     * @returns The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            this._bounds.minX = this._width * -this._anchor._x;\n            this._bounds.minY = this._height * -this._anchor._y;\n            this._bounds.maxX = this._width * (1 - this._anchor._x);\n            this._bounds.maxY = this._height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._bounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Checks if a point is inside this tiling sprite.\n     * @param point - The point to check.\n     * @returns Whether or not the sprite contains the point.\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._width;\n        const height = this._height;\n        const x1 = -width * this.anchor._x;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            const y1 = -height * this.anchor._y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy(options);\n\n        this.tileTransform = null;\n        this.uvMatrix = null;\n    }\n\n    /**\n     * Helper function that creates a new tiling sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     * @static\n     * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n     * @param {object} options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @param {number} options.width - required width of the tiling sprite\n     * @param {number} options.height - required height of the tiling sprite\n     * @returns {PIXI.TilingSprite} The newly created texture\n     */\n    static from(source: TextureSource | Texture, options: ISize & IBaseTextureOptions): TilingSprite\n    {\n        const texture = (source instanceof Texture)\n            ? source\n            : Texture.from(source, options);\n\n        return new TilingSprite(\n            texture,\n            options.width,\n            options.height\n        );\n    }\n\n    /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    set width(value: number)\n    {\n        this._width = value;\n    }\n\n    /** The height of the TilingSprite, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    set height(value: number)\n    {\n        this._height = value;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}