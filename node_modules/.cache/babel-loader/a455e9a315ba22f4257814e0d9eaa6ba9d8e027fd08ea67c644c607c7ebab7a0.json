{"ast":null,"code":"const fragTemplate = [\"precision mediump float;\", \"void main(void){\", \"float test = 0.1;\", \"%forloop%\", \"gl_FragColor = vec4(0.0);\", \"}\"].join(\"\\n\");\nfunction generateIfTestSrc(maxIfs) {\n  let src = \"\";\n  for (let i = 0; i < maxIfs; ++i) {\n    if (i > 0) {\n      src += \"\\nelse \";\n    }\n    if (i < maxIfs - 1) {\n      src += `if(test == ${i}.0){}`;\n    }\n  }\n  return src;\n}\nfunction checkMaxIfStatementsInShader(maxIfs, gl) {\n  if (maxIfs === 0) {\n    throw new Error(\"Invalid value of `0` passed to `checkMaxIfStatementsInShader`\");\n  }\n  const shader = gl.createShader(gl.FRAGMENT_SHADER);\n  while (true) {\n    const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n    gl.shaderSource(shader, fragmentSrc);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      maxIfs = maxIfs / 2 | 0;\n    } else {\n      break;\n    }\n  }\n  return maxIfs;\n}\nexport { checkMaxIfStatementsInShader };","map":{"version":3,"names":["fragTemplate","join","generateIfTestSrc","maxIfs","src","i","checkMaxIfStatementsInShader","gl","Error","shader","createShader","FRAGMENT_SHADER","fragmentSrc","replace","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\shader\\utils\\checkMaxIfStatementsInShader.ts"],"sourcesContent":["import type { IRenderingContext } from '../../IRenderer';\n\nconst fragTemplate = [\n    'precision mediump float;',\n    'void main(void){',\n    'float test = 0.1;',\n    '%forloop%',\n    'gl_FragColor = vec4(0.0);',\n    '}',\n].join('\\n');\n\nfunction generateIfTestSrc(maxIfs: number): string\n{\n    let src = '';\n\n    for (let i = 0; i < maxIfs; ++i)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxIfs - 1)\n        {\n            src += `if(test == ${i}.0){}`;\n        }\n    }\n\n    return src;\n}\n\nexport function checkMaxIfStatementsInShader(maxIfs: number, gl: IRenderingContext): number\n{\n    if (maxIfs === 0)\n    {\n        throw new Error('Invalid value of `0` passed to `checkMaxIfStatementsInShader`');\n    }\n\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n    while (true) // eslint-disable-line no-constant-condition\n    {\n        const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n\n        gl.shaderSource(shader, fragmentSrc);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            maxIfs = (maxIfs / 2) | 0;\n        }\n        else\n        {\n            // valid!\n            break;\n        }\n    }\n\n    return maxIfs;\n}\n"],"mappings":"AAEA,MAAMA,YAAe,IACjB,4BACA,oBACA,qBACA,aACA,6BACA,IACJ,CAAEC,IAAA,CAAK,IAAI;AAEX,SAAAC,kBAA2BC,MAC3B;EACI,IAAIC,GAAM;EAEV,SAASC,CAAI,MAAGA,CAAI,GAAAF,MAAA,EAAQ,EAAEE,CAC9B;IACI,IAAIA,CAAA,GAAI,CACR;MACWD,GAAA;IAAA;IAGP,IAAAC,CAAA,GAAIF,MAAA,GAAS,CACjB;MACIC,GAAA,IAAqB,cAAAC,CAAA;IAAA;EACzB;EAGG,OAAAD,GAAA;AACX;AAEO,SAAAE,6BAAsCH,MAAA,EAAgBI,EAC7D;EACI,IAAIJ,MAAA,KAAW,CACf;IACU,UAAIK,KAAA,CAAM,+DAA+D;EAAA;EAGnF,MAAMC,MAAS,GAAAF,EAAA,CAAGG,YAAa,CAAAH,EAAA,CAAGI,eAAe;EAEjD,OAAO,IACP;IACI,MAAMC,WAAA,GAAcZ,YAAa,CAAAa,OAAA,CAAQ,aAAe,EAAAX,iBAAA,CAAkBC,MAAM,CAAC;IAE9EI,EAAA,CAAAO,YAAA,CAAaL,MAAA,EAAQG,WAAW;IACnCL,EAAA,CAAGQ,aAAA,CAAcN,MAAM;IAEvB,IAAI,CAACF,EAAG,CAAAS,kBAAA,CAAmBP,MAAQ,EAAAF,EAAA,CAAGU,cAAc,CACpD;MACId,MAAA,GAAUA,MAAA,GAAS,CAAK;IAAA,CAG5B;MAEI;IAAA;EACJ;EAGG,OAAAA,MAAA;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}