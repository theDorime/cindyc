{"ast":null,"code":"import { Point } from '@pixi/core';\nimport { FederatedEvent } from './FederatedEvent.mjs';\nclass FederatedMouseEvent extends FederatedEvent {\n  constructor() {\n    super(...arguments);\n    this.client = new Point();\n    this.movement = new Point();\n    this.offset = new Point();\n    this.global = new Point();\n    this.screen = new Point();\n  }\n  get clientX() {\n    return this.client.x;\n  }\n  get clientY() {\n    return this.client.y;\n  }\n  get x() {\n    return this.clientX;\n  }\n  get y() {\n    return this.clientY;\n  }\n  get movementX() {\n    return this.movement.x;\n  }\n  get movementY() {\n    return this.movement.y;\n  }\n  get offsetX() {\n    return this.offset.x;\n  }\n  get offsetY() {\n    return this.offset.y;\n  }\n  get globalX() {\n    return this.global.x;\n  }\n  get globalY() {\n    return this.global.y;\n  }\n  get screenX() {\n    return this.screen.x;\n  }\n  get screenY() {\n    return this.screen.y;\n  }\n  getLocalPosition(displayObject, point, globalPos) {\n    return displayObject.worldTransform.applyInverse(globalPos || this.global, point);\n  }\n  getModifierState(key) {\n    return \"getModifierState\" in this.nativeEvent && this.nativeEvent.getModifierState(key);\n  }\n  initMouseEvent(_typeArg, _canBubbleArg, _cancelableArg, _viewArg, _detailArg, _screenXArg, _screenYArg, _clientXArg, _clientYArg, _ctrlKeyArg, _altKeyArg, _shiftKeyArg, _metaKeyArg, _buttonArg, _relatedTargetArg) {\n    throw new Error(\"Method not implemented.\");\n  }\n}\nexport { FederatedMouseEvent };","map":{"version":3,"names":["FederatedMouseEvent","FederatedEvent","constructor","arguments","client","Point","movement","offset","global","screen","clientX","x","clientY","y","movementX","movementY","offsetX","offsetY","globalX","globalY","screenX","screenY","getLocalPosition","displayObject","point","globalPos","worldTransform","applyInverse","getModifierState","key","nativeEvent","initMouseEvent","_typeArg","_canBubbleArg","_cancelableArg","_viewArg","_detailArg","_screenXArg","_screenYArg","_clientXArg","_clientYArg","_ctrlKeyArg","_altKeyArg","_shiftKeyArg","_metaKeyArg","_buttonArg","_relatedTargetArg","Error"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\events\\src\\FederatedMouseEvent.ts"],"sourcesContent":["import { Point } from '@pixi/core';\nimport { FederatedEvent } from './FederatedEvent';\n\nimport type { IPointData } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\n\n/**\n * A {@link PIXI.FederatedEvent} for mouse events.\n * @memberof PIXI\n */\nexport class FederatedMouseEvent extends FederatedEvent<\nMouseEvent | PointerEvent | TouchEvent\n> implements MouseEvent\n{\n    /** Whether the \"alt\" key was pressed when this mouse event occurred. */\n    altKey: boolean;\n\n    /** The specific button that was pressed in this mouse event. */\n    button: number;\n\n    /** The button depressed when this event occurred. */\n    buttons: number;\n\n    /** Whether the \"control\" key was pressed when this mouse event occurred. */\n    ctrlKey: boolean;\n\n    /** Whether the \"meta\" key was pressed when this mouse event occurred. */\n    metaKey: boolean;\n\n    /** This is currently not implemented in the Federated Events API. */\n    relatedTarget: EventTarget;\n\n    /** Whether the \"shift\" key was pressed when this mouse event occurred. */\n    shiftKey: boolean;\n\n    /** The coordinates of the mouse event relative to the canvas. */\n    public client: Point = new Point();\n\n    /** @readonly */\n    public get clientX(): number { return this.client.x; }\n\n    /** @readonly */\n    public get clientY(): number { return this.client.y; }\n\n    /**\n     * Alias for {@link PIXI.FederatedMouseEvent.clientX this.clientX}.\n     * @readonly\n     */\n    get x(): number { return this.clientX; }\n\n    /**\n     * Alias for {@link PIXI.FederatedMouseEvent.clientY this.clientY}.\n     * @readonly\n     */\n    get y(): number { return this.clientY; }\n\n    /** This is the number of clicks that occurs in 200ms/click of each other. */\n    public detail: number;\n\n    /** The movement in this pointer relative to the last `mousemove` event. */\n    public movement: Point = new Point();\n\n    /** @readonly */\n    get movementX(): number { return this.movement.x; }\n\n    /** @readonly */\n    get movementY(): number { return this.movement.y; }\n\n    /**\n     * The offset of the pointer coordinates w.r.t. target DisplayObject in world space. This is\n     * not supported at the moment.\n     */\n    public offset: Point = new Point();\n\n    /** @readonly */\n    get offsetX(): number { return this.offset.x; }\n\n    /** @readonly */\n    get offsetY(): number { return this.offset.y; }\n\n    /** The pointer coordinates in world space. */\n    public global: Point = new Point();\n\n    /** @readonly */\n    get globalX(): number { return this.global.x; }\n\n    /** @readonly */\n    get globalY(): number { return this.global.y; }\n\n    /**\n     * The pointer coordinates in the renderer's {@link PIXI.Renderer.screen screen}. This has slightly\n     * different semantics than native PointerEvent screenX/screenY.\n     */\n    public screen: Point = new Point();\n\n    /**\n     * The pointer coordinates in the renderer's screen. Alias for {@code screen.x}.\n     * @readonly\n     */\n    get screenX(): number { return this.screen.x; }\n\n    /**\n     * The pointer coordinates in the renderer's screen. Alias for {@code screen.y}.\n     * @readonly\n     */\n    get screenY(): number { return this.screen.y; }\n\n    /**\n     * This will return the local coordinates of the specified displayObject for this InteractionData\n     * @param {PIXI.DisplayObject} displayObject - The DisplayObject that you would like the local\n     *  coords off\n     * @param {PIXI.IPointData} point - A Point object in which to store the value, optional (otherwise\n     *  will create a new point)\n     * @param {PIXI.IPointData} globalPos - A Point object containing your custom global coords, optional\n     *  (otherwise will use the current global coords)\n     * @returns - A point containing the coordinates of the InteractionData position relative\n     *  to the DisplayObject\n     */\n    public getLocalPosition<P extends IPointData = Point>(displayObject: DisplayObject, point?: P, globalPos?: IPointData): P\n    {\n        return displayObject.worldTransform.applyInverse<P>(globalPos || this.global, point);\n    }\n\n    /**\n     * Whether the modifier key was pressed when this event natively occurred.\n     * @param key - The modifier key.\n     */\n    getModifierState(key: string): boolean\n    {\n        return 'getModifierState' in this.nativeEvent && this.nativeEvent.getModifierState(key);\n    }\n\n    /**\n     * Not supported.\n     * @param _typeArg\n     * @param _canBubbleArg\n     * @param _cancelableArg\n     * @param _viewArg\n     * @param _detailArg\n     * @param _screenXArg\n     * @param _screenYArg\n     * @param _clientXArg\n     * @param _clientYArg\n     * @param _ctrlKeyArg\n     * @param _altKeyArg\n     * @param _shiftKeyArg\n     * @param _metaKeyArg\n     * @param _buttonArg\n     * @param _relatedTargetArg\n     * @deprecated since 7.0.0\n     */\n    // eslint-disable-next-line max-params\n    initMouseEvent(\n        _typeArg: string,\n        _canBubbleArg: boolean,\n        _cancelableArg: boolean,\n        _viewArg: Window,\n        _detailArg: number,\n        _screenXArg: number,\n        _screenYArg: number,\n        _clientXArg: number,\n        _clientYArg: number,\n        _ctrlKeyArg: boolean,\n        _altKeyArg: boolean,\n        _shiftKeyArg: boolean,\n        _metaKeyArg: boolean,\n        _buttonArg: number,\n        _relatedTargetArg: EventTarget\n    ): void\n    {\n        throw new Error('Method not implemented.');\n    }\n}\n"],"mappings":";;AAUO,MAAMA,mBAAA,SAA4BC,cAGzC;EAHOC,YAAA;IAAA,SAAAC,SAAA;IA0BI,KAAAC,MAAA,GAAgB,IAAIC,KAAM;IAwB1B,KAAAC,QAAA,GAAkB,IAAID,KAAM;IAY5B,KAAAE,MAAA,GAAgB,IAAIF,KAAM;IAS1B,KAAAG,MAAA,GAAgB,IAAIH,KAAM;IAY1B,KAAAI,MAAA,GAAgB,IAAIJ,KAAM;EAAA;EAtDjC,IAAWK,OAAkBA,CAAA;IAAE,OAAO,KAAKN,MAAO,CAAAO,CAAA;EAAA;EAGlD,IAAWC,OAAkBA,CAAA;IAAE,OAAO,KAAKR,MAAO,CAAAS,CAAA;EAAA;EAMlD,IAAIF,CAAYA,CAAA;IAAE,OAAO,IAAK,CAAAD,OAAA;EAAA;EAM9B,IAAIG,CAAYA,CAAA;IAAE,OAAO,IAAK,CAAAD,OAAA;EAAA;EAS9B,IAAIE,SAAoBA,CAAA;IAAE,OAAO,KAAKR,QAAS,CAAAK,CAAA;EAAA;EAG/C,IAAII,SAAoBA,CAAA;IAAE,OAAO,KAAKT,QAAS,CAAAO,CAAA;EAAA;EAS/C,IAAIG,OAAkBA,CAAA;IAAE,OAAO,KAAKT,MAAO,CAAAI,CAAA;EAAA;EAG3C,IAAIM,OAAkBA,CAAA;IAAE,OAAO,KAAKV,MAAO,CAAAM,CAAA;EAAA;EAM3C,IAAIK,OAAkBA,CAAA;IAAE,OAAO,KAAKV,MAAO,CAAAG,CAAA;EAAA;EAG3C,IAAIQ,OAAkBA,CAAA;IAAE,OAAO,KAAKX,MAAO,CAAAK,CAAA;EAAA;EAY3C,IAAIO,OAAkBA,CAAA;IAAE,OAAO,KAAKX,MAAO,CAAAE,CAAA;EAAA;EAM3C,IAAIU,OAAkBA,CAAA;IAAE,OAAO,KAAKZ,MAAO,CAAAI,CAAA;EAAA;EAa3CS,gBAAOA,CAA+CC,aAA8B,EAAAC,KAAA,EAAWC,SAC/F;IACI,OAAOF,aAAA,CAAcG,cAAe,CAAAC,YAAA,CAAgBF,SAAa,SAAKjB,MAAA,EAAQgB,KAAK;EAAA;EAOvFI,iBAAiBC,GACjB;IACI,OAAO,sBAAsB,IAAK,CAAAC,WAAA,IAAe,IAAK,CAAAA,WAAA,CAAYF,gBAAA,CAAiBC,GAAG;EAAA;EAuB1FE,cACIA,CAAAC,QAAA,EACAC,aACA,EAAAC,cAAA,EACAC,QAAA,EACAC,UACA,EAAAC,WAAA,EACAC,WACA,EAAAC,WAAA,EACAC,WAAA,EACAC,WACA,EAAAC,UAAA,EACAC,YACA,EAAAC,WAAA,EACAC,UAAA,EACAC,iBAEJ;IACU,UAAIC,KAAA,CAAM,yBAAyB;EAAA;AAEjD"},"metadata":{},"sourceType":"module","externalDependencies":[]}