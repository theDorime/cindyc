{"ast":null,"code":"import { Matrix } from '@pixi/math';\nconst tempMat = new Matrix();\nclass TextureMatrix {\n  constructor(texture, clampMargin) {\n    this._texture = texture;\n    this.mapCoord = new Matrix();\n    this.uClampFrame = new Float32Array(4);\n    this.uClampOffset = new Float32Array(2);\n    this._textureID = -1;\n    this._updateID = 0;\n    this.clampOffset = 0;\n    this.clampMargin = typeof clampMargin === \"undefined\" ? 0.5 : clampMargin;\n    this.isSimple = false;\n  }\n  get texture() {\n    return this._texture;\n  }\n  set texture(value) {\n    this._texture = value;\n    this._textureID = -1;\n  }\n  multiplyUvs(uvs, out) {\n    if (out === void 0) {\n      out = uvs;\n    }\n    const mat = this.mapCoord;\n    for (let i = 0; i < uvs.length; i += 2) {\n      const x = uvs[i];\n      const y = uvs[i + 1];\n      out[i] = x * mat.a + y * mat.c + mat.tx;\n      out[i + 1] = x * mat.b + y * mat.d + mat.ty;\n    }\n    return out;\n  }\n  update(forceUpdate) {\n    const tex = this._texture;\n    if (!tex || !tex.valid) {\n      return false;\n    }\n    if (!forceUpdate && this._textureID === tex._updateID) {\n      return false;\n    }\n    this._textureID = tex._updateID;\n    this._updateID++;\n    const uvs = tex._uvs;\n    this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n    const orig = tex.orig;\n    const trim = tex.trim;\n    if (trim) {\n      tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height, -trim.x / trim.width, -trim.y / trim.height);\n      this.mapCoord.append(tempMat);\n    }\n    const texBase = tex.baseTexture;\n    const frame = this.uClampFrame;\n    const margin = this.clampMargin / texBase.resolution;\n    const offset = this.clampOffset;\n    frame[0] = (tex._frame.x + margin + offset) / texBase.width;\n    frame[1] = (tex._frame.y + margin + offset) / texBase.height;\n    frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;\n    frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;\n    this.uClampOffset[0] = offset / texBase.realWidth;\n    this.uClampOffset[1] = offset / texBase.realHeight;\n    this.isSimple = tex._frame.width === texBase.width && tex._frame.height === texBase.height && tex.rotate === 0;\n    return true;\n  }\n}\nexport { TextureMatrix };","map":{"version":3,"names":["tempMat","Matrix","TextureMatrix","constructor","texture","clampMargin","_texture","mapCoord","uClampFrame","Float32Array","uClampOffset","_textureID","_updateID","clampOffset","isSimple","value","multiplyUvs","uvs","out","mat","i","length","x","y","a","c","tx","b","d","ty","update","forceUpdate","tex","valid","_uvs","set","x1","x0","y1","y0","x3","y3","orig","trim","width","height","append","texBase","baseTexture","frame","margin","resolution","offset","_frame","realWidth","realHeight","rotate"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\textures\\TextureMatrix.ts"],"sourcesContent":["import { Matrix } from '@pixi/math';\n\nimport type { Texture } from './Texture';\n\nconst tempMat = new Matrix();\n\n/**\n * Class controls uv mapping from Texture normal space to BaseTexture normal space.\n *\n * Takes `trim` and `rotate` into account. May contain clamp settings for Meshes and TilingSprite.\n *\n * Can be used in Texture `uvMatrix` field, or separately, you can use different clamp settings on the same texture.\n * If you want to add support for texture region of certain feature or filter, that's what you're looking for.\n *\n * Takes track of Texture changes through `_lastTextureID` private field.\n * Use `update()` method call to track it from outside.\n * @see PIXI.Texture\n * @see PIXI.Mesh\n * @see PIXI.TilingSprite\n * @memberof PIXI\n */\nexport class TextureMatrix\n{\n    /**\n     * Matrix operation that converts texture region coords to texture coords\n     * @readonly\n     */\n    public mapCoord: Matrix;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to 1.5 if you texture has repeated right and bottom lines, that leads to smoother borders\n     * @default 0\n     */\n    public clampOffset: number;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     * @default 0.5\n     */\n    public clampMargin: number;\n\n    /**\n     * Clamp region for normalized coords, left-top pixel center in xy , bottom-right in zw.\n     * Calculated based on clampOffset.\n     */\n    readonly uClampFrame: Float32Array;\n\n    /** Normalized clamp offset. Calculated based on clampOffset. */\n    readonly uClampOffset: Float32Array;\n\n    /**\n     * Tracks Texture frame changes.\n     * @protected\n     */\n    _textureID: number;\n\n    /**\n     * Tracks Texture frame changes.\n     * @protected\n     */\n    _updateID: number;\n    _texture: Texture;\n\n    /**\n     * If texture size is the same as baseTexture.\n     * @default false\n     * @readonly\n     */\n    isSimple: boolean;\n\n    /**\n     * @param texture - observed texture\n     * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n     */\n    constructor(texture: Texture, clampMargin?: number)\n    {\n        this._texture = texture;\n\n        this.mapCoord = new Matrix();\n        this.uClampFrame = new Float32Array(4);\n        this.uClampOffset = new Float32Array(2);\n        this._textureID = -1;\n        this._updateID = 0;\n\n        this.clampOffset = 0;\n        this.clampMargin = (typeof clampMargin === 'undefined') ? 0.5 : clampMargin;\n        this.isSimple = false;\n    }\n\n    /** Texture property. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        this._texture = value;\n        this._textureID = -1;\n    }\n\n    /**\n     * Multiplies uvs array to transform\n     * @param uvs - mesh uvs\n     * @param [out=uvs] - output\n     * @returns - output\n     */\n    multiplyUvs(uvs: Float32Array, out?: Float32Array): Float32Array\n    {\n        if (out === undefined)\n        {\n            out = uvs;\n        }\n\n        const mat = this.mapCoord;\n\n        for (let i = 0; i < uvs.length; i += 2)\n        {\n            const x = uvs[i];\n            const y = uvs[i + 1];\n\n            out[i] = (x * mat.a) + (y * mat.c) + mat.tx;\n            out[i + 1] = (x * mat.b) + (y * mat.d) + mat.ty;\n        }\n\n        return out;\n    }\n\n    /**\n     * Updates matrices if texture was changed.\n     * @param [forceUpdate=false] - if true, matrices will be updated any case\n     * @returns - Whether or not it was updated\n     */\n    update(forceUpdate?: boolean): boolean\n    {\n        const tex = this._texture;\n\n        if (!tex || !tex.valid)\n        {\n            return false;\n        }\n\n        if (!forceUpdate\n            && this._textureID === tex._updateID)\n        {\n            return false;\n        }\n\n        this._textureID = tex._updateID;\n        this._updateID++;\n\n        const uvs = tex._uvs;\n\n        this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n\n        const orig = tex.orig;\n        const trim = tex.trim;\n\n        if (trim)\n        {\n            tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height,\n                -trim.x / trim.width, -trim.y / trim.height);\n            this.mapCoord.append(tempMat);\n        }\n\n        const texBase = tex.baseTexture;\n        const frame = this.uClampFrame;\n        const margin = this.clampMargin / texBase.resolution;\n        const offset = this.clampOffset;\n\n        frame[0] = (tex._frame.x + margin + offset) / texBase.width;\n        frame[1] = (tex._frame.y + margin + offset) / texBase.height;\n        frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;\n        frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;\n        this.uClampOffset[0] = offset / texBase.realWidth;\n        this.uClampOffset[1] = offset / texBase.realHeight;\n\n        this.isSimple = tex._frame.width === texBase.width\n            && tex._frame.height === texBase.height\n            && tex.rotate === 0;\n\n        return true;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}