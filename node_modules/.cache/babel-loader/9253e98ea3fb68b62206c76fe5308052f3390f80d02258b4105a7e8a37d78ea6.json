{"ast":null,"code":"const buildRectangle = {\n  build(graphicsData) {\n    const rectData = graphicsData.shape;\n    const x = rectData.x;\n    const y = rectData.y;\n    const width = rectData.width;\n    const height = rectData.height;\n    const points = graphicsData.points;\n    points.length = 0;\n    if (!(width >= 0 && height >= 0)) {\n      return;\n    }\n    points.push(x, y, x + width, y, x + width, y + height, x, y + height);\n  },\n  triangulate(graphicsData, graphicsGeometry) {\n    const points = graphicsData.points;\n    const verts = graphicsGeometry.points;\n    if (points.length === 0) {\n      return;\n    }\n    const vertPos = verts.length / 2;\n    verts.push(points[0], points[1], points[2], points[3], points[6], points[7], points[4], points[5]);\n    graphicsGeometry.indices.push(vertPos, vertPos + 1, vertPos + 2, vertPos + 1, vertPos + 2, vertPos + 3);\n  }\n};\nexport { buildRectangle };","map":{"version":3,"names":["buildRectangle","build","graphicsData","rectData","shape","x","y","width","height","points","length","push","triangulate","graphicsGeometry","verts","vertPos","indices"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\graphics\\src\\utils\\buildRectangle.ts"],"sourcesContent":["import type { Rectangle } from '@pixi/core';\nimport type { IShapeBuildCommand } from './IShapeBuildCommand';\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildRectangle: IShapeBuildCommand = {\n\n    build(graphicsData)\n    {\n        // --- //\n        // need to convert points to a nice regular data\n        //\n        const rectData = graphicsData.shape as Rectangle;\n        const x = rectData.x;\n        const y = rectData.y;\n        const width = rectData.width;\n        const height = rectData.height;\n\n        const points = graphicsData.points;\n\n        points.length = 0;\n\n        if (!(width >= 0 && height >= 0))\n        {\n            return;\n        }\n\n        points.push(x, y,\n            x + width, y,\n            x + width, y + height,\n            x, y + height);\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        const points = graphicsData.points;\n        const verts = graphicsGeometry.points;\n\n        if (points.length === 0)\n        {\n            return;\n        }\n\n        const vertPos = verts.length / 2;\n\n        verts.push(points[0], points[1],\n            points[2], points[3],\n            points[6], points[7],\n            points[4], points[5]);\n\n        graphicsGeometry.indices.push(vertPos, vertPos + 1, vertPos + 2,\n            vertPos + 1, vertPos + 2, vertPos + 3);\n    },\n};\n"],"mappings":"AAaO,MAAMA,cAAqC;EAE9CC,MAAMC,YACN;IAII,MAAMC,QAAA,GAAWD,YAAa,CAAAE,KAAA;IAC9B,MAAMC,CAAA,GAAIF,QAAS,CAAAE,CAAA;IACnB,MAAMC,CAAA,GAAIH,QAAS,CAAAG,CAAA;IACnB,MAAMC,KAAA,GAAQJ,QAAS,CAAAI,KAAA;IACvB,MAAMC,MAAA,GAASL,QAAS,CAAAK,MAAA;IAExB,MAAMC,MAAA,GAASP,YAAa,CAAAO,MAAA;IAE5BA,MAAA,CAAOC,MAAS;IAEhB,IAAI,EAAEH,KAAA,IAAS,CAAK,IAAAC,MAAA,IAAU,CAC9B;MACI;IAAA;IAGJC,MAAA,CAAOE,IAAK,CAAAN,CAAA,EAAGC,CACX,EAAAD,CAAA,GAAIE,KAAO,EAAAD,CAAA,EACXD,CAAI,GAAAE,KAAA,EAAOD,CAAI,GAAAE,MAAA,EACfH,CAAG,EAAAC,CAAA,GAAIE,MAAM;EAAA,CACrB;EAEAI,YAAYV,YAAA,EAAcW,gBAC1B;IACI,MAAMJ,MAAA,GAASP,YAAa,CAAAO,MAAA;IAC5B,MAAMK,KAAA,GAAQD,gBAAiB,CAAAJ,MAAA;IAE3B,IAAAA,MAAA,CAAOC,MAAA,KAAW,CACtB;MACI;IAAA;IAGE,MAAAK,OAAA,GAAUD,KAAA,CAAMJ,MAAS;IAE/BI,KAAA,CAAMH,IAAA,CAAKF,MAAO,KAAIA,MAAO,KACzBA,MAAA,CAAO,CAAI,GAAAA,MAAA,CAAO,CAClB,GAAAA,MAAA,CAAO,IAAIA,MAAO,KAClBA,MAAO,KAAIA,MAAA,CAAO,CAAE;IAExBI,gBAAA,CAAiBG,OAAQ,CAAAL,IAAA,CAAKI,OAAS,EAAAA,OAAA,GAAU,CAAG,EAAAA,OAAA,GAAU,CAC1D,EAAAA,OAAA,GAAU,CAAG,EAAAA,OAAA,GAAU,CAAG,EAAAA,OAAA,GAAU,CAAC;EAAA;AAEjD"},"metadata":{},"sourceType":"module","externalDependencies":[]}