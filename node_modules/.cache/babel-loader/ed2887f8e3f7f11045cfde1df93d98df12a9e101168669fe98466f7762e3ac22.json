{"ast":null,"code":"import { Shader, Matrix, Program, TextureMatrix, Color } from '@pixi/core';\nimport fragment from './shader/mesh.mjs';\nimport vertex from './shader/mesh2.mjs';\nclass MeshMaterial extends Shader {\n  constructor(uSampler, options) {\n    const uniforms = {\n      uSampler,\n      alpha: 1,\n      uTextureMatrix: Matrix.IDENTITY,\n      uColor: new Float32Array([1, 1, 1, 1])\n    };\n    options = Object.assign({\n      tint: 16777215,\n      alpha: 1,\n      pluginName: \"batch\"\n    }, options);\n    if (options.uniforms) {\n      Object.assign(uniforms, options.uniforms);\n    }\n    super(options.program || Program.from(vertex, fragment), uniforms);\n    this._colorDirty = false;\n    this.uvMatrix = new TextureMatrix(uSampler);\n    this.batchable = options.program === void 0;\n    this.pluginName = options.pluginName;\n    this._tintColor = new Color(options.tint);\n    this._tintRGB = this._tintColor.toLittleEndianNumber();\n    this._colorDirty = true;\n    this.alpha = options.alpha;\n  }\n  get texture() {\n    return this.uniforms.uSampler;\n  }\n  set texture(value) {\n    if (this.uniforms.uSampler !== value) {\n      if (!this.uniforms.uSampler.baseTexture.alphaMode !== !value.baseTexture.alphaMode) {\n        this._colorDirty = true;\n      }\n      this.uniforms.uSampler = value;\n      this.uvMatrix.texture = value;\n    }\n  }\n  set alpha(value) {\n    if (value === this._alpha) return;\n    this._alpha = value;\n    this._colorDirty = true;\n  }\n  get alpha() {\n    return this._alpha;\n  }\n  set tint(value) {\n    if (value === this.tint) return;\n    this._tintColor.setValue(value);\n    this._tintRGB = this._tintColor.toLittleEndianNumber();\n    this._colorDirty = true;\n  }\n  get tint() {\n    return this._tintColor.value;\n  }\n  get tintValue() {\n    return this._tintColor.toNumber();\n  }\n  update() {\n    if (this._colorDirty) {\n      this._colorDirty = false;\n      const baseTexture = this.texture.baseTexture;\n      const applyToChannels = baseTexture.alphaMode;\n      Color.shared.setValue(this._tintColor).premultiply(this._alpha, applyToChannels).toArray(this.uniforms.uColor);\n    }\n    if (this.uvMatrix.update()) {\n      this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n    }\n  }\n}\nexport { MeshMaterial };","map":{"version":3,"names":["MeshMaterial","Shader","constructor","uSampler","options","uniforms","alpha","uTextureMatrix","Matrix","IDENTITY","uColor","Float32Array","Object","assign","tint","pluginName","program","Program","from","vertex","fragment","_colorDirty","uvMatrix","TextureMatrix","batchable","_tintColor","Color","_tintRGB","toLittleEndianNumber","texture","value","baseTexture","alphaMode","_alpha","setValue","tintValue","toNumber","update","applyToChannels","shared","premultiply","toArray","mapCoord"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\mesh\\src\\MeshMaterial.ts"],"sourcesContent":["import { Color, Matrix, Program, Shader, TextureMatrix } from '@pixi/core';\nimport fragment from './shader/mesh.frag';\nimport vertex from './shader/mesh.vert';\n\nimport type { ColorSource, Texture, utils } from '@pixi/core';\n\nexport interface IMeshMaterialOptions\n{\n    alpha?: number;\n    tint?: ColorSource;\n    pluginName?: string;\n    program?: Program;\n    uniforms?: utils.Dict<unknown>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MeshMaterial extends GlobalMixins.MeshMaterial {}\n\n/**\n * Slightly opinionated default shader for PixiJS 2D objects.\n * @memberof PIXI\n */\nexport class MeshMaterial extends Shader\n{\n    /**\n     * TextureMatrix instance for this Mesh, used to track Texture changes.\n     * @readonly\n     */\n    public readonly uvMatrix: TextureMatrix;\n\n    /**\n     * `true` if shader can be batch with the renderer's batch system.\n     * @default true\n     */\n    public batchable: boolean;\n\n    /**\n     * Renderer plugin for batching.\n     * @default 'batch'\n     */\n    public pluginName: string;\n\n    // Internal-only properties\n    _tintRGB: number;\n\n    /**\n     * Only do update if tint or alpha changes.\n     * @private\n     * @default false\n     */\n    private _colorDirty: boolean;\n    private _alpha: number;\n    private _tintColor: Color;\n\n    /**\n     * @param uSampler - Texture that material uses to render.\n     * @param options - Additional options\n     * @param {number} [options.alpha=1] - Default alpha.\n     * @param {PIXI.ColorSource} [options.tint=0xFFFFFF] - Default tint.\n     * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n     * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n     * @param {object} [options.uniforms] - Custom uniforms.\n     */\n    constructor(uSampler: Texture, options?: IMeshMaterialOptions)\n    {\n        const uniforms = {\n            uSampler,\n            alpha: 1,\n            uTextureMatrix: Matrix.IDENTITY,\n            uColor: new Float32Array([1, 1, 1, 1]),\n        };\n\n        // Set defaults\n        options = Object.assign({\n            tint: 0xFFFFFF,\n            alpha: 1,\n            pluginName: 'batch',\n        }, options);\n\n        if (options.uniforms)\n        {\n            Object.assign(uniforms, options.uniforms);\n        }\n\n        super(options.program || Program.from(vertex, fragment), uniforms);\n\n        this._colorDirty = false;\n\n        this.uvMatrix = new TextureMatrix(uSampler);\n        this.batchable = options.program === undefined;\n        this.pluginName = options.pluginName;\n\n        this._tintColor = new Color(options.tint);\n        this._tintRGB = this._tintColor.toLittleEndianNumber();\n        this._colorDirty = true;\n        this.alpha = options.alpha;\n    }\n\n    /** Reference to the texture being rendered. */\n    get texture(): Texture\n    {\n        return this.uniforms.uSampler;\n    }\n    set texture(value: Texture)\n    {\n        if (this.uniforms.uSampler !== value)\n        {\n            if (!this.uniforms.uSampler.baseTexture.alphaMode !== !value.baseTexture.alphaMode)\n            {\n                this._colorDirty = true;\n            }\n\n            this.uniforms.uSampler = value;\n            this.uvMatrix.texture = value;\n        }\n    }\n\n    /**\n     * This gets automatically set by the object using this.\n     * @default 1\n     */\n    set alpha(value: number)\n    {\n        if (value === this._alpha) return;\n\n        this._alpha = value;\n        this._colorDirty = true;\n    }\n    get alpha(): number\n    {\n        return this._alpha;\n    }\n\n    /**\n     * Multiply tint for the material.\n     * @default 0xFFFFFF\n     */\n    set tint(value: ColorSource)\n    {\n        if (value === this.tint) return;\n\n        this._tintColor.setValue(value);\n        this._tintRGB = this._tintColor.toLittleEndianNumber();\n        this._colorDirty = true;\n    }\n    get tint(): ColorSource\n    {\n        return this._tintColor.value;\n    }\n\n    /**\n     * Get the internal number from tint color\n     * @ignore\n     */\n    get tintValue(): number\n    {\n        return this._tintColor.toNumber();\n    }\n\n    /** Gets called automatically by the Mesh. Intended to be overridden for custom {@link PIXI.MeshMaterial} objects. */\n    public update(): void\n    {\n        if (this._colorDirty)\n        {\n            this._colorDirty = false;\n            const baseTexture = this.texture.baseTexture;\n            const applyToChannels = (baseTexture.alphaMode as unknown as boolean);\n\n            Color.shared\n                .setValue(this._tintColor)\n                .premultiply(this._alpha, applyToChannels)\n                .toArray(this.uniforms.uColor);\n        }\n        if (this.uvMatrix.update())\n        {\n            this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n        }\n    }\n}\n"],"mappings":";;;AAsBO,MAAMA,YAAA,SAAqBC,MAClC;EAwCIC,YAAYC,QAAA,EAAmBC,OAC/B;IACI,MAAMC,QAAW;MACbF,QAAA;MACAG,KAAO;MACPC,cAAA,EAAgBC,MAAO,CAAAC,QAAA;MACvBC,MAAA,EAAQ,IAAIC,YAAa,EAAC,GAAG,CAAG,KAAG,CAAC,CAAC;IAAA,CACzC;IAGAP,OAAA,GAAUQ,MAAA,CAAOC,MAAO;MACpBC,IAAM;MACNR,KAAO;MACPS,UAAY;IAAA,GACbX,OAAO;IAEV,IAAIA,OAAA,CAAQC,QACZ;MACWO,MAAA,CAAAC,MAAA,CAAOR,QAAU,EAAAD,OAAA,CAAQC,QAAQ;IAAA;IAG5C,MAAMD,OAAA,CAAQY,OAAW,IAAAC,OAAA,CAAQC,IAAA,CAAKC,MAAQ,EAAAC,QAAQ,GAAGf,QAAQ;IAEjE,KAAKgB,WAAc;IAEd,KAAAC,QAAA,GAAW,IAAIC,aAAA,CAAcpB,QAAQ;IACrC,KAAAqB,SAAA,GAAYpB,OAAA,CAAQY,OAAY;IACrC,KAAKD,UAAA,GAAaX,OAAQ,CAAAW,UAAA;IAE1B,KAAKU,UAAa,OAAIC,KAAM,CAAAtB,OAAA,CAAQU,IAAI;IACnC,KAAAa,QAAA,GAAW,IAAK,CAAAF,UAAA,CAAWG,oBAAqB;IACrD,KAAKP,WAAc;IACnB,KAAKf,KAAA,GAAQF,OAAQ,CAAAE,KAAA;EAAA;EAIzB,IAAIuB,OACJA,CAAA;IACI,OAAO,KAAKxB,QAAS,CAAAF,QAAA;EAAA;EAEzB,IAAI0B,QAAQC,KACZ;IACQ,SAAKzB,QAAS,CAAAF,QAAA,KAAa2B,KAC/B;MACQ,KAAC,KAAKzB,QAAS,CAAAF,QAAA,CAAS4B,WAAA,CAAYC,SAAc,MAACF,KAAM,CAAAC,WAAA,CAAYC,SACzE;QACI,KAAKX,WAAc;MAAA;MAGvB,KAAKhB,QAAA,CAASF,QAAW,GAAA2B,KAAA;MACzB,KAAKR,QAAA,CAASO,OAAU,GAAAC,KAAA;IAAA;EAC5B;EAOJ,IAAIxB,MAAMwB,KACV;IACI,IAAIA,KAAA,KAAU,IAAK,CAAAG,MAAA,EAAQ;IAE3B,KAAKA,MAAS,GAAAH,KAAA;IACd,KAAKT,WAAc;EAAA;EAEvB,IAAIf,KACJA,CAAA;IACI,OAAO,IAAK,CAAA2B,MAAA;EAAA;EAOhB,IAAInB,KAAKgB,KACT;IACI,IAAIA,KAAA,KAAU,IAAK,CAAAhB,IAAA,EAAM;IAEpB,KAAAW,UAAA,CAAWS,QAAA,CAASJ,KAAK;IACzB,KAAAH,QAAA,GAAW,IAAK,CAAAF,UAAA,CAAWG,oBAAqB;IACrD,KAAKP,WAAc;EAAA;EAEvB,IAAIP,IACJA,CAAA;IACI,OAAO,KAAKW,UAAW,CAAAK,KAAA;EAAA;EAO3B,IAAIK,SACJA,CAAA;IACW,YAAKV,UAAA,CAAWW,QAAS;EAAA;EAIpCC,MACAA,CAAA;IACI,IAAI,KAAKhB,WACT;MACI,KAAKA,WAAc;MACb,MAAAU,WAAA,GAAc,KAAKF,OAAQ,CAAAE,WAAA;MACjC,MAAMO,eAAA,GAAmBP,WAAY,CAAAC,SAAA;MAErCN,KAAA,CAAMa,MACD,CAAAL,QAAA,CAAS,IAAK,CAAAT,UAAU,CACxB,CAAAe,WAAA,CAAY,IAAK,CAAAP,MAAA,EAAQK,eAAe,EACxCG,OAAQ,MAAKpC,QAAA,CAASK,MAAM;IAAA;IAEjC,SAAKY,QAAS,CAAAe,MAAA,EAClB;MACS,KAAAhC,QAAA,CAASE,cAAiB,QAAKe,QAAS,CAAAoB,QAAA;IAAA;EACjD;AAER"},"metadata":{},"sourceType":"module","externalDependencies":[]}