{"ast":null,"code":"import { ExtensionType, SVGResource, BaseTexture, utils, settings, extensions } from '@pixi/core';\nimport { checkDataUrl } from '../../../utils/checkDataUrl.mjs';\nimport { checkExtension } from '../../../utils/checkExtension.mjs';\nimport { LoaderParserPriority } from '../LoaderParser.mjs';\nimport { loadTextures } from './loadTextures.mjs';\nimport { createTexture } from './utils/createTexture.mjs';\nconst validSVGExtension = \".svg\";\nconst validSVGMIME = \"image/svg+xml\";\nconst loadSVG = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.High\n  },\n  name: \"loadSVG\",\n  test(url) {\n    return checkDataUrl(url, validSVGMIME) || checkExtension(url, validSVGExtension);\n  },\n  async testParse(data) {\n    return SVGResource.test(data);\n  },\n  async parse(asset, data, loader) {\n    const src = new SVGResource(asset, data?.data?.resourceOptions);\n    await src.load();\n    const base = new BaseTexture(src, {\n      resolution: utils.getResolutionOfUrl(asset),\n      ...data?.data\n    });\n    base.resource.src = asset;\n    const texture = createTexture(base, loader, asset);\n    return texture;\n  },\n  async load(url, _options) {\n    const response = await settings.ADAPTER.fetch(url);\n    return response.text();\n  },\n  unload: loadTextures.unload\n};\nextensions.add(loadSVG);\nexport { loadSVG };","map":{"version":3,"names":["validSVGExtension","validSVGMIME","loadSVG","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","High","name","test","url","checkDataUrl","checkExtension","testParse","data","SVGResource","parse","asset","loader","src","resourceOptions","load","base","BaseTexture","resolution","utils","getResolutionOfUrl","resource","texture","createTexture","_options","response","settings","ADAPTER","fetch","text","unload","loadTextures","extensions","add"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\assets\\src\\loader\\parsers\\textures\\loadSVG.ts"],"sourcesContent":["import { BaseTexture, extensions, ExtensionType, settings, SVGResource, utils } from '@pixi/core';\nimport { checkDataUrl } from '../../../utils/checkDataUrl';\nimport { checkExtension } from '../../../utils/checkExtension';\nimport { LoaderParserPriority } from '../LoaderParser';\nimport { loadTextures } from './loadTextures';\nimport { createTexture } from './utils/createTexture';\n\nimport type { IBaseTextureOptions, Texture } from '@pixi/core';\nimport type { Loader } from '../../Loader';\nimport type { LoadAsset } from '../../types';\nimport type { LoaderParser } from '../LoaderParser';\n\nconst validSVGExtension = '.svg';\nconst validSVGMIME = 'image/svg+xml';\n\n/** Loads SVG's into Textures */\nexport const loadSVG = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    name: 'loadSVG',\n\n    test(url: string): boolean\n    {\n        return checkDataUrl(url, validSVGMIME) || checkExtension(url, validSVGExtension);\n    },\n\n    async testParse(data: string): Promise<boolean>\n    {\n        return SVGResource.test(data);\n    },\n\n    async parse(asset: string, data: LoadAsset<IBaseTextureOptions>, loader: Loader): Promise<Texture>\n    {\n        const src = new SVGResource(asset, data?.data?.resourceOptions);\n\n        await src.load();\n\n        const base = new BaseTexture(src, {\n            resolution: utils.getResolutionOfUrl(asset),\n            ...data?.data,\n        });\n\n        base.resource.src = asset;\n\n        const texture = createTexture(base, loader, asset);\n\n        return texture;\n    },\n\n    async load(url: string, _options: LoadAsset): Promise<string>\n    {\n        const response = await settings.ADAPTER.fetch(url);\n\n        return response.text();\n    },\n\n    unload: loadTextures.unload,\n\n} as LoaderParser<Texture | string, IBaseTextureOptions>;\n\nextensions.add(loadSVG);\n"],"mappings":";;;;;;AAYA,MAAMA,iBAAoB;AAC1B,MAAMC,YAAe;AAGd,MAAMC,OAAU;EACnBC,SAAW;IACPC,IAAA,EAAMC,aAAc,CAAAC,UAAA;IACpBC,QAAA,EAAUC,oBAAqB,CAAAC;EAAA,CACnC;EAEAC,IAAM;EAENC,KAAKC,GACL;IACI,OAAOC,YAAA,CAAaD,GAAK,EAAAX,YAAY,CAAK,IAAAa,cAAA,CAAeF,GAAA,EAAKZ,iBAAiB;EAAA,CACnF;EAEA,MAAMe,UAAUC,IAChB;IACW,OAAAC,WAAA,CAAYN,IAAA,CAAKK,IAAI;EAAA,CAChC;EAEA,MAAME,MAAMC,KAAe,EAAAH,IAAA,EAAsCI,MACjE;IACI,MAAMC,GAAA,GAAM,IAAIJ,WAAA,CAAYE,KAAO,EAAAH,IAAA,EAAMA,IAAA,EAAMM,eAAe;IAE9D,MAAMD,GAAA,CAAIE,IAAK;IAET,MAAAC,IAAA,GAAO,IAAIC,WAAA,CAAYJ,GAAK;MAC9BK,UAAA,EAAYC,KAAM,CAAAC,kBAAA,CAAmBT,KAAK;MAC1C,GAAGH,IAAM,EAAAA;IAAA,CACZ;IAEDQ,IAAA,CAAKK,QAAA,CAASR,GAAM,GAAAF,KAAA;IAEpB,MAAMW,OAAU,GAAAC,aAAA,CAAcP,IAAM,EAAAJ,MAAA,EAAQD,KAAK;IAE1C,OAAAW,OAAA;EAAA,CACX;EAEA,MAAMP,IAAKA,CAAAX,GAAA,EAAaoB,QACxB;IACI,MAAMC,QAAW,SAAMC,QAAS,CAAAC,OAAA,CAAQC,KAAA,CAAMxB,GAAG;IAEjD,OAAOqB,QAAA,CAASI,IAAK;EAAA,CACzB;EAEAC,MAAA,EAAQC,YAAa,CAAAD;AAEzB;AAEAE,UAAA,CAAWC,GAAA,CAAIvC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}