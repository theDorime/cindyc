{"ast":null,"code":"class MeshBatchUvs {\n  constructor(uvBuffer, uvMatrix) {\n    this.uvBuffer = uvBuffer;\n    this.uvMatrix = uvMatrix;\n    this.data = null;\n    this._bufferUpdateId = -1;\n    this._textureUpdateId = -1;\n    this._updateID = 0;\n  }\n  update(forceUpdate) {\n    if (!forceUpdate && this._bufferUpdateId === this.uvBuffer._updateID && this._textureUpdateId === this.uvMatrix._updateID) {\n      return;\n    }\n    this._bufferUpdateId = this.uvBuffer._updateID;\n    this._textureUpdateId = this.uvMatrix._updateID;\n    const data = this.uvBuffer.data;\n    if (!this.data || this.data.length !== data.length) {\n      this.data = new Float32Array(data.length);\n    }\n    this.uvMatrix.multiplyUvs(data, this.data);\n    this._updateID++;\n  }\n}\nexport { MeshBatchUvs };","map":{"version":3,"names":["MeshBatchUvs","constructor","uvBuffer","uvMatrix","data","_bufferUpdateId","_textureUpdateId","_updateID","update","forceUpdate","length","Float32Array","multiplyUvs"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\mesh\\src\\MeshBatchUvs.ts"],"sourcesContent":["import type { Buffer, TextureMatrix } from '@pixi/core';\n\n/**\n * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.\n * @memberof PIXI\n */\nexport class MeshBatchUvs\n{\n    /** UV Buffer data. */\n    public readonly data: Float32Array;\n\n    /** Buffer with normalized UV's. */\n    public uvBuffer: Buffer;\n\n    /** Material UV matrix. */\n    public uvMatrix: TextureMatrix;\n\n    private _bufferUpdateId: number;\n    private _textureUpdateId: number;\n\n    // Internal-only properties\n    _updateID: number;\n\n    /**\n     * @param uvBuffer - Buffer with normalized uv's\n     * @param uvMatrix - Material UV matrix\n     */\n    constructor(uvBuffer: Buffer, uvMatrix: TextureMatrix)\n    {\n        this.uvBuffer = uvBuffer;\n        this.uvMatrix = uvMatrix;\n        this.data = null;\n\n        this._bufferUpdateId = -1;\n        this._textureUpdateId = -1;\n        this._updateID = 0;\n    }\n\n    /**\n     * Updates\n     * @param forceUpdate - force the update\n     */\n    public update(forceUpdate?: boolean): void\n    {\n        if (!forceUpdate\n            && this._bufferUpdateId === this.uvBuffer._updateID\n            && this._textureUpdateId === this.uvMatrix._updateID\n        )\n        {\n            return;\n        }\n\n        this._bufferUpdateId = this.uvBuffer._updateID;\n        this._textureUpdateId = this.uvMatrix._updateID;\n\n        const data = this.uvBuffer.data as Float32Array;\n\n        if (!this.data || this.data.length !== data.length)\n        {\n            (this.data as any) = new Float32Array(data.length);\n        }\n\n        this.uvMatrix.multiplyUvs(data, this.data);\n\n        this._updateID++;\n    }\n}\n"],"mappings":"AAMO,MAAMA,YACb;EAoBIC,YAAYC,QAAA,EAAkBC,QAC9B;IACI,KAAKD,QAAW,GAAAA,QAAA;IAChB,KAAKC,QAAW,GAAAA,QAAA;IAChB,KAAKC,IAAO;IAEZ,KAAKC,eAAkB;IACvB,KAAKC,gBAAmB;IACxB,KAAKC,SAAY;EAAA;EAOdC,OAAOC,WACd;IACQ,KAACA,WACE,SAAKJ,eAAoB,UAAKH,QAAS,CAAAK,SAAA,IACvC,IAAK,CAAAD,gBAAA,KAAqB,IAAK,CAAAH,QAAA,CAASI,SAE/C;MACI;IAAA;IAGC,KAAAF,eAAA,GAAkB,KAAKH,QAAS,CAAAK,SAAA;IAChC,KAAAD,gBAAA,GAAmB,KAAKH,QAAS,CAAAI,SAAA;IAEhC,MAAAH,IAAA,GAAO,KAAKF,QAAS,CAAAE,IAAA;IAE3B,IAAI,CAAC,IAAK,CAAAA,IAAA,IAAQ,KAAKA,IAAK,CAAAM,MAAA,KAAWN,IAAA,CAAKM,MAC5C;MACK,IAAK,CAAAN,IAAA,GAAe,IAAIO,YAAA,CAAaP,IAAA,CAAKM,MAAM;IAAA;IAGrD,KAAKP,QAAS,CAAAS,WAAA,CAAYR,IAAM,OAAKA,IAAI;IAEpC,KAAAG,SAAA;EAAA;AAEb"},"metadata":{},"sourceType":"module","externalDependencies":[]}