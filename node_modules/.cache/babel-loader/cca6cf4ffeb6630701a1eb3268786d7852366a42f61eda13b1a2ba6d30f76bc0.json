{"ast":null,"code":"import { settings, isMobile } from '@pixi/settings';\nfunction maxRecommendedTextures(max) {\n  let allowMax = true;\n  const navigator = settings.ADAPTER.getNavigator();\n  if (isMobile.tablet || isMobile.phone) {\n    if (isMobile.apple.device) {\n      const match = navigator.userAgent.match(/OS (\\d+)_(\\d+)?/);\n      if (match) {\n        const majorVersion = parseInt(match[1], 10);\n        if (majorVersion < 11) {\n          allowMax = false;\n        }\n      }\n    }\n    if (isMobile.android.device) {\n      const match = navigator.userAgent.match(/Android\\s([0-9.]*)/);\n      if (match) {\n        const majorVersion = parseInt(match[1], 10);\n        if (majorVersion < 7) {\n          allowMax = false;\n        }\n      }\n    }\n  }\n  return allowMax ? max : 4;\n}\nexport { maxRecommendedTextures };","map":{"version":3,"names":["maxRecommendedTextures","max","allowMax","navigator","settings","ADAPTER","getNavigator","isMobile","tablet","phone","apple","device","match","userAgent","majorVersion","parseInt","android"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\batch\\maxRecommendedTextures.ts"],"sourcesContent":["import { isMobile, settings } from '@pixi/settings';\n\n/**\n * The maximum recommended texture units to use.\n * In theory the bigger the better, and for desktop we'll use as many as we can.\n * But some mobile devices slow down if there is to many branches in the shader.\n * So in practice there seems to be a sweet spot size that varies depending on the device.\n *\n * In v4, all mobile devices were limited to 4 texture units because for this.\n * In v5, we allow all texture units to be used on modern Apple or Android devices.\n * @private\n * @param {number} max\n * @returns {number} The maximum recommended texture units to use.\n */\nexport function maxRecommendedTextures(max: number): number\n{\n    let allowMax = true;\n    const navigator = settings.ADAPTER.getNavigator();\n\n    if (isMobile.tablet || isMobile.phone)\n    {\n        if (isMobile.apple.device)\n        {\n            const match = (navigator.userAgent).match(/OS (\\d+)_(\\d+)?/);\n\n            if (match)\n            {\n                const majorVersion = parseInt(match[1], 10);\n\n                // Limit texture units on devices below iOS 11, which will be older hardware\n                if (majorVersion < 11)\n                {\n                    allowMax = false;\n                }\n            }\n        }\n        if (isMobile.android.device)\n        {\n            const match = (navigator.userAgent).match(/Android\\s([0-9.]*)/);\n\n            if (match)\n            {\n                const majorVersion = parseInt(match[1], 10);\n\n                // Limit texture units on devices below Android 7 (Nougat), which will be older hardware\n                if (majorVersion < 7)\n                {\n                    allowMax = false;\n                }\n            }\n        }\n    }\n\n    return allowMax ? max : 4;\n}\n"],"mappings":";AAcO,SAAAA,uBAAgCC,GACvC;EACI,IAAIC,QAAW;EACT,MAAAC,SAAA,GAAYC,QAAS,CAAAC,OAAA,CAAQC,YAAa;EAE5C,IAAAC,QAAA,CAASC,MAAU,IAAAD,QAAA,CAASE,KAChC;IACQ,IAAAF,QAAA,CAASG,KAAA,CAAMC,MACnB;MACI,MAAMC,KAAS,GAAAT,SAAA,CAAUU,SAAW,CAAAD,KAAA,CAAM,iBAAiB;MAE3D,IAAIA,KACJ;QACI,MAAME,YAAe,GAAAC,QAAA,CAASH,KAAM,KAAI,EAAE;QAG1C,IAAIE,YAAA,GAAe,EACnB;UACeZ,QAAA;QAAA;MACf;IACJ;IAEA,IAAAK,QAAA,CAASS,OAAA,CAAQL,MACrB;MACI,MAAMC,KAAS,GAAAT,SAAA,CAAUU,SAAW,CAAAD,KAAA,CAAM,oBAAoB;MAE9D,IAAIA,KACJ;QACI,MAAME,YAAe,GAAAC,QAAA,CAASH,KAAM,KAAI,EAAE;QAG1C,IAAIE,YAAA,GAAe,CACnB;UACeZ,QAAA;QAAA;MACf;IACJ;EACJ;EAGJ,OAAOA,QAAA,GAAWD,GAAM;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}