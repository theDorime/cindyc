{"ast":null,"code":"import { ExtensionType, extensions } from '@pixi/extensions';\nimport { deprecation } from '@pixi/utils';\nclass PluginSystem {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.plugins = {};\n    Object.defineProperties(this.plugins, {\n      extract: {\n        enumerable: false,\n        get() {\n          deprecation(\"7.0.0\", \"renderer.plugins.extract has moved to renderer.extract\");\n          return renderer.extract;\n        }\n      },\n      prepare: {\n        enumerable: false,\n        get() {\n          deprecation(\"7.0.0\", \"renderer.plugins.prepare has moved to renderer.prepare\");\n          return renderer.prepare;\n        }\n      },\n      interaction: {\n        enumerable: false,\n        get() {\n          deprecation(\"7.0.0\", \"renderer.plugins.interaction has been deprecated, use renderer.events\");\n          return renderer.events;\n        }\n      }\n    });\n  }\n  init() {\n    const staticMap = this.rendererPlugins;\n    for (const o in staticMap) {\n      this.plugins[o] = new staticMap[o](this.renderer);\n    }\n  }\n  destroy() {\n    for (const o in this.plugins) {\n      this.plugins[o].destroy();\n      this.plugins[o] = null;\n    }\n  }\n}\nPluginSystem.extension = {\n  type: [ExtensionType.RendererSystem, ExtensionType.CanvasRendererSystem],\n  name: \"_plugin\"\n};\nextensions.add(PluginSystem);\nexport { PluginSystem };","map":{"version":3,"names":["PluginSystem","constructor","renderer","plugins","Object","defineProperties","extract","enumerable","get","deprecation","prepare","interaction","events","init","staticMap","rendererPlugins","o","destroy","extension","type","ExtensionType","RendererSystem","CanvasRendererSystem","name","extensions","add"],"sources":["C:\\Users\\cheng\\OneDrive\\Desktop\\site\\cindyjcheng.github.io\\node_modules\\@pixi\\core\\src\\plugin\\PluginSystem.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\nimport { deprecation } from '@pixi/utils';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { IRenderer } from '../IRenderer';\nimport type { ISystem } from '../system/ISystem';\n\nexport interface IRendererPlugins extends GlobalMixins.IRendererPlugins\n{\n    [key: string]: any;\n}\n\n/**\n * Manages the functionality that allows users to extend pixi functionality via additional plugins.\n * @memberof PIXI\n */\nexport class PluginSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n        name: '_plugin',\n    };\n\n    /** @ignore */\n    public rendererPlugins: IRendererPlugins;\n\n    /**\n     * Collection of plugins.\n     * @readonly\n     * @member {object}\n     */\n    public readonly plugins: IRendererPlugins;\n    private renderer: IRenderer;\n\n    constructor(renderer: IRenderer)\n    {\n        this.renderer = renderer;\n\n        /**\n         * Collection of plugins.\n         * @readonly\n         * @member {object}\n         */\n        this.plugins = {};\n\n        // #if _DEBUG\n        Object.defineProperties(this.plugins, {\n            extract: {\n                enumerable: false,\n                get()\n                {\n                    deprecation('7.0.0', 'renderer.plugins.extract has moved to renderer.extract');\n\n                    return (renderer as any).extract;\n                },\n            },\n            prepare: {\n                enumerable: false,\n                get()\n                {\n                    deprecation('7.0.0', 'renderer.plugins.prepare has moved to renderer.prepare');\n\n                    return (renderer as any).prepare;\n                },\n            },\n            interaction: {\n                enumerable: false,\n                get()\n                {\n                    deprecation('7.0.0', 'renderer.plugins.interaction has been deprecated, use renderer.events');\n\n                    return (renderer as any).events;\n                },\n            },\n        });\n        // #endif\n    }\n\n    /**\n     * Initialize the plugins.\n     * @protected\n     */\n    init(): void\n    {\n        const staticMap = this.rendererPlugins;\n\n        for (const o in staticMap)\n        {\n            this.plugins[o] = new (staticMap[o])(this.renderer);\n        }\n    }\n\n    destroy(): void\n    {\n        for (const o in this.plugins)\n        {\n            this.plugins[o].destroy();\n            this.plugins[o] = null;\n        }\n    }\n}\n\nextensions.add(PluginSystem);\n"],"mappings":";;AAgBO,MAAMA,YACb;EAqBIC,YAAYC,QACZ;IACI,KAAKA,QAAW,GAAAA,QAAA;IAOhB,KAAKC,OAAA,GAAU,EAAC;IAGTC,MAAA,CAAAC,gBAAA,CAAiB,KAAKF,OAAS;MAClCG,OAAS;QACLC,UAAY;QACZC,GACAA,CAAA;UACIC,WAAA,CAAY,SAAS,wDAAwD;UAE7E,OAAQP,QAAiB,CAAAI,OAAA;QAAA;MAC7B,CACJ;MACAI,OAAS;QACLH,UAAY;QACZC,GACAA,CAAA;UACIC,WAAA,CAAY,SAAS,wDAAwD;UAE7E,OAAQP,QAAiB,CAAAQ,OAAA;QAAA;MAC7B,CACJ;MACAC,WAAa;QACTJ,UAAY;QACZC,GACAA,CAAA;UACIC,WAAA,CAAY,SAAS,uEAAuE;UAE5F,OAAQP,QAAiB,CAAAU,MAAA;QAAA;MAC7B;IACJ,CACH;EAAA;EAQLC,IACAA,CAAA;IACI,MAAMC,SAAA,GAAY,IAAK,CAAAC,eAAA;IAEvB,WAAWC,CAAA,IAAKF,SAChB;MACI,KAAKX,OAAA,CAAQa,CAAK,QAAKF,SAAU,CAAAE,CAAA,EAAI,KAAKd,QAAQ;IAAA;EACtD;EAGJe,OACAA,CAAA;IACe,WAAAD,CAAA,IAAK,KAAKb,OACrB;MACS,KAAAA,OAAA,CAAQa,CAAA,EAAGC,OAAQ;MACxB,KAAKd,OAAA,CAAQa,CAAK;IAAA;EACtB;AAER;AAxFahB,YAAA,CAGFkB,SAA+B;EAClCC,IAAM,GACFC,aAAc,CAAAC,cAAA,EACdD,aAAc,CAAAE,oBAAA,CAClB;EACAC,IAAM;AACV;AAiFJC,UAAA,CAAWC,GAAA,CAAIzB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}